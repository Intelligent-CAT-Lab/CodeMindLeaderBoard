{
    "HumanEval": {
        "HumanEval_87": {
            "nl": "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    \"\"\"",
            "asserts": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([\n        [1,2,3,4,5,6],\n        [1,2,3,4,1,6],\n        [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    assert candidate([\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6]\n    ], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)]\n    assert candidate([\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6],\n        [1,1,3,4,5,6],\n        [1,2,1,4,5,6],\n        [1,2,3,1,5,6],\n        [1,2,3,4,1,6],\n        [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\n    assert candidate([], 1) == []\n    assert candidate([[1]], 2) == []\n    assert candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True",
            "input_reasoning": "get_row([], 1) ",
            "output_reasoning": " []"
        },
        "HumanEval_101": {
            "nl": "def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \"\"\"",
            "asserts": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    assert candidate(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    assert candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"]\n    assert candidate(\"One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(\"\") == []\n    assert candidate(\"ahmed     , gamal\") == [\"ahmed\", \"gamal\"]",
            "input_reasoning": "words_string(\"Hi, my name is John\") ",
            "output_reasoning": " [\"Hi\", \"my\", \"name\", \"is\", \"John\"]"
        },
        "HumanEval_138": {
            "nl": "def is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n\n    \"\"\"",
            "asserts": "def check(candidate):\n    assert candidate(4) == False\n    assert candidate(6) == False\n    assert candidate(8) == True\n    assert candidate(10) == True\n    assert candidate(11) == False\n    assert candidate(12) == True\n    assert candidate(13) == False\n    assert candidate(16) == True",
            "input_reasoning": "is_equal_to_sum_even(4) ",
            "output_reasoning": " False"
        },
        "HumanEval_96": {
            "nl": "def count_up_to(n):\n    \"\"\"Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    \"\"\"",
            "asserts": "def check(candidate):\n\n    assert candidate(5) == [2,3]\n    assert candidate(6) == [2,3,5]\n    assert candidate(7) == [2,3,5]\n    assert candidate(10) == [2,3,5,7]\n    assert candidate(0) == []\n    assert candidate(22) == [2,3,5,7,11,13,17,19]\n    assert candidate(1) == []\n    assert candidate(18) == [2,3,5,7,11,13,17]\n    assert candidate(47) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43]\n    assert candidate(101) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]",
            "input_reasoning": "count_up_to(5) ",
            "output_reasoning": " [2,3]"
        },
        "HumanEval_139": {
            "nl": "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \"\"\"",
            "asserts": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(4) == 288, \"Test 4\"\n    assert candidate(5) == 34560, \"Test 5\"\n    assert candidate(7) == 125411328000, \"Test 7\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1) == 1, \"Test 1\"",
            "input_reasoning": "special_factorial(4) ",
            "output_reasoning": " 288, \"Test 4\""
        },
        "HumanEval_38": {
            "nl": "def encode_cyclic(s: str):\n    \"\"\"\n    returns encoded string by cycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"",
            "asserts": "METADATA = {}\n\n\ndef check(candidate):\n    from random import randint, choice\n    import string\n\n    letters = string.ascii_lowercase\n    for _ in range(100):\n        str = ''.join(choice(letters) for i in range(randint(10, 20)))\n        encoded_str = encode_cyclic(str)\n        assert candidate(encoded_str) == str",
            "input_reasoning": "    decode_cyclic(encoded_str) ",
            "output_reasoning": " str"
        },
        "HumanEval_33": {
            "nl": "def sort_third(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    \"\"\"",
            "asserts": "METADATA = {}\n\n\ndef check(candidate):\n    assert tuple(candidate([1, 2, 3])) == tuple(sort_third([1, 2, 3]))\n    assert tuple(candidate([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) == tuple(sort_third([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]))\n    assert tuple(candidate([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) == tuple(sort_third([5, 8, -12, 4, 23, 2, 3, 11, 12, -10]))\n    assert tuple(candidate([5, 6, 3, 4, 8, 9, 2])) == tuple([2, 6, 3, 4, 8, 9, 5])\n    assert tuple(candidate([5, 8, 3, 4, 6, 9, 2])) == tuple([2, 8, 3, 4, 6, 9, 5])\n    assert tuple(candidate([5, 6, 9, 4, 8, 3, 2])) == tuple([2, 6, 9, 4, 8, 3, 5])\n    assert tuple(candidate([5, 6, 3, 4, 8, 9, 2, 1])) == tuple([2, 6, 3, 4, 8, 9, 5, 1])",
            "input_reasoning": "tuple(sort_third([1, 2, 3])) ",
            "output_reasoning": " tuple(sort_third([1, 2, 3]))"
        },
        "HumanEval_92": {
            "nl": "def any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.    \n    '''",
            "asserts": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(2, 3, 1)==True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(2.5, 2, 3)==False, \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate(1.5, 5, 3.5)==False, \"This prints if this assert fails 3 (good for debugging!)\"\n    assert candidate(2, 6, 2)==False, \"This prints if this assert fails 4 (good for debugging!)\"\n    assert candidate(4, 2, 2)==True, \"This prints if this assert fails 5 (good for debugging!)\"\n    assert candidate(2.2, 2.2, 2.2)==False, \"This prints if this assert fails 6 (good for debugging!)\"\n    assert candidate(-4, 6, 2)==True, \"This prints if this assert fails 7 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(2,1,1)==True, \"This prints if this assert fails 8 (also good for debugging!)\"\n    assert candidate(3,4,7)==True, \"This prints if this assert fails 9 (also good for debugging!)\"\n    assert candidate(3.0,4,7)==False, \"This prints if this assert fails 10 (also good for debugging!)\"",
            "input_reasoning": "any_int(2, 3, 1)",
            "output_reasoning": "True, \"This prints if this assert fails 1 (good for debugging!)\""
        },
        "HumanEval_155": {
            "nl": "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n\n    \"\"\"",
            "asserts": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(7) == (0, 1)\n    assert candidate(-78) == (1, 1)\n    assert candidate(3452) == (2, 2)\n    assert candidate(346211) == (3, 3)\n    assert candidate(-345821) == (3, 3)\n    assert candidate(-2) == (1, 0)\n    assert candidate(-45347) == (2, 3)\n    assert candidate(0) == (1, 0)\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True",
            "input_reasoning": "even_odd_count(7) ",
            "output_reasoning": " (0, 1)"
        },
        "HumanEval_1": {
            "nl": "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    \"\"\"",
            "asserts": "METADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == ['(()())', '((()))', '()', '((())()())']\n    assert candidate('() (()) ((())) (((())))') == ['()', '(())', '((()))', '(((())))']\n    assert candidate('(()(())((())))') == ['(()(())((())))']\n    assert candidate('( ) (( )) (( )( ))') == ['()', '(())', '(()())']",
            "input_reasoning": "separate_paren_groups('(()()) ((())) () ((())()())') ",
            "output_reasoning": " ['(()())', '((()))', '()', '((())()())']"
        },
        "HumanEval_91": {
            "nl": "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\n    \"\"\"",
            "asserts": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"Hello world\") == 0, \"Test 1\"\n    assert candidate(\"Is the sky blue?\") == 0, \"Test 2\"\n    assert candidate(\"I love It !\") == 1, \"Test 3\"\n    assert candidate(\"bIt\") == 0, \"Test 4\"\n    assert candidate(\"I feel good today. I will be productive. will kill It\") == 2, \"Test 5\"\n    assert candidate(\"You and I are going for a walk\") == 0, \"Test 6\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"",
            "input_reasoning": "is_bored(\"Hello world\") ",
            "output_reasoning": " 0, \"Test 1\""
        },
        "HumanEval_104": {
            "nl": "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \"\"\"",
            "asserts": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) == []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert candidate([135, 103, 31]) == [31, 135]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True",
            "input_reasoning": "unique_digits([15, 33, 1422, 1]) ",
            "output_reasoning": " [1, 15, 33]"
        },
        "HumanEval_127": {
            "nl": "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n    \"\"\"",
            "asserts": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate((1, 2), (2, 3)) == \"NO\"\n    assert candidate((-1, 1), (0, 4)) == \"NO\"\n    assert candidate((-3, -1), (-5, 5)) == \"YES\"\n    assert candidate((-2, 2), (-4, 0)) == \"YES\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate((-11, 2), (-1, -1)) == \"NO\"\n    assert candidate((1, 2), (3, 5)) == \"NO\"\n    assert candidate((1, 2), (1, 2)) == \"NO\"\n    assert candidate((-2, -2), (-3, -2)) == \"NO\"",
            "input_reasoning": "intersection((1, 2), (2, 3)) ",
            "output_reasoning": " \"NO\""
        },
        "HumanEval_90": {
            "nl": "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    \"\"\"",
            "asserts": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1, 2, 3, 4, 5]) == 2\n    assert candidate([5, 1, 4, 3, 2]) == 2\n    assert candidate([]) == None\n    assert candidate([1, 1]) == None\n    assert candidate([1,1,1,1,0]) == 1\n    assert candidate([1, 0**0]) == None\n    assert candidate([-35, 34, 12, -45]) == -35\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True",
            "input_reasoning": "next_smallest([1, 2, 3, 4, 5]) ",
            "output_reasoning": " 2"
        },
        "HumanEval_7": {
            "nl": "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    \"\"\"",
            "asserts": "METADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']",
            "input_reasoning": "filter_by_substring([], 'john') ",
            "output_reasoning": " []"
        },
        "HumanEval_136": {
            "nl": "def largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n    '''",
            "asserts": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([2, 4, 1, 3, 5, 7]) == (None, 1)\n    assert candidate([2, 4, 1, 3, 5, 7, 0]) == (None, 1)\n    assert candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1)\n    assert candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2)\n    assert candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2)\n    assert candidate([]) == (None, None)\n    assert candidate([0]) == (None, None)\n    assert candidate([-1, -3, -5, -6]) == (-1, None)\n    assert candidate([-1, -3, -5, -6, 0]) == (-1, None)\n    assert candidate([-6, -4, -4, -3, 1]) == (-3, 1)\n    assert candidate([-6, -4, -4, -3, -100, 1]) == (-3, 1)\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True",
            "input_reasoning": "largest_smallest_integers([2, 4, 1, 3, 5, 7]) ",
            "output_reasoning": " (None, 1)"
        },
        "HumanEval_99": {
            "nl": "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    '''",
            "asserts": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"10\") == 10, \"Test 1\"\n    assert candidate(\"14.5\") == 15, \"Test 2\"\n    assert candidate(\"-15.5\") == -16, \"Test 3\"\n    assert candidate(\"15.3\") == 15, \"Test 3\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"0\") == 0, \"Test 0\"",
            "input_reasoning": "closest_integer(\"10\") ",
            "output_reasoning": " 10, \"Test 1\""
        },
        "HumanEval_81": {
            "nl": "def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n    \"\"\"",
            "asserts": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([4.0, 3, 1.7, 2, 3.5]) == ['A+', 'B', 'C-', 'C', 'A-']\n    assert candidate([1.2]) == ['D+']\n    assert candidate([0.5]) == ['D-']\n    assert candidate([0.0]) == ['E']\n    assert candidate([1, 0.3, 1.5, 2.8, 3.3]) == ['D', 'D-', 'C-', 'B', 'B+']\n    assert candidate([0, 0.7]) == ['E', 'D-']\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True",
            "input_reasoning": "numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]) ",
            "output_reasoning": " ['A+', 'B', 'C-', 'C', 'A-']"
        },
        "HumanEval_119": {
            "nl": "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n    '''",
            "asserts": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(['()(', ')']) == 'Yes'\n    assert candidate([')', ')']) == 'No'\n    assert candidate(['(()(())', '())())']) == 'No'\n    assert candidate([')())', '(()()(']) == 'Yes'\n    assert candidate(['(())))', '(()())((']) == 'Yes'\n    assert candidate(['()', '())']) == 'No'\n    assert candidate(['(()(', '()))()']) == 'Yes'\n    assert candidate(['((((', '((())']) == 'No'\n    assert candidate([')(()', '(()(']) == 'No'\n    assert candidate([')(', ')(']) == 'No'\n    \n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(['(', ')']) == 'Yes'\n    assert candidate([')', '(']) == 'Yes' ",
            "input_reasoning": "match_parens(['()(', ')']) ",
            "output_reasoning": " 'Yes'"
        },
        "HumanEval_10": {
            "nl": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    \"\"\"",
            "asserts": "METADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate('') == ''\n    assert candidate('x') == 'x'\n    assert candidate('xyz') == 'xyzyx'\n    assert candidate('xyx') == 'xyx'\n    assert candidate('jerry') == 'jerryrrej'",
            "input_reasoning": "make_palindrome('') ",
            "output_reasoning": " ''"
        },
        "HumanEval_56": {
            "nl": "def correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n    \"\"\"",
            "asserts": "METADATA = {}\n\n\ndef check(candidate):\n    assert candidate(\"<>\")\n    assert candidate(\"<<><>>\")\n    assert candidate(\"<><><<><>><>\")\n    assert candidate(\"<><><<<><><>><>><<><><<>>>\")\n    assert not candidate(\"<<<><>>>>\")\n    assert not candidate(\"><<>\")\n    assert not candidate(\"<\")\n    assert not candidate(\"<<<<\")\n    assert not candidate(\">\")\n    assert not candidate(\"<<>\")\n    assert not candidate(\"<><><<><>><>><<>\")\n    assert not candidate(\"<><><<><>><>>><>\")",
            "input_reasoning": "correct_bracketing(10) ",
            "output_reasoning": " 55"
        },
        "HumanEval_109": {
            "nl": "def move_one_ball(arr):\n    \"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing \n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n    \n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index. \n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return True else return False.\n    If the given array is empty then return True.\n\n    Note: The given list is guaranteed to have unique elements.\n                \n    \"\"\"",
            "asserts": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([3, 4, 5, 1, 2])==True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([3, 5, 10, 1, 2])==True\n    assert candidate([4, 3, 1, 2])==False\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([3, 5, 4, 1, 2])==False, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([])==True",
            "input_reasoning": "move_one_ball([3, 4, 5, 1, 2])",
            "output_reasoning": "True, \"This prints if this assert fails 1 (good for debugging!)\""
        },
        "HumanEval_25": {
            "nl": "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    \"\"\"",
            "asserts": "METADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(3 * 19) == [3, 19]\n    assert candidate(3 * 19 * 3 * 19) == [3, 3, 19, 19]\n    assert candidate(3 * 19 * 3 * 19 * 3 * 19) == [3, 3, 3, 19, 19, 19]\n    assert candidate(3 * 19 * 19 * 19) == [3, 19, 19, 19]\n    assert candidate(3 * 2 * 3) == [2, 3, 3]",
            "input_reasoning": "factorize(2) ",
            "output_reasoning": " [2]"
        },
        "HumanEval_43": {
            "nl": "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    \"\"\"",
            "asserts": "METADATA = {}\n\n\ndef check(candidate):\n    assert candidate([1, 3, 5, 0]) == False\n    assert candidate([1, 3, -2, 1]) == False\n    assert candidate([1, 2, 3, 7]) == False\n    assert candidate([2, 4, -5, 3, 5, 7]) == True\n    assert candidate([1]) == False\n\n    assert candidate([-3, 9, -1, 3, 2, 30]) == True\n    assert candidate([-3, 9, -1, 3, 2, 31]) == True\n    assert candidate([-3, 9, -1, 4, 2, 30]) == False\n    assert candidate([-3, 9, -1, 4, 2, 31]) == False",
            "input_reasoning": "pairs_sum_to_zero([1, 3, 5, 0]) ",
            "output_reasoning": " False"
        },
        "HumanEval_84": {
            "nl": "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"",
            "asserts": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(1000) == \"1\", \"Error\"\n    assert candidate(150) == \"110\", \"Error\"\n    assert candidate(147) == \"1100\", \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(333) == \"1001\", \"Error\"\n    assert candidate(963) == \"10010\", \"Error\"",
            "input_reasoning": "solve(1000) ",
            "output_reasoning": " \"1\", \"Error\""
        },
        "HumanEval_70": {
            "nl": "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n    '''",
            "asserts": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\n    assert candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\n    assert candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]\n    assert candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]\n    assert candidate([5, 5, 5, 5]) == [5, 5, 5, 5]\n    assert candidate([]) == []\n    assert candidate([1,2,3,4,5,6,7,8]) == [1, 8, 2, 7, 3, 6, 4, 5]\n    assert candidate([0,2,2,2,5,5,-5,-5]) == [-5, 5, -5, 5, 0, 2, 2, 2]\n    assert candidate([111111]) == [111111]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True",
            "input_reasoning": "strange_sort_list([1, 2, 3, 4]) ",
            "output_reasoning": " [1, 4, 2, 3]"
        },
        "HumanEval_98": {
            "nl": "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \"\"\"",
            "asserts": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('aBCdEf')  == 1\n    assert candidate('abcdefg') == 0\n    assert candidate('dBBE') == 0\n    assert candidate('B')  == 0\n    assert candidate('U')  == 1\n    assert candidate('') == 0\n    assert candidate('EEEE') == 2\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True",
            "input_reasoning": "count_upper('aBCdEf')  ",
            "output_reasoning": " 1"
        },
        "HumanEval_158": {
            "nl": "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    \"\"\"",
            "asserts": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([\"name\", \"of\", \"string\"] == \"string\"\n    assert (candidate([\"name\", \"enam\", \"game\"]) == \"enam\"), 't2'\n    assert (candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"), 't3'\n    assert (candidate([\"abc\", \"cba\"]) == \"abc\"), 't4'\n    assert (candidate([\"play\", \"this\", \"game\", \"of\",\"footbott\"]) == \"footbott\"), 't5'\n    assert (candidate([\"we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\"), 't6'\n    assert (candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\"), 't7'\n    assert (candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"this\"), 't8'\n\n    # Check some edge cases that are easy to work out by hand.\n    assert (candidate([\"b\"]) == \"b\"), 't9'\n    assert (candidate([\"play\", \"play\", \"play\"]) == \"play\"), 't10'",
            "input_reasoning": "find_max([\"name\", \"of\", \"string\"] ",
            "output_reasoning": " \"string\""
        },
        "HumanEval_72": {
            "nl": "def will_it_fly(q,w):\n    '''\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n    '''",
            "asserts": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([3, 2, 3], 9) is True\n    assert candidate([1, 2], 5) is False\n    assert candidate([3], 5) is True\n    assert candidate([3, 2, 3], 1) is False\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1, 2, 3], 6) is False\n    assert candidate([5], 5) is True",
            "input_reasoning": "will_it_fly(3, 4, 5) ",
            "output_reasoning": " 6.00, \"This prints if this assert fails 1 (good for debugging!)\""
        },
        "HumanEval_50": {
            "nl": "def encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"",
            "asserts": "METADATA = {}\n\n\ndef check(candidate):\n    from random import randint, choice\n    import copy\n    import string\n\n    letters = string.ascii_lowercase\n    for _ in range(100):\n        str = ''.join(choice(letters) for i in range(randint(10, 20)))\n        encoded_str = encode_shift(str)\n        assert candidate(copy.deepcopy(encoded_str)) == str",
            "input_reasoning": "    decode_shift(copy.deepcopy(encoded_str)) ",
            "output_reasoning": " str"
        },
        "HumanEval_156": {
            "nl": "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    \"\"\"",
            "asserts": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(19) == 'xix'\n    assert candidate(152) == 'clii'\n    assert candidate(251) == 'ccli'\n    assert candidate(426) == 'cdxxvi'\n    assert candidate(500) == 'd'\n    assert candidate(1) == 'i'\n    assert candidate(4) == 'iv'\n    assert candidate(43) == 'xliii'\n    assert candidate(90) == 'xc'\n    assert candidate(94) == 'xciv'\n    assert candidate(532) == 'dxxxii'\n    assert candidate(900) == 'cm'\n    assert candidate(994) == 'cmxciv'\n    assert candidate(1000) == 'm'\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True",
            "input_reasoning": "int_to_mini_roman(19) ",
            "output_reasoning": " 'xix'"
        },
        "HumanEval_3": {
            "nl": "from typing import List\n\n\ndef below_zero(operations: List[int]) -> bool:\n    \"\"\" You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    \"\"\"",
            "asserts": "METADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([]) == False\n    assert candidate([1, 2, -3, 1, 2, -3]) == False\n    assert candidate([1, 2, -4, 5, 6]) == True\n    assert candidate([1, -1, 2, -2, 5, -5, 4, -4]) == False\n    assert candidate([1, -1, 2, -2, 5, -5, 4, -5]) == True\n    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True",
            "input_reasoning": "below_zero([]) ",
            "output_reasoning": " False"
        },
        "HumanEval_52": {
            "nl": "def below_threshold(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n    \"\"\"",
            "asserts": "METADATA = {}\n\n\ndef check(candidate):\n    assert candidate([1, 2, 4, 10], 100)\n    assert not candidate([1, 20, 4, 10], 5)\n    assert candidate([1, 20, 4, 10], 21)\n    assert candidate([1, 20, 4, 10], 22)\n    assert candidate([1, 8, 4, 10], 11)\n    assert not candidate([1, 8, 4, 10], 10)",
            "input_reasoning": "below_threshold('') ",
            "output_reasoning": " ''"
        },
        "HumanEval_64": {
            "nl": "FIX = \"\"\"\nAdd more test cases.\n\"\"\"\n\ndef vowels_count(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n    \"\"\"",
            "asserts": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"abcde\") == 2, \"Test 1\"\n    assert candidate(\"Alone\") == 3, \"Test 2\"\n    assert candidate(\"key\") == 2, \"Test 3\"\n    assert candidate(\"bye\") == 1, \"Test 4\"\n    assert candidate(\"keY\") == 2, \"Test 5\"\n    assert candidate(\"bYe\") == 1, \"Test 6\"\n    assert candidate(\"ACEDY\") == 3, \"Test 7\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"",
            "input_reasoning": "vowels_count(\"abcde\") ",
            "output_reasoning": " 2, \"Test 1\""
        },
        "HumanEval_35": {
            "nl": "def max_element(l: list):\n    \"\"\"Return maximum element in the list.\n    \"\"\"",
            "asserts": "METADATA = {}\n\n\ndef check(candidate):\n    assert candidate([1, 2, 3]) == 3\n    assert candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124",
            "input_reasoning": "max_element([1, 2, 3]) ",
            "output_reasoning": " 3"
        },
        "HumanEval_39": {
            "nl": "def prime_fib(n: int):\n    \"\"\"\n    prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n    \"\"\"",
            "asserts": "METADATA = {}\n\n\ndef check(candidate):\n    assert candidate(1) == 2\n    assert candidate(2) == 3\n    assert candidate(3) == 5\n    assert candidate(4) == 13\n    assert candidate(5) == 89\n    assert candidate(6) == 233\n    assert candidate(7) == 1597\n    assert candidate(8) == 28657\n    assert candidate(9) == 514229\n    assert candidate(10) == 433494437",
            "input_reasoning": "prime_fib(1) ",
            "output_reasoning": " 2"
        },
        "HumanEval_16": {
            "nl": "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    \"\"\"",
            "asserts": "METADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate('') == 0\n    assert candidate('abcde') == 5\n    assert candidate('abcde' + 'cade' + 'CADE') == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n    assert candidate('Jerry jERRY JeRRRY') == 5",
            "input_reasoning": "count_distinct_characters('') ",
            "output_reasoning": " 0"
        },
        "HumanEval_54": {
            "nl": "def same_chars(s0: str, s1: str):\n    \"\"\"\n    Check if two words have the same characters.\n    \"\"\"",
            "asserts": "METADATA = {}\n\n\ndef check(candidate):\n    assert candidate('eabcdzzzz', 'dddzzzzzzzddeddabc') == True\n    assert candidate('abcd', 'dddddddabc') == True\n    assert candidate('dddddddabc', 'abcd') == True\n    assert candidate('eabcd', 'dddddddabc') == False\n    assert candidate('abcd', 'dddddddabcf') == False\n    assert candidate('eabcdzzzz', 'dddzzzzzzzddddabc') == False\n    assert candidate('aabb', 'aaccc') == False",
            "input_reasoning": "same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc') ",
            "output_reasoning": " True"
        },
        "HumanEval_152": {
            "nl": "def compare(game,guess):\n    \"\"\"I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match. \n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n\n    \"\"\"",
            "asserts": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1,2,3,4,5,1],[1,2,3,4,2,-2])==[0,0,0,0,3,3], \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([0,0,0,0,0,0],[0,0,0,0,0,0])==[0,0,0,0,0,0], \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1,2,3],[-1,-2,-3])==[2,4,6], \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1,2,3,5],[-1,2,3,4])==[2,0,0,1], \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"",
            "input_reasoning": "compare([1,2,3,4,5,1],[1,2,3,4,2,-2])",
            "output_reasoning": "[0,0,0,0,3,3], \"This prints if this assert fails 1 (good for debugging!)\""
        },
        "HumanEval_146": {
            "nl": "def specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n\n    \"\"\"",
            "asserts": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([5, -2, 1, -5]) == 0  \n    assert candidate([15, -73, 14, -15]) == 1\n    assert candidate([33, -2, -3, 45, 21, 109]) == 2\n    assert candidate([43, -12, 93, 125, 121, 109]) == 4\n    assert candidate([71, -2, -33, 75, 21, 19]) == 3\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1]) == 0              \n    assert candidate([]) == 0                   ",
            "input_reasoning": "specialFilter([5, -2, 1, -5]) ",
            "output_reasoning": " 0  "
        },
        "HumanEval_2": {
            "nl": "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    \"\"\"",
            "asserts": "METADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(3.5) == 0.5\n    assert abs(candidate(1.33) - 0.33) < 1e-6\n    assert abs(candidate(123.456) - 0.456) < 1e-6",
            "input_reasoning": "truncate_number(3.5) ",
            "output_reasoning": " 0.5"
        },
        "HumanEval_131": {
            "nl": "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    \"\"\"",
            "asserts": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(5) == 5\n    assert candidate(54) == 5\n    assert candidate(120) ==1\n    assert candidate(5014) == 5\n    assert candidate(98765) == 315\n    assert candidate(5576543) == 2625\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(2468) == 0",
            "input_reasoning": "digits(5) ",
            "output_reasoning": " 5"
        },
        "HumanEval_116": {
            "nl": "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n    \"\"\"",
            "asserts": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1,5,2,3,4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2,-3,-4,-5,-6]) == [-4, -2, -6, -5, -3]\n    assert candidate([1,0,2,3,4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n    assert candidate([2,5,77,4,5,3,5,7,2,3,4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,6,44,12,32,5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2,4,8,16,32]) == [2, 4, 8, 16, 32]\n    assert candidate([2,4,8,16,32]) == [2, 4, 8, 16, 32]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"",
            "input_reasoning": "sort_array([1,5,2,3,4]) ",
            "output_reasoning": " [1, 2, 4, 3, 5]"
        },
        "HumanEval_105": {
            "nl": "def by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    \"\"\"",
            "asserts": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"], \"Error\"\n    assert candidate([]) == [], \"Error\"\n    assert candidate([1, -1 , 55]) == ['One'], \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"]\n    assert candidate([9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"]",
            "input_reasoning": "by_length([2, 1, 1, 4, 5, 8, 2, 3]) ",
            "output_reasoning": " [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"], \"Error\""
        },
        "HumanEval_23": {
            "nl": "def strlen(string: str) -> int:\n    \"\"\" Return length of given string\n    \"\"\"",
            "asserts": "METADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate('') == 0\n    assert candidate('x') == 1\n    assert candidate('asdasnakj') == 9",
            "input_reasoning": "strlen('') ",
            "output_reasoning": " 0"
        },
        "HumanEval_112": {
            "nl": "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    \"\"\"",
            "asserts": "def check(candidate):\n\n    assert candidate(\"abcde\",\"ae\") == ('bcd',False)\n    assert candidate(\"abcdef\", \"b\") == ('acdef',False)\n    assert candidate(\"abcdedcba\",\"ab\") == ('cdedc',True)\n    assert candidate(\"dwik\",\"w\") == ('dik',False)\n    assert candidate(\"a\",\"a\") == ('',True)\n    assert candidate(\"abcdedcba\",\"\") == ('abcdedcba',True)\n    assert candidate(\"abcdedcba\",\"v\") == ('abcdedcba',True)\n    assert candidate(\"vabba\",\"v\") == ('abba',True)\n    assert candidate(\"mamma\", \"mia\") == (\"\", True)",
            "input_reasoning": "reverse_delete(\"abcde\",\"ae\") ",
            "output_reasoning": " ('bcd',False)"
        },
        "HumanEval_42": {
            "nl": "def incr_list(l: list):\n    \"\"\"Return list with elements incremented by 1.\n    \"\"\"",
            "asserts": "METADATA = {}\n\n\ndef check(candidate):\n    assert candidate([]) == []\n    assert candidate([3, 2, 1]) == [4, 3, 2]\n    assert candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]",
            "input_reasoning": "incr_list([]) ",
            "output_reasoning": " []"
        },
        "HumanEval_163": {
            "nl": "def generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n    \"\"\"",
            "asserts": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(2, 10) == [2, 4, 6, 8], \"Test 1\"\n    assert candidate(10, 2) == [2, 4, 6, 8], \"Test 2\"\n    assert candidate(132, 2) == [2, 4, 6, 8], \"Test 3\"\n    assert candidate(17,89) == [], \"Test 4\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"",
            "input_reasoning": "generate_integers(2, 10) ",
            "output_reasoning": " [2, 4, 6, 8], \"Test 1\""
        },
        "HumanEval_149": {
            "nl": "def sorted_list_sum(lst):\n    \"\"\"Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    \"\"\"",
            "asserts": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]\n    assert candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]\n    assert candidate([\"d\", \"b\", \"c\", \"a\"]) == []\n    assert candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"]\n    assert candidate([\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == []\n    assert candidate(['aaaa', 'bbbb', 'dd', 'cc']) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]",
            "input_reasoning": "sorted_list_sum([\"aa\", \"a\", \"aaa\"]) ",
            "output_reasoning": " [\"aa\"]"
        },
        "HumanEval_27": {
            "nl": "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    \"\"\"",
            "asserts": "METADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate('') == ''\n    assert candidate('Hello!') == 'hELLO!'\n    assert candidate('These violent delights have violent ends') == 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'",
            "input_reasoning": "flip_case('') ",
            "output_reasoning": " ''"
        },
        "HumanEval_26": {
            "nl": "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    \"\"\"",
            "asserts": "METADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([]) == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5]",
            "input_reasoning": "remove_duplicates([]) ",
            "output_reasoning": " []"
        },
        "HumanEval_144": {
            "nl": "def simplify(x, n):\n    \"\"\"Your task is to implement a function that will simplify the expression\n    x * n. The function returns True if x * n evaluates to a whole number and False\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n    You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n    \"\"\"",
            "asserts": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"1/5\", \"5/1\") == True, 'test1'\n    assert candidate(\"1/6\", \"2/1\") == False, 'test2'\n    assert candidate(\"5/1\", \"3/1\") == True, 'test3'\n    assert candidate(\"7/10\", \"10/2\") == False, 'test4'\n    assert candidate(\"2/10\", \"50/10\") == True, 'test5'\n    assert candidate(\"7/2\", \"4/2\") == True, 'test6'\n    assert candidate(\"11/6\", \"6/1\") == True, 'test7'\n    assert candidate(\"2/3\", \"5/2\") == False, 'test8'\n    assert candidate(\"5/2\", \"3/5\") == False, 'test9'\n    assert candidate(\"2/4\", \"8/4\") == True, 'test10'\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"2/4\", \"4/2\") == True, 'test11'\n    assert candidate(\"1/5\", \"5/1\") == True, 'test12'\n    assert candidate(\"1/5\", \"1/5\") == False, 'test13'",
            "input_reasoning": "simplify(\"1/5\", \"5/1\") ",
            "output_reasoning": " True, 'test1'"
        },
        "HumanEval_153": {
            "nl": "def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the strongest extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n    \"\"\"",
            "asserts": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'\n    assert candidate('Boku123', ['nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg']) == 'Boku123.YEs.WeCaNe'\n    assert candidate('__YESIMHERE', ['t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__'\n    assert candidate('K', ['Ta', 'TAR', 't234An', 'cosSo']) == 'K.TAR'\n    assert candidate('__HAHA', ['Tab', '123', '781345', '-_-']) == '__HAHA.123'\n    assert candidate('YameRore', ['HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-']) == 'YameRore.okIWILL123'\n    assert candidate('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) == 'finNNalLLly.WoW'\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('_', ['Bb', '91245']) == '_.Bb'\n    assert candidate('Sp', ['671235', 'Bb']) == 'Sp.671235'\n    ",
            "input_reasoning": "Strongest_Extension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ",
            "output_reasoning": " 'Watashi.eIGHt8OKe'"
        },
        "HumanEval_126": {
            "nl": "def is_sorted(lst):\n    '''\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return False. Assume no negative numbers and only integers.\n\n    '''",
            "asserts": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([5]) == True\n    assert candidate([1, 2, 3, 4, 5]) == True\n    assert candidate([1, 3, 2, 4, 5]) == False\n    assert candidate([1, 2, 3, 4, 5, 6]) == True\n    assert candidate([1, 2, 3, 4, 5, 6, 7]) == True\n    assert candidate([1, 3, 2, 4, 5, 6, 7]) == False, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([]) == True, \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate([1]) == True, \"This prints if this assert fails 3 (good for debugging!)\"\n    assert candidate([3, 2, 1]) == False, \"This prints if this assert fails 4 (good for debugging!)\"\n    \n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1, 2, 2, 2, 3, 4]) == False, \"This prints if this assert fails 5 (good for debugging!)\"\n    assert candidate([1, 2, 3, 3, 3, 4]) == False, \"This prints if this assert fails 6 (good for debugging!)\"\n    assert candidate([1, 2, 2, 3, 3, 4]) == True, \"This prints if this assert fails 7 (good for debugging!)\"\n    assert candidate([1, 2, 3, 4]) == True, \"This prints if this assert fails 8 (good for debugging!)\"",
            "input_reasoning": "is_sorted([5]) ",
            "output_reasoning": " True"
        },
        "HumanEval_5": {
            "nl": "from typing import List\n\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\" Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    \"\"\"",
            "asserts": "METADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([], 7) == []\n    assert candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8, 2]\n    assert candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2]",
            "input_reasoning": "intersperse([], 7) ",
            "output_reasoning": " []"
        },
        "HumanEval_159": {
            "nl": "def eat(number, need, remaining):\n    \"\"\"\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n    \n    \n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n    \"\"\"",
            "asserts": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(5, 6, 10) == [11, 4], \"Error\"\n    assert candidate(4, 8, 9) == [12, 1], \"Error\"\n    assert candidate(1, 10, 10) == [11, 0], \"Error\"\n    assert candidate(2, 11, 5) == [7, 0], \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(4, 5, 7) == [9, 2], \"Error\"\n    assert candidate(4, 5, 1) == [5, 0], \"Error\"",
            "input_reasoning": "eat(5, 6, 10) ",
            "output_reasoning": " [11, 4], \"Error\""
        },
        "HumanEval_14": {
            "nl": "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    \"\"\"",
            "asserts": "METADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate('') == []\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW') == ['W', 'WW', 'WWW']",
            "input_reasoning": "all_prefixes('') ",
            "output_reasoning": " []"
        },
        "HumanEval_13": {
            "nl": "def greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b\n    \"\"\"",
            "asserts": "METADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(3, 7) == 1\n    assert candidate(10, 15) == 5\n    assert candidate(49, 14) == 7\n    assert candidate(144, 60) == 12",
            "input_reasoning": "greatest_common_divisor(3, 7) ",
            "output_reasoning": " 1"
        },
        "HumanEval_151": {
            "nl": "def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    If the input list is empty, return 0.\n    '''",
            "asserts": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([]) == 0 , \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([5, 4]) == 25 , \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate([0.1, 0.2, 0.3]) == 0 , \"This prints if this assert fails 3 (good for debugging!)\"\n    assert candidate([-10, -20, -30]) == 0 , \"This prints if this assert fails 4 (good for debugging!)\"\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([-1, -2, 8]) == 0, \"This prints if this assert fails 5 (also good for debugging!)\"\n    assert candidate([0.2, 3, 5]) == 34, \"This prints if this assert fails 6 (also good for debugging!)\"\n    lst = list(range(-99, 100, 2))\n    odd_sum = sum([i**2 for i in lst if i%2!=0 and i > 0])\n    assert candidate(lst) == odd_sum , \"This prints if this assert fails 7 (good for debugging!)\"",
            "input_reasoning": "double_the_difference([]) ",
            "output_reasoning": " 0 , \"This prints if this assert fails 1 (good for debugging!)\""
        },
        "HumanEval_59": {
            "nl": "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    \"\"\"",
            "asserts": "METADATA = {}\n\n\ndef check(candidate):\n    assert candidate(15) == 5\n    assert candidate(27) == 3\n    assert candidate(63) == 7\n    assert candidate(330) == 11\n    assert candidate(13195) == 29",
            "input_reasoning": "largest_prime_factor(15) ",
            "output_reasoning": " 5"
        },
        "HumanEval_140": {
            "nl": "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    \"\"\"",
            "asserts": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"Example\") == \"Example\", \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\", \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\", \"This prints if this assert fails 3 (good for debugging!)\"\n    \n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"Exa   mple\") == \"Exa-mple\", \"This prints if this assert fails 4 (good for debugging!)\"\n    assert candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\", \"This prints if this assert fails 4 (good for debugging!)\"",
            "input_reasoning": "fix_spaces(\"Example\") ",
            "output_reasoning": " \"Example\", \"This prints if this assert fails 1 (good for debugging!)\""
        },
        "HumanEval_132": {
            "nl": "def is_nested(string):\n    '''\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n    '''",
            "asserts": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('[[]]') == True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('[]]]]]]][[[[[]') == False\n    assert candidate('[][]') == False\n    assert candidate(('[]')) == False\n    assert candidate('[[[[]]]]') == True\n    assert candidate('[]]]]]]]]]]') == False\n    assert candidate('[][][[]]') == True\n    assert candidate('[[]') == False\n    assert candidate('[]]') == False\n    assert candidate('[[]][[') == True\n    assert candidate('[[][]]') == True\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('') == False, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate('[[[[[[[[') == False\n    assert candidate(']]]]]]]]') == False",
            "input_reasoning": "is_nested('[[]]') ",
            "output_reasoning": " True, \"This prints if this assert fails 1 (good for debugging!)\""
        },
        "HumanEval_120": {
            "nl": "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"",
            "asserts": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0 , 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0 , 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []",
            "input_reasoning": "maximum([-3, -4, 5], 3) ",
            "output_reasoning": " [-4, -3, 5]"
        },
        "HumanEval_133": {
            "nl": "def sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n\n    \"\"\"",
            "asserts": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1,2,3])==14, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1.0,2,3])==14, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1,3,5,7])==84, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1.4,4.2,0])==29, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([-2.4,1,1])==6, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    assert candidate([100,1,15,2])==10230, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([10000,10000])==200000000, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([-1.4,4.6,6.3])==75, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([-1.4,17.9,18.9,19.9])==1086, \"This prints if this assert fails 1 (good for debugging!)\"\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([0])==0, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([-1])==1, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([-1,1,0])==2, \"This prints if this assert fails 2 (also good for debugging!)\"",
            "input_reasoning": "sum_squares([1,2,3])",
            "output_reasoning": "14, \"This prints if this assert fails 1 (good for debugging!)\""
        },
        "HumanEval_102": {
            "nl": "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n    \"\"\"",
            "asserts": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546) == 546",
            "input_reasoning": "choose_num(12, 15) ",
            "output_reasoning": " 14"
        },
        "HumanEval_44": {
            "nl": "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    \"\"\"",
            "asserts": "METADATA = {}\n\n\ndef check(candidate):\n    assert candidate(8, 3) == \"22\"\n    assert candidate(9, 3) == \"100\"\n    assert candidate(234, 2) == \"11101010\"\n    assert candidate(16, 2) == \"10000\"\n    assert candidate(8, 2) == \"1000\"\n    assert candidate(7, 2) == \"111\"\n    for x in range(2, 8):\n        assert candidate(x, x + 1) == str(x)",
            "input_reasoning": "change_base(8, 3) ",
            "output_reasoning": " \"22\""
        },
        "HumanEval_100": {
            "nl": "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n    \"\"\"",
            "asserts": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(3) == [3, 5, 7], \"Test 3\"\n    assert candidate(4) == [4,6,8,10], \"Test 4\"\n    assert candidate(5) == [5, 7, 9, 11, 13]\n    assert candidate(6) == [6, 8, 10, 12, 14, 16]\n    assert candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"",
            "input_reasoning": "make_a_pile(3) ",
            "output_reasoning": " [3, 5, 7], \"Test 3\""
        },
        "HumanEval_108": {
            "nl": "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    \"\"\"",
            "asserts": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([]) == 0\n    assert candidate([-1, -2, 0]) == 0\n    assert candidate([1, 1, 2, -2, 3, 4, 5]) == 6\n    assert candidate([1, 6, 9, -6, 0, 1, 5]) == 5\n    assert candidate([1, 100, 98, -7, 1, -1]) == 4\n    assert candidate([12, 23, 34, -45, -56, 0]) == 5\n    assert candidate([-0, 1**0]) == 1\n    assert candidate([1]) == 1\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"",
            "input_reasoning": "count_nums([]) ",
            "output_reasoning": " 0"
        },
        "HumanEval_141": {
            "nl": "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    \"\"\"",
            "asserts": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"example.txt\") == 'Yes'\n    assert candidate(\"1example.dll\") == 'No'\n    assert candidate('s1sdf3.asd') == 'No'\n    assert candidate('K.dll') == 'Yes'\n    assert candidate('MY16FILE3.exe') == 'Yes'\n    assert candidate('His12FILE94.exe') == 'No'\n    assert candidate('_Y.txt') == 'No'\n    assert candidate('?aREYA.exe') == 'No'\n    assert candidate('/this_is_valid.dll') == 'No'\n    assert candidate('this_is_valid.wow') == 'No'\n    assert candidate('this_is_valid.txt') == 'Yes'\n    assert candidate('this_is_valid.txtexe') == 'No'\n    assert candidate('#this2_i4s_5valid.ten') == 'No'\n    assert candidate('@this1_is6_valid.exe') == 'No'\n    assert candidate('this_is_12valid.6exe4.txt') == 'No'\n    assert candidate('all.exe.txt') == 'No'\n    assert candidate('I563_No.exe') == 'Yes'\n    assert candidate('Is3youfault.txt') == 'Yes'\n    assert candidate('no_one#knows.dll') == 'Yes'\n    assert candidate('1I563_Yes3.exe') == 'No'\n    assert candidate('I563_Yes3.txtt') == 'No'\n    assert candidate('final..txt') == 'No'\n    assert candidate('final132') == 'No'\n    assert candidate('_f4indsartal132.') == 'No'\n    \n        \n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('.txt') == 'No'\n    assert candidate('s.') == 'No'",
            "input_reasoning": "file_name_check(\"example.txt\") ",
            "output_reasoning": " 'Yes'"
        },
        "HumanEval_32": {
            "nl": "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    \"\"\"",
            "asserts": "METADATA = {}\n\n\ndef check(candidate):\n    import math\n    import random\n    rng = random.Random(42)\n    import copy\n    for _ in range(100):\n        ncoeff = 2 * rng.randint(1, 4)\n        coeffs = []\n        for _ in range(ncoeff):\n            coeff = rng.randint(-10, 10)\n            if coeff == 0:\n                coeff = 1\n            coeffs.append(coeff)\n        solution = candidate(copy.deepcopy(coeffs))\n        assert math.fabs(poly(coeffs, solution)) < 1e-4",
            "input_reasoning": "find_zero(6) ",
            "output_reasoning": " False"
        },
        "HumanEval_123": {
            "nl": "def get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the \n    previous term as follows: if the previous term is even, the next term is one half of \n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    \"\"\"",
            "asserts": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(14) == [1, 5, 7, 11, 13, 17]\n    assert candidate(5) == [1, 5]\n    assert candidate(12) == [1, 3, 5], \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1) == [1], \"This prints if this assert fails 2 (also good for debugging!)\"",
            "input_reasoning": "get_odd_collatz(14) ",
            "output_reasoning": " [1, 5, 7, 11, 13, 17]"
        },
        "HumanEval_121": {
            "nl": "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \"\"\"",
            "asserts": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([5, 8, 7, 1])    == 12\n    assert candidate([3, 3, 3, 3, 3]) == 9\n    assert candidate([30, 13, 24, 321]) == 0\n    assert candidate([5, 9]) == 5\n    assert candidate([2, 4, 8]) == 0\n    assert candidate([30, 13, 23, 32]) == 23\n    assert candidate([3, 13, 2, 9]) == 3\n\n    # Check some edge cases that are easy to work out by hand.",
            "input_reasoning": "solution([5, 8, 7, 1])    ",
            "output_reasoning": " 12"
        },
        "HumanEval_110": {
            "nl": "def exchange(lst1, lst2):\n    \"\"\"In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    It is assumed that the input lists will be non-empty.\n    \"\"\"",
            "asserts": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n    assert candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\n    assert candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\" \n    assert candidate([5, 7, 3], [2, 6, 4]) == \"YES\"\n    assert candidate([5, 7, 3], [2, 6, 3]) == \"NO\" \n    assert candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([100, 200], [200, 200]) == \"YES\"",
            "input_reasoning": "exchange([1, 2, 3, 4], [1, 2, 3, 4]) ",
            "output_reasoning": " \"YES\""
        },
        "HumanEval_83": {
            "nl": "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"",
            "asserts": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(1) == 1\n    assert candidate(2) == 18\n    assert candidate(3) == 180\n    assert candidate(4) == 1800\n    assert candidate(5) == 18000\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"",
            "input_reasoning": "starts_one_ends(1) ",
            "output_reasoning": " 1"
        },
        "HumanEval_86": {
            "nl": "def anti_shuffle(s):\n    \"\"\"\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n    \"\"\"",
            "asserts": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('Hi') == 'Hi'\n    assert candidate('hello') == 'ehllo'\n    assert candidate('number') == 'bemnru'\n    assert candidate('abcd') == 'abcd'\n    assert candidate('Hello World!!!') == 'Hello !!!Wdlor'\n    assert candidate('') == ''\n    assert candidate('Hi. My name is Mister Robot. How are you?') == '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n    # Check some edge cases that are easy to work out by hand.\n    assert True",
            "input_reasoning": "anti_shuffle('Hi') ",
            "output_reasoning": " 'Hi'"
        },
        "HumanEval_78": {
            "nl": "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    \"\"\"",
            "asserts": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"AB\") == 1, \"First test error: \" + str(candidate(\"AB\"))      \n    assert candidate(\"1077E\") == 2, \"Second test error: \" + str(candidate(\"1077E\"))  \n    assert candidate(\"ABED1A33\") == 4, \"Third test error: \" + str(candidate(\"ABED1A33\"))      \n    assert candidate(\"2020\") == 2, \"Fourth test error: \" + str(candidate(\"2020\"))  \n    assert candidate(\"123456789ABCDEF0\") == 6, \"Fifth test error: \" + str(candidate(\"123456789ABCDEF0\"))      \n    assert candidate(\"112233445566778899AABBCCDDEEFF00\") == 12, \"Sixth test error: \" + str(candidate(\"112233445566778899AABBCCDDEEFF00\"))  \n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([]) == 0",
            "input_reasoning": "hex_key(\"AB\") ",
            "output_reasoning": " 1, \"First test error: \" + str(candidate(\"AB\"))      "
        },
        "HumanEval_89": {
            "nl": "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    \"\"\"",
            "asserts": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('hi') == 'lm', \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('asdfghjkl') == 'ewhjklnop', \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('gf') == 'kj', \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('et') == 'ix', \"This prints if this assert fails 1 (good for debugging!)\"\n\n    assert candidate('faewfawefaewg')=='jeiajeaijeiak', \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('hellomyfriend')=='lippsqcjvmirh', \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh')=='hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', \"This prints if this assert fails 3 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('a')=='e', \"This prints if this assert fails 2 (also good for debugging!)\"",
            "input_reasoning": "encrypt('hi') ",
            "output_reasoning": " 'lm', \"This prints if this assert fails 1 (good for debugging!)\""
        },
        "HumanEval_69": {
            "nl": "def search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    '''",
            "asserts": "def check(candidate):\n\n    # manually generated tests\n    assert candidate([5, 5, 5, 5, 1]) == 1\n    assert candidate([4, 1, 4, 1, 4, 4]) == 4\n    assert candidate([3, 3]) == -1\n    assert candidate([8, 8, 8, 8, 8, 8, 8, 8]) == 8\n    assert candidate([2, 3, 3, 2, 2]) == 2\n\n    # automatically generated tests\n    assert candidate([2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1]) == 1\n    assert candidate([3, 2, 8, 2]) == 2\n    assert candidate([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) == 1\n    assert candidate([8, 8, 3, 6, 5, 6, 4]) == -1\n    assert candidate([6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9]) == 1\n    assert candidate([1, 9, 10, 1, 3]) == 1\n    assert candidate([6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10]) == 5\n    assert candidate([1]) == 1\n    assert candidate([8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5]) == 4\n    assert candidate([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) == 2\n    assert candidate([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) == 1\n    assert candidate([9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4]) == 4\n    assert candidate([2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7]) == 4\n    assert candidate([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) == 2\n    assert candidate([5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8]) == -1\n    assert candidate([10]) == -1\n    assert candidate([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) == 2\n    assert candidate([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) == 1\n    assert candidate([7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6]) == 1\n    assert candidate([3, 10, 10, 9, 2]) == -1",
            "input_reasoning": "search([5, 5, 5, 5, 1]) ",
            "output_reasoning": " 1"
        },
        "HumanEval_55": {
            "nl": "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    \"\"\"",
            "asserts": "METADATA = {}\n\n\ndef check(candidate):\n    assert candidate(10) == 55\n    assert candidate(1) == 1\n    assert candidate(8) == 21\n    assert candidate(11) == 89\n    assert candidate(12) == 144",
            "input_reasoning": "fib(10) ",
            "output_reasoning": " 55"
        },
        "HumanEval_107": {
            "nl": "def even_odd_palindrome(n):\n    \"\"\"\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n    \"\"\"",
            "asserts": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(123) == (8, 13)\n    assert candidate(12) == (4, 6)\n    assert candidate(3) == (1, 2)\n    assert candidate(63) == (6, 8)\n    assert candidate(25) == (5, 6)\n    assert candidate(19) == (4, 6)\n    assert candidate(9) == (4, 5), \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1) == (0, 1), \"This prints if this assert fails 2 (also good for debugging!)\"",
            "input_reasoning": "even_odd_palindrome(123) ",
            "output_reasoning": " (8, 13)"
        },
        "HumanEval_6": {
            "nl": "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n    \"\"\"",
            "asserts": "METADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]",
            "input_reasoning": "parse_nested_parens('(()()) ((())) () ((())()())') ",
            "output_reasoning": " [2, 3, 1, 3]"
        },
        "HumanEval_137": {
            "nl": "def compare_one(a, b):\n    \"\"\"\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n\n    \"\"\"",
            "asserts": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(1, 2) == 2\n    assert candidate(1, 2.5) == 2.5\n    assert candidate(2, 3) == 3\n    assert candidate(5, 6) == 6\n    assert candidate(1, \"2,3\") == \"2,3\"\n    assert candidate(\"5,1\", \"6\") == \"6\"\n    assert candidate(\"1\", \"2\") == \"2\"\n    assert candidate(\"1\", 1) == None\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True",
            "input_reasoning": "compare_one(1, 2) ",
            "output_reasoning": " 2"
        },
        "HumanEval_161": {
            "nl": "def solve(s):\n    \"\"\"You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa, \n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    \"\"\"",
            "asserts": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"AsDf\") == \"aSdF\"\n    assert candidate(\"1234\") == \"4321\"\n    assert candidate(\"ab\") == \"AB\"\n    assert candidate(\"#a@C\") == \"#A@c\"\n    assert candidate(\"#AsdfW^45\") == \"#aSDFw^45\"\n    assert candidate(\"#6@2\") == \"2@6#\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"#$a^D\") == \"#$A^d\"\n    assert candidate(\"#ccc\") == \"#CCC\"\n\n    # Don't remove this line:",
            "input_reasoning": "solve(\"AsDf\") ",
            "output_reasoning": " \"aSdF\""
        },
        "HumanEval_34": {
            "nl": "def unique(l: list):\n    \"\"\"Return sorted unique elements in a list\n    \"\"\"",
            "asserts": "METADATA = {}\n\n\ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]",
            "input_reasoning": "unique([5, 3, 5, 2, 3, 3, 9, 0, 123]) ",
            "output_reasoning": " [0, 2, 3, 5, 9, 123]"
        },
        "HumanEval_62": {
            "nl": "def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    \"\"\"",
            "asserts": "METADATA = {}\n\n\ndef check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == [1, 4, 12, 20]\n    assert candidate([1, 2, 3]) == [2, 6]\n    assert candidate([3, 2, 1]) == [2, 2]\n    assert candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16]\n    assert candidate([1]) == []",
            "input_reasoning": "derivative([3, 1, 2, 4, 5]) ",
            "output_reasoning": " [1, 4, 12, 20]"
        },
        "HumanEval_142": {
            "nl": "def sum_squares(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    \"\"\"",
            "asserts": "def check(candidate):\n\n    # Check some simple cases\n    \n    assert candidate([1,2,3]) == 6\n    assert candidate([1,4,9]) == 14\n    assert candidate([]) == 0\n    assert candidate([1,1,1,1,1,1,1,1,1]) == 9\n    assert candidate([-1,-1,-1,-1,-1,-1,-1,-1,-1]) == -3\n    assert candidate([0]) == 0\n    assert candidate([-1,-5,2,-1,-5]) == -126\n    assert candidate([-56,-99,1,0,-2]) == 3030\n    assert candidate([-1,0,0,0,0,0,0,0,-1]) == 0\n    assert candidate([-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196\n    assert candidate([-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) == -1448\n    \n    \n    # Don't remove this line:",
            "input_reasoning": "sum_squares([1,2,3]) ",
            "output_reasoning": " 6"
        },
        "HumanEval_115": {
            "nl": "def max_fill(grid, capacity):\n    import math\n    \"\"\"\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it, \n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n    \"\"\"",
            "asserts": "def check(candidate):\n\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([[0,0,1,0], [0,1,0,0], [1,1,1,1]], 1) == 6, \"Error\"\n    assert candidate([[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]], 2) == 5, \"Error\"\n    assert candidate([[0,0,0], [0,0,0]], 5) == 0, \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([[1,1,1,1], [1,1,1,1]], 2) == 4, \"Error\"\n    assert candidate([[1,1,1,1], [1,1,1,1]], 9) == 2, \"Error\"",
            "input_reasoning": "max_fill([[0,0,1,0], [0,1,0,0], [1,1,1,1]], 1) ",
            "output_reasoning": " 6, \"Error\""
        },
        "HumanEval_67": {
            "nl": "def fruit_distribution(s,n):\n    \"\"\"\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    \"\"\"",
            "asserts": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"5 apples and 6 oranges\",19) == 8\n    assert candidate(\"5 apples and 6 oranges\",21) == 10\n    assert candidate(\"0 apples and 1 oranges\",3) == 2\n    assert candidate(\"1 apples and 0 oranges\",3) == 2\n    assert candidate(\"2 apples and 3 oranges\",100) == 95\n    assert candidate(\"2 apples and 3 oranges\",5) == 0\n    assert candidate(\"1 apples and 100 oranges\",120) == 19",
            "input_reasoning": "fruit_distribution(\"5 apples and 6 oranges\",19) ",
            "output_reasoning": " 8"
        },
        "HumanEval_4": {
            "nl": "from typing import List\n\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    \"\"\"",
            "asserts": "METADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert abs(candidate([1.0, 2.0, 3.0]) - 2.0/3.0) < 1e-6\n    assert abs(candidate([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n    assert abs(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0/5.0) < 1e-6",
            "input_reasoning": "mean_absolute_deviation([]) ",
            "output_reasoning": " False"
        },
        "HumanEval_20": {
            "nl": "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    \"\"\"",
            "asserts": "METADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0)\n    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2)\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0)\n    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1)",
            "input_reasoning": "find_closest_elements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) ",
            "output_reasoning": " (3.9, 4.0)"
        },
        "HumanEval_37": {
            "nl": "def sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    \"\"\"",
            "asserts": "METADATA = {}\n\n\ndef check(candidate):\n    assert tuple(candidate([1, 2, 3])) == tuple([1, 2, 3])\n    assert tuple(candidate([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) == tuple([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\n    assert tuple(candidate([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) == tuple([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])",
            "input_reasoning": "tuple(sort_even([1, 2, 3])) ",
            "output_reasoning": " tuple([1, 2, 3])"
        },
        "HumanEval_143": {
            "nl": "def words_in_sentence(sentence):\n    \"\"\"\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"",
            "asserts": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"This is a test\") == \"is\"\n    assert candidate(\"lets go for swimming\") == \"go for\"\n    assert candidate(\"there is no place available here\") == \"there is no place\"\n    assert candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n    assert candidate(\"go for it\") == \"go for it\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"here\") == \"\"\n    assert candidate(\"here is\") == \"is\"",
            "input_reasoning": "words_in_sentence(\"This is a test\") ",
            "output_reasoning": " \"is\""
        },
        "HumanEval_12": {
            "nl": "from typing import List, Optional\n\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    \"\"\"",
            "asserts": "METADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([]) == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'",
            "input_reasoning": "longest([]) ",
            "output_reasoning": " None"
        },
        "HumanEval_19": {
            "nl": "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    \"\"\"",
            "asserts": "METADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate('') == ''\n    assert candidate('three') == 'three'\n    assert candidate('three five nine') == 'three five nine'\n    assert candidate('five zero four seven nine eight') == 'zero four five seven eight nine'\n    assert candidate('six five four three two one zero') == 'zero one two three four five six'",
            "input_reasoning": "sort_numbers('') ",
            "output_reasoning": " ''"
        },
        "HumanEval_79": {
            "nl": "def decimal_to_binary(decimal):\n    \"\"\"You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n    \"\"\"",
            "asserts": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(0) == \"db0db\"\n    assert candidate(32) == \"db100000db\"\n    assert candidate(103) == \"db1100111db\"\n    assert candidate(15) == \"db1111db\", \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"",
            "input_reasoning": "decimal_to_binary(0) ",
            "output_reasoning": " \"db0db\""
        },
        "HumanEval_118": {
            "nl": "def get_closest_vowel(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n    \n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n    \"\"\"",
            "asserts": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"yogurt\") == \"u\"\n    assert candidate(\"full\") == \"u\"\n    assert candidate(\"easy\") == \"\"\n    assert candidate(\"eAsy\") == \"\"\n    assert candidate(\"ali\") == \"\"\n    assert candidate(\"bad\") == \"a\"\n    assert candidate(\"most\") == \"o\"\n    assert candidate(\"ab\") == \"\"\n    assert candidate(\"ba\") == \"\"\n    assert candidate(\"quick\") == \"\"\n    assert candidate(\"anime\") == \"i\"\n    assert candidate(\"Asia\") == \"\"\n    assert candidate(\"Above\") == \"o\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True",
            "input_reasoning": "get_closest_vowel(\"yogurt\") ",
            "output_reasoning": " \"u\""
        },
        "HumanEval_0": {
            "nl": "from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    \"\"\"",
            "asserts": "METADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == True\n    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == False\n    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) == True\n    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) == False\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == True\n    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == True\n    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) == False",
            "input_reasoning": "has_close_elements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) ",
            "output_reasoning": " True"
        },
        "HumanEval_49": {
            "nl": "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    \"\"\"",
            "asserts": "METADATA = {}\n\n\ndef check(candidate):\n    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3",
            "input_reasoning": "modp(3, 5) ",
            "output_reasoning": " 3"
        },
        "HumanEval_130": {
            "nl": "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence. \n    \"\"\"",
            "asserts": "def check(candidate):\n\n    # Check some simple cases\n    \n    assert candidate(3) == [1, 3, 2.0, 8.0]\n    assert candidate(4) == [1, 3, 2.0, 8.0, 3.0]\n    assert candidate(5) == [1, 3, 2.0, 8.0, 3.0, 15.0]\n    assert candidate(6) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0]\n    assert candidate(7) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0]\n    assert candidate(8) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0]\n    assert candidate(9) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0]\n    assert candidate(20) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0, 8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(0) == [1]\n    assert candidate(1) == [1, 3]",
            "input_reasoning": "tri(3) ",
            "output_reasoning": " [1, 3, 2.0, 8.0]"
        },
        "HumanEval_135": {
            "nl": "def can_arrange(arr):\n    \"\"\"Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n    \"\"\"",
            "asserts": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1,2,4,3,5])==3\n    assert candidate([1,2,4,5])==-1\n    assert candidate([1,4,2,5,6,7,8,9,10])==2\n    assert candidate([4,8,5,7,3])==4\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([])==-1",
            "input_reasoning": "can_arrange([1,2,4,3,5])",
            "output_reasoning": "3"
        },
        "HumanEval_17": {
            "nl": "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n    \"\"\"",
            "asserts": "METADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]",
            "input_reasoning": "parse_music('') ",
            "output_reasoning": " []"
        },
        "HumanEval_75": {
            "nl": "def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    \"\"\"",
            "asserts": "def check(candidate):\n\n    assert candidate(5) == False\n    assert candidate(30) == True\n    assert candidate(8) == True\n    assert candidate(10) == False\n    assert candidate(125) == True\n    assert candidate(3 * 5 * 7) == True\n    assert candidate(3 * 6 * 7) == False\n    assert candidate(9 * 9 * 9) == False\n    assert candidate(11 * 9 * 9) == False\n    assert candidate(11 * 13 * 7) == True",
            "input_reasoning": "is_multiply_prime(5) ",
            "output_reasoning": " False"
        },
        "HumanEval_95": {
            "nl": "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    \"\"\"",
            "asserts": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate({\"p\":\"pineapple\", \"b\":\"banana\"}) == True, \"First test error: \" + str(candidate({\"p\":\"pineapple\", \"b\":\"banana\"}))\n    assert candidate({\"p\":\"pineapple\", \"A\":\"banana\", \"B\":\"banana\"}) == False, \"Second test error: \" + str(candidate({\"p\":\"pineapple\", \"A\":\"banana\", \"B\":\"banana\"}))\n    assert candidate({\"p\":\"pineapple\", 5:\"banana\", \"a\":\"apple\"}) == False, \"Third test error: \" + str(candidate({\"p\":\"pineapple\", 5:\"banana\", \"a\":\"apple\"}))\n    assert candidate({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) == False, \"Fourth test error: \" + str(candidate({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}))\n    assert candidate({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) == True, \"Fifth test error: \" + str(candidate({\"STATE\":\"NC\", \"ZIP\":\"12345\" }))      \n    assert candidate({\"fruit\":\"Orange\", \"taste\":\"Sweet\" }) == True, \"Fourth test error: \" + str(candidate({\"fruit\":\"Orange\", \"taste\":\"Sweet\" }))      \n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate({}) == False, \"1st edge test error: \" + str(candidate({}))",
            "input_reasoning": "check_dict_case({\"p\":\"pineapple\", \"b\":\"banana\"}) ",
            "output_reasoning": " True, \"First test error: \" + str(candidate({\"p\":\"pineapple\", \"b\":\"banana\"}))"
        },
        "HumanEval_80": {
            "nl": "def is_happy(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    \"\"\"",
            "asserts": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"a\") == False , \"a\"\n    assert candidate(\"aa\") == False , \"aa\"\n    assert candidate(\"abcd\") == True , \"abcd\"\n    assert candidate(\"aabb\") == False , \"aabb\"\n    assert candidate(\"adb\") == True , \"adb\"\n    assert candidate(\"xyy\") == False , \"xyy\"\n    assert candidate(\"iopaxpoi\") == True , \"iopaxpoi\"\n    assert candidate(\"iopaxioi\") == False , \"iopaxioi\"",
            "input_reasoning": "is_happy(\"a\") ",
            "output_reasoning": " False , \"a\""
        },
        "HumanEval_150": {
            "nl": "def x_or_y(n, x, y):\n    \"\"\"A simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    \n    \"\"\"",
            "asserts": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(7, 34, 12) == 34\n    assert candidate(15, 8, 5) == 5\n    assert candidate(3, 33, 5212) == 33\n    assert candidate(1259, 3, 52) == 3\n    assert candidate(7919, -1, 12) == -1\n    assert candidate(3609, 1245, 583) == 583\n    assert candidate(91, 56, 129) == 129\n    assert candidate(6, 34, 1234) == 1234\n    \n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1, 2, 0) == 0\n    assert candidate(2, 2, 0) == 2",
            "input_reasoning": "x_or_y(7, 34, 12) ",
            "output_reasoning": " 34"
        },
        "HumanEval_71": {
            "nl": "def triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    '''",
            "asserts": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(3, 4, 5) == 6.00, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4, 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1, 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2, 6, 3) == -1\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1, 1, 1) == 0.43, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(2, 2, 10) == -1",
            "input_reasoning": "triangle_area(3, 4, 5) ",
            "output_reasoning": " 6.00, \"This prints if this assert fails 1 (good for debugging!)\""
        },
        "HumanEval_51": {
            "nl": "def remove_vowels(text):\n    \"\"\"\n    remove_vowels is a function that takes string and returns string without vowels.\n    \"\"\"",
            "asserts": "METADATA = {}\n\n\ndef check(candidate):\n    assert candidate('') == ''\n    assert candidate(\"abcdef\\nghijklm\") == 'bcdf\\nghjklm'\n    assert candidate('fedcba') == 'fdcb'\n    assert candidate('eeeee') == ''\n    assert candidate('acBAA') == 'cB'\n    assert candidate('EcBOO') == 'cB'\n    assert candidate('ybcd') == 'ybcd'",
            "input_reasoning": "remove_vowels('') ",
            "output_reasoning": " ''"
        },
        "HumanEval_8": {
            "nl": "from typing import List, Tuple\n\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    \"\"\"",
            "asserts": "METADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([]) == (0, 1)\n    assert candidate([1, 1, 1]) == (3, 1)\n    assert candidate([100, 0]) == (100, 0)\n    assert candidate([3, 5, 7]) == (3 + 5 + 7, 3 * 5 * 7)\n    assert candidate([10]) == (10, 10)",
            "input_reasoning": "sum_product([]) ",
            "output_reasoning": " (0, 1)"
        },
        "HumanEval_88": {
            "nl": "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n    \"\"\"",
            "asserts": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([]) == [], \"Error\"\n    assert candidate([5]) == [5], \"Error\"\n    assert candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5], \"Error\"\n    assert candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0], \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([2, 1]) == [1, 2], \"Error\"\n    assert candidate([15, 42, 87, 32 ,11, 0]) == [0, 11, 15, 32, 42, 87], \"Error\"\n    assert candidate([21, 14, 23, 11]) == [23, 21, 14, 11], \"Error\"",
            "input_reasoning": "sort_array([]) ",
            "output_reasoning": " [], \"Error\""
        },
        "HumanEval_106": {
            "nl": "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    \"\"\"",
            "asserts": "def check(candidate):\n\n    assert candidate(5) == [1, 2, 6, 24, 15]\n    assert candidate(7) == [1, 2, 6, 24, 15, 720, 28]\n    assert candidate(1) == [1]\n    assert candidate(3) == [1, 2, 6]",
            "input_reasoning": "f(5) ",
            "output_reasoning": " [1, 2, 6, 24, 15]"
        },
        "HumanEval_60": {
            "nl": "def sum_to_n(n: int):\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    \"\"\"",
            "asserts": "METADATA = {}\n\n\ndef check(candidate):\n    assert candidate(1) == 1\n    assert candidate(6) == 21\n    assert candidate(11) == 66\n    assert candidate(30) == 465\n    assert candidate(100) == 5050",
            "input_reasoning": "sum_to_n(1) ",
            "output_reasoning": " 1"
        },
        "HumanEval_154": {
            "nl": "def cycpattern_check(a , b):\n    \"\"\"You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\n\n    \"\"\"",
            "asserts": "def check(candidate):\n\n    # Check some simple cases\n    #assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    #assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert  candidate(\"xyzw\",\"xyw\") == False , \"test #0\"\n    assert  candidate(\"yello\",\"ell\") == True , \"test #1\"\n    assert  candidate(\"whattup\",\"ptut\") == False , \"test #2\"\n    assert  candidate(\"efef\",\"fee\") == True , \"test #3\"\n    assert  candidate(\"abab\",\"aabb\") == False , \"test #4\"\n    assert  candidate(\"winemtt\",\"tinem\") == True , \"test #5\"",
            "input_reasoning": " cycpattern_check(\"xyzw\",\"xyw\") ",
            "output_reasoning": " False , \"test #0\""
        },
        "HumanEval_41": {
            "nl": "def car_race_collision(n: int):\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n    \"\"\"",
            "asserts": "METADATA = {}\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8) == 64\n    assert candidate(10) == 100",
            "input_reasoning": "car_race_collision(2) ",
            "output_reasoning": " 4"
        },
        "HumanEval_85": {
            "nl": "def add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n    \"\"\"",
            "asserts": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([4, 88]) == 88\n    assert candidate([4, 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert candidate([4, 4, 6, 8]) == 12\n\n    # Check some edge cases that are easy to work out by hand.\n    ",
            "input_reasoning": "add([4, 88]) ",
            "output_reasoning": " 88"
        },
        "HumanEval_103": {
            "nl": "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    \"\"\"",
            "asserts": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(1, 5) == \"0b11\"\n    assert candidate(7, 13) == \"0b1010\"\n    assert candidate(964,977) == \"0b1111001010\"\n    assert candidate(996,997) == \"0b1111100100\"\n    assert candidate(560,851) == \"0b1011000010\"\n    assert candidate(185,546) == \"0b101101110\"\n    assert candidate(362,496) == \"0b110101101\"\n    assert candidate(350,902) == \"0b1001110010\"\n    assert candidate(197,233) == \"0b11010111\"\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == \"0b101\"",
            "input_reasoning": "rounded_avg(1, 5) ",
            "output_reasoning": " \"0b11\""
        },
        "HumanEval_129": {
            "nl": "def minPath(grid, k):\n    \"\"\"\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n    \"\"\"",
            "asserts": "def check(candidate):\n\n    # Check some simple cases\n    print\n    assert candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3) == [1, 2, 1]\n    assert candidate([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1) == [1]\n    assert candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]], 4) == [1, 2, 1, 2]\n    assert candidate([[6, 4, 13, 10], [5, 7, 12, 1], [3, 16, 11, 15], [8, 14, 9, 2]], 7) == [1, 10, 1, 10, 1, 10, 1]\n    assert candidate([[8, 14, 9, 2], [6, 4, 13, 15], [5, 7, 1, 12], [3, 10, 11, 16]], 5) == [1, 7, 1, 7, 1]\n    assert candidate([[11, 8, 7, 2], [5, 16, 14, 4], [9, 3, 15, 6], [12, 13, 10, 1]], 9) == [1, 6, 1, 6, 1, 6, 1, 6, 1]\n    assert candidate([[12, 13, 10, 1], [9, 3, 15, 6], [5, 16, 14, 4], [11, 8, 7, 2]], 12) == [1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6]\n    assert candidate([[2, 7, 4], [3, 1, 5], [6, 8, 9]], 8) == [1, 3, 1, 3, 1, 3, 1, 3]\n    assert candidate([[6, 1, 5], [3, 8, 9], [2, 7, 4]], 8) == [1, 5, 1, 5, 1, 5, 1, 5]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([[1, 2], [3, 4]], 10) == [1, 2, 1, 2, 1, 2, 1, 2, 1, 2]\n    assert candidate([[1, 3], [3, 2]], 10) == [1, 3, 1, 3, 1, 3, 1, 3, 1, 3]",
            "input_reasoning": "minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3) ",
            "output_reasoning": " [1, 2, 1]"
        },
        "HumanEval_68": {
            "nl": "def pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"",
            "asserts": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([4,2,3]) == [2, 1], \"Error\"\n    assert candidate([1,2,3]) == [2, 1], \"Error\"\n    assert candidate([]) == [], \"Error\"\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1], \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3], \"Error\"\n    assert candidate([5, 4, 8, 4 ,8]) == [4, 1], \"Error\"\n    assert candidate([7, 6, 7, 1]) == [6, 1], \"Error\"\n    assert candidate([7, 9, 7, 1]) == [], \"Error\"",
            "input_reasoning": "pluck([4,2,3]) ",
            "output_reasoning": " [2, 1], \"Error\""
        },
        "HumanEval_145": {
            "nl": "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    \"\"\"",
            "asserts": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234,423,463,145,2,423,423,53,6,37,3457,3,56,0,46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1,2,3,4,5,6,7,8,9,10,11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0,6,6,-76,-21,23,4]) == [-76, -21, 0, 4, 23, 6, 6]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"",
            "input_reasoning": "order_by_points([1, 11, -1, -11, -12]) ",
            "output_reasoning": " [-1, -11, 1, -12, 11]"
        },
        "HumanEval_125": {
            "nl": "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    '''",
            "asserts": "def check(candidate):\n\n    assert candidate(\"Hello world!\") == [\"Hello\",\"world!\"]\n    assert candidate(\"Hello,world!\") == [\"Hello\",\"world!\"]\n    assert candidate(\"Hello world,!\") == [\"Hello\",\"world,!\"]\n    assert candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\",\"!\"]\n    assert candidate(\"abcdef\") == 3\n    assert candidate(\"aaabb\") == 2\n    assert candidate(\"aaaBb\") == 1\n    assert candidate(\"\") == 0",
            "input_reasoning": "split_words(\"Hello world!\") ",
            "output_reasoning": " [\"Hello\",\"world!\"]"
        },
        "HumanEval_15": {
            "nl": "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    \"\"\"",
            "asserts": "METADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(0) == '0'\n    assert candidate(3) == '0 1 2 3'\n    assert candidate(10) == '0 1 2 3 4 5 6 7 8 9 10'",
            "input_reasoning": "string_sequence(0) ",
            "output_reasoning": " '0'"
        },
        "HumanEval_18": {
            "nl": "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    \"\"\"",
            "asserts": "METADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate('', 'x') == 0\n    assert candidate('xyxyxyx', 'x') == 4\n    assert candidate('cacacacac', 'cac') == 4\n    assert candidate('john doe', 'john') == 1",
            "input_reasoning": "how_many_times('', 'x') ",
            "output_reasoning": " 0"
        },
        "HumanEval_57": {
            "nl": "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    \"\"\"",
            "asserts": "METADATA = {}\n\n\ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) == True",
            "input_reasoning": "monotonic([1, 2, 4, 10]) ",
            "output_reasoning": " True"
        },
        "HumanEval_45": {
            "nl": "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    \"\"\"",
            "asserts": "METADATA = {}\n\n\ndef check(candidate):\n    assert candidate(5, 3) == 7.5\n    assert candidate(2, 2) == 2.0\n    assert candidate(10, 8) == 40.0",
            "input_reasoning": "triangle_area(5, 3) ",
            "output_reasoning": " 7.5"
        },
        "HumanEval_9": {
            "nl": "from typing import List, Tuple\n\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    \"\"\"",
            "asserts": "METADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([]) == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]",
            "input_reasoning": "rolling_max([]) ",
            "output_reasoning": " []"
        },
        "HumanEval_63": {
            "nl": "def fibfib(n: int):\n    \"\"\"The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    \"\"\"",
            "asserts": "METADATA = {}\n\n\ndef check(candidate):\n    assert candidate(2) == 1\n    assert candidate(1) == 0\n    assert candidate(5) == 4\n    assert candidate(8) == 24\n    assert candidate(10) == 81\n    assert candidate(12) == 274\n    assert candidate(14) == 927",
            "input_reasoning": "fibfib(2) ",
            "output_reasoning": " 1"
        },
        "HumanEval_66": {
            "nl": "def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n    \"\"\"",
            "asserts": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(\"\") == 0, \"Error\"\n    assert candidate(\"abAB\") == 131, \"Error\"\n    assert candidate(\"abcCd\") == 67, \"Error\"\n    assert candidate(\"helloE\") == 69, \"Error\"\n    assert candidate(\"woArBld\") == 131, \"Error\"\n    assert candidate(\"aAaaaXa\") == 153, \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(\" How are yOu?\") == 151, \"Error\"\n    assert candidate(\"You arE Very Smart\") == 327, \"Error\"",
            "input_reasoning": "digitSum(\"\") ",
            "output_reasoning": " 0, \"Error\""
        },
        "HumanEval_160": {
            "nl": "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"",
            "asserts": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(['**', '*', '+'], [2, 3, 4, 5]) == 37\n    assert candidate(['+', '*', '-'], [2, 3, 4, 5]) == 9\n    assert candidate(['//', '*'], [7, 3, 4]) == 8, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"",
            "input_reasoning": "do_algebra(['**', '*', '+'], [2, 3, 4, 5]) ",
            "output_reasoning": " 37"
        },
        "HumanEval_61": {
            "nl": "def correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n    \"\"\"",
            "asserts": "METADATA = {}\n\n\ndef check(candidate):\n    assert candidate(\"()\")\n    assert candidate(\"(()())\")\n    assert candidate(\"()()(()())()\")\n    assert candidate(\"()()((()()())())(()()(()))\")\n    assert not candidate(\"((()())))\")\n    assert not candidate(\")(()\")\n    assert not candidate(\"(\")\n    assert not candidate(\"((((\")\n    assert not candidate(\")\")\n    assert not candidate(\"(()\")\n    assert not candidate(\"()()(()())())(()\")\n    assert not candidate(\"()()(()())()))()\")",
            "input_reasoning": "correct_bracketing(1) ",
            "output_reasoning": " 1"
        },
        "HumanEval_21": {
            "nl": "from typing import List\n\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    \"\"\"",
            "asserts": "METADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]",
            "input_reasoning": "rescale_to_unit([2.0, 49.9]) ",
            "output_reasoning": " [0.0, 1.0]"
        },
        "HumanEval_53": {
            "nl": "def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    \"\"\"",
            "asserts": "METADATA = {}\n\n\ndef check(candidate):\n    import random\n\n    assert candidate(0, 1) == 1\n    assert candidate(1, 0) == 1\n    assert candidate(2, 3) == 5\n    assert candidate(5, 7) == 12\n    assert candidate(7, 5) == 12\n\n    for i in range(100):\n        x, y = random.randint(0, 1000), random.randint(0, 1000)\n        assert candidate(x, y) == x + y",
            "input_reasoning": "add(0, 1) ",
            "output_reasoning": " 1"
        },
        "HumanEval_30": {
            "nl": "def get_positive(l: list):\n    \"\"\"Return only positive numbers in the list.\n    \"\"\"",
            "asserts": "METADATA = {}\n\n\ndef check(candidate):\n    assert candidate([-1, -2, 4, 5, 6]) == [4, 5, 6]\n    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]\n    assert candidate([-1, -2]) == []\n    assert candidate([]) == []",
            "input_reasoning": "get_positive([-1, -2, 4, 5, 6]) ",
            "output_reasoning": " [4, 5, 6]"
        },
        "HumanEval_124": {
            "nl": "def valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n    \"\"\"",
            "asserts": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('03-11-2000') == True\n\n    assert candidate('15-01-2012') == False\n\n    assert candidate('04-0-2040') == False\n\n    assert candidate('06-04-2020') == True\n\n    assert candidate('01-01-2007') == True\n\n    assert candidate('03-32-2011') == False\n\n    assert candidate('') == False\n\n    assert candidate('04-31-3000') == False\n\n    assert candidate('06-06-2005') == True\n\n    assert candidate('21-31-2000') == False\n\n    assert candidate('04-12-2003') == True\n\n    assert candidate('04122003') == False\n\n    assert candidate('20030412') == False\n\n    assert candidate('2003-04') == False\n\n    assert candidate('2003-04-12') == False\n\n    assert candidate('04-2003') == False",
            "input_reasoning": "valid_date('03-11-2000') ",
            "output_reasoning": " True"
        },
        "HumanEval_31": {
            "nl": "def is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\n    \"\"\"",
            "asserts": "METADATA = {}\n\n\ndef check(candidate):\n    assert candidate(6) == False\n    assert candidate(101) == True\n    assert candidate(11) == True\n    assert candidate(13441) == True\n    assert candidate(61) == True\n    assert candidate(4) == False\n    assert candidate(1) == False\n    assert candidate(5) == True\n    assert candidate(11) == True\n    assert candidate(17) == True\n    assert candidate(5 * 17) == False\n    assert candidate(11 * 7) == False\n    assert candidate(13441 * 19) == False",
            "input_reasoning": "is_prime(6) ",
            "output_reasoning": " False"
        },
        "HumanEval_82": {
            "nl": "def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    \"\"\"",
            "asserts": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('Hello') == True\n    assert candidate('abcdcba') == True\n    assert candidate('kittens') == True\n    assert candidate('orange') == False\n    assert candidate('wow') == True\n    assert candidate('world') == True\n    assert candidate('MadaM') == True\n    assert candidate('Wow') == True\n    assert candidate('') == False\n    assert candidate('HI') == True\n    assert candidate('go') == True\n    assert candidate('gogo') == False\n    assert candidate('aaaaaaaaaaaaaaa') == False\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('Madam') == True\n    assert candidate('M') == False\n    assert candidate('0') == False",
            "input_reasoning": "prime_length('Hello') ",
            "output_reasoning": " True"
        },
        "HumanEval_48": {
            "nl": "def is_palindrome(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    \"\"\"",
            "asserts": "METADATA = {}\n\n\ndef check(candidate):\n    assert candidate('') == True\n    assert candidate('aba') == True\n    assert candidate('aaaaa') == True\n    assert candidate('zbcd') == False\n    assert candidate('xywyx') == True\n    assert candidate('xywyz') == False\n    assert candidate('xywzx') == False",
            "input_reasoning": "is_palindrome('') ",
            "output_reasoning": " True"
        },
        "HumanEval_147": {
            "nl": "def get_max_triples(n):\n    \"\"\"\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    \"\"\"",
            "asserts": "def check(candidate):\n\n    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10) == 36\n    assert candidate(100) == 53361",
            "input_reasoning": "get_max_triples(5) ",
            "output_reasoning": " 1"
        },
        "HumanEval_157": {
            "nl": "def right_angle_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    '''",
            "asserts": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(3, 4, 5) == True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1, 1, 1) == False, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(2, 2, 10) == False",
            "input_reasoning": "right_angle_triangle(3, 4, 5) ",
            "output_reasoning": " True, \"This prints if this assert fails 1 (good for debugging!)\""
        },
        "HumanEval_74": {
            "nl": "def total_match(lst1, lst2):\n    '''\n    Write a function that accepts two lists of strings and returns the list that has \n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    '''",
            "asserts": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([], []) == []\n    assert candidate(['hi', 'admin'], ['hi', 'hi']) == ['hi', 'hi']\n    assert candidate(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) == ['hi', 'admin']\n    assert candidate(['4'], ['1', '2', '3', '4', '5']) == ['4']\n    assert candidate(['hi', 'admin'], ['hI', 'Hi']) == ['hI', 'Hi']\n    assert candidate(['hi', 'admin'], ['hI', 'hi', 'hi']) == ['hI', 'hi', 'hi']\n    assert candidate(['hi', 'admin'], ['hI', 'hi', 'hii']) == ['hi', 'admin']\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([], ['this']) == []\n    assert candidate(['this'], []) == []",
            "input_reasoning": "total_match([], []) ",
            "output_reasoning": " []"
        },
        "HumanEval_29": {
            "nl": "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    \"\"\"",
            "asserts": "METADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']",
            "input_reasoning": "filter_by_prefix([], 'john') ",
            "output_reasoning": " []"
        },
        "HumanEval_40": {
            "nl": "def triples_sum_to_zero(l: list):\n    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n    \"\"\"",
            "asserts": "METADATA = {}\n\n\ndef check(candidate):\n    assert candidate([1, 3, 5, 0]) == False\n    assert candidate([1, 3, 5, -1]) == False\n    assert candidate([1, 3, -2, 1]) == True\n    assert candidate([1, 2, 3, 7]) == False\n    assert candidate([1, 2, 5, 7]) == False\n    assert candidate([2, 4, -5, 3, 9, 7]) == True\n    assert candidate([1]) == False\n    assert candidate([1, 3, 5, -100]) == False\n    assert candidate([100, 3, 5, -100]) == False",
            "input_reasoning": "triples_sum_to_zero([1, 3, 5, 0]) ",
            "output_reasoning": " False"
        },
        "HumanEval_113": {
            "nl": "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    \"\"\"",
            "asserts": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(['1234567']) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"], \"Test 1\"\n    assert candidate(['3',\"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"], \"Test 2\"\n    assert candidate(['271', '137', '314']) == [\n        'the number of odd elements 2n the str2ng 2 of the 2nput.',\n        'the number of odd elements 3n the str3ng 3 of the 3nput.',\n        'the number of odd elements 2n the str2ng 2 of the 2nput.'\n    ]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"",
            "input_reasoning": "odd_count(['1234567']) ",
            "output_reasoning": " [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"], \"Test 1\""
        },
        "HumanEval_58": {
            "nl": "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n\n    \"\"\"",
            "asserts": "METADATA = {}\n\n\ndef check(candidate):\n    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]\n    assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3, 2, 8], []) == []",
            "input_reasoning": "common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) ",
            "output_reasoning": " [1, 5, 653]"
        },
        "HumanEval_93": {
            "nl": "def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \"\"\"",
            "asserts": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('TEST') == 'tgst', \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('Mudasir') == 'mWDCSKR', \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate('YES') == 'ygs', \"This prints if this assert fails 3 (good for debugging!)\"\n    \n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('This is a message') == 'tHKS KS C MGSSCGG', \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(\"I DoNt KnOw WhAt tO WrItE\") == 'k dQnT kNqW wHcT Tq wRkTg', \"This prints if this assert fails 2 (also good for debugging!)\"",
            "input_reasoning": "encode('TEST') ",
            "output_reasoning": " 'tgst', \"This prints if this assert fails 1 (good for debugging!)\""
        },
        "HumanEval_77": {
            "nl": "def iscube(a):\n    '''\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    '''",
            "asserts": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(1) == True, \"First test error: \" + str(candidate(1))\n    assert candidate(2) == False, \"Second test error: \" + str(candidate(2))\n    assert candidate(-1) == True, \"Third test error: \" + str(candidate(-1))\n    assert candidate(64) == True, \"Fourth test error: \" + str(candidate(64))\n    assert candidate(180) == False, \"Fifth test error: \" + str(candidate(180))\n    assert candidate(1000) == True, \"Sixth test error: \" + str(candidate(1000))\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(0) == True, \"1st edge test error: \" + str(candidate(0))\n    assert candidate(1729) == False, \"2nd edge test error: \" + str(candidate(1728))",
            "input_reasoning": "iscube(1) ",
            "output_reasoning": " True, \"First test error: \" + str(candidate(1))"
        },
        "HumanEval_28": {
            "nl": "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    \"\"\"",
            "asserts": "METADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([]) == ''\n    assert candidate(['x', 'y', 'z']) == 'xyz'\n    assert candidate(['x', 'y', 'z', 'w', 'k']) == 'xyzwk'",
            "input_reasoning": "concatenate([]) ",
            "output_reasoning": " ''"
        },
        "HumanEval_128": {
            "nl": "def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n    \"\"\"",
            "asserts": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([]) == None\n    assert candidate([2, 4,1, 2, -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"",
            "input_reasoning": "prod_signs([1, 2, 2, -4]) ",
            "output_reasoning": " -9"
        },
        "HumanEval_122": {
            "nl": "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"",
            "asserts": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1,-2,-3,41,57,76,87,88,99], 3) == -4\n    assert candidate([111,121,3,4000,5,6], 2) == 0\n    assert candidate([11,21,3,90,5,6,7,8,9], 4) == 125\n    assert candidate([111,21,3,4000,5,6,7,8,9], 4) == 24, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1], 1) == 1, \"This prints if this assert fails 2 (also good for debugging!)\"",
            "input_reasoning": "add_elements([1,-2,-3,41,57,76,87,88,99], 3) ",
            "output_reasoning": " -4"
        },
        "HumanEval_162": {
            "nl": "def string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    \"\"\"",
            "asserts": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    assert candidate('') == None\n    assert candidate('A B C') == '0ef78513b0cb8cef12743f5aeb35f888'\n    assert candidate('password') == '5f4dcc3b5aa765d61d8327deb882cf99'\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True",
            "input_reasoning": "string_to_md5('Hello world') ",
            "output_reasoning": " '3e25960a79dbc69b674cd4ec67a72c62'"
        },
        "HumanEval_46": {
            "nl": "def fib4(n: int):\n    \"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    \"\"\"",
            "asserts": "METADATA = {}\n\n\ndef check(candidate):\n    assert candidate(5) == 4\n    assert candidate(8) == 28\n    assert candidate(10) == 104\n    assert candidate(12) == 386",
            "input_reasoning": "fib4(5) ",
            "output_reasoning": " 4"
        },
        "HumanEval_114": {
            "nl": "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    \"\"\"",
            "asserts": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([-1, -2, -3]) == -6\n    assert candidate([-1, -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n    assert candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2, -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100, -33, 32, -1, 0, -2]) == -33\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([-10]) == -10, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([7]) == 7\n    assert candidate([1, -1]) == -1",
            "input_reasoning": "minSubArraySum([2, 3, 4, 1, 2, 4]) ",
            "output_reasoning": " 1, \"This prints if this assert fails 1 (good for debugging!)\""
        },
        "HumanEval_22": {
            "nl": "from typing import List, Any\n\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n    \"\"\"",
            "asserts": "METADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([]) == []\n    assert candidate([4, {}, [], 23.2, 9, 'adasd']) == [4, 9]\n    assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]",
            "input_reasoning": "filter_integers([]) ",
            "output_reasoning": " []"
        },
        "HumanEval_117": {
            "nl": "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    \"\"\"",
            "asserts": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"Mary had a little lamb\", 4) == [\"little\"], \"First test error: \" + str(candidate(\"Mary had a little lamb\", 4))      \n    assert candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"], \"Second test error: \" + str(candidate(\"Mary had a little lamb\", 3))  \n    assert candidate(\"simple white space\", 2) == [], \"Third test error: \" + str(candidate(\"simple white space\", 2))      \n    assert candidate(\"Hello world\", 4) == [\"world\"], \"Fourth test error: \" + str(candidate(\"Hello world\", 4))  \n    assert candidate(\"Uncle sam\", 3) == [\"Uncle\"], \"Fifth test error: \" + str(candidate(\"Uncle sam\", 3))\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"\", 4) == [], \"1st edge test error: \" + str(candidate(\"\", 4))\n    assert candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"], \"2nd edge test error: \" + str(candidate(\"a b c d e f\", 1))",
            "input_reasoning": "select_words(\"Mary had a little lamb\", 4) ",
            "output_reasoning": " [\"little\"], \"First test error: \" + str(candidate(\"Mary had a little lamb\", 4))      "
        },
        "HumanEval_76": {
            "nl": "def is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    \"\"\"",
            "asserts": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(16, 2)== True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(143214, 16)== False, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(4, 2)==True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(9, 3)==True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(16, 4)==True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(24, 2)==False, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(128, 4)==False, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(12, 6)==False, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1, 1)==True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(1, 12)==True, \"This prints if this assert fails 2 (also good for debugging!)\"",
            "input_reasoning": "is_simple_power(16, 2)",
            "output_reasoning": " True, \"This prints if this assert fails 1 (good for debugging!)\""
        },
        "HumanEval_24": {
            "nl": "def largest_divisor(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    \"\"\"",
            "asserts": "METADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(3) == 1\n    assert candidate(7) == 1\n    assert candidate(10) == 5\n    assert candidate(100) == 50\n    assert candidate(49) == 7",
            "input_reasoning": "largest_divisor(3) ",
            "output_reasoning": " 1"
        },
        "HumanEval_11": {
            "nl": "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    \"\"\"",
            "asserts": "METADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate('111000', '101010') == '010010'\n    assert candidate('1', '1') == '0'\n    assert candidate('0101', '0000') == '0101'",
            "input_reasoning": "string_xor('111000', '101010') ",
            "output_reasoning": " '010010'"
        },
        "HumanEval_111": {
            "nl": "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n\n    \"\"\"",
            "asserts": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('a b b a') == {'a':2,'b': 2}, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('a b c a b') == {'a': 2, 'b': 2}, \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate('a b c d g') == {'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1}, \"This prints if this assert fails 3 (good for debugging!)\"\n    assert candidate('r t g') == {'r': 1,'t': 1,'g': 1}, \"This prints if this assert fails 4 (good for debugging!)\"\n    assert candidate('b b b b a') == {'b': 4}, \"This prints if this assert fails 5 (good for debugging!)\"\n    assert candidate('r t g') == {'r': 1,'t': 1,'g': 1}, \"This prints if this assert fails 6 (good for debugging!)\"\n    \n    \n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('') == {}, \"This prints if this assert fails 7 (also good for debugging!)\"\n    assert candidate('a') == {'a': 1}, \"This prints if this assert fails 8 (also good for debugging!)\"",
            "input_reasoning": "histogram('a b b a') ",
            "output_reasoning": " {'a':2,'b': 2}, \"This prints if this assert fails 1 (good for debugging!)\""
        },
        "HumanEval_47": {
            "nl": "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    \"\"\"",
            "asserts": "METADATA = {}\n\n\ndef check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7 ",
            "input_reasoning": "median([3, 1, 2, 4, 5]) ",
            "output_reasoning": " 3"
        },
        "HumanEval_148": {
            "nl": "def bf(planet1, planet2):\n    '''\n    There are eight planets in our solar system: the closerst to the Sun \n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2. \n    The function should return a tuple containing all planets whose orbits are \n    located between the orbit of planet1 and the orbit of planet2, sorted by \n    the proximity to the sun. \n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names. \n  '''",
            "asserts": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"Jupiter\", \"Neptune\") == (\"Saturn\", \"Uranus\"), \"First test error: \" + str(len(candidate(\"Jupiter\", \"Neptune\")))      \n    assert candidate(\"Earth\", \"Mercury\") == (\"Venus\",), \"Second test error: \" + str(candidate(\"Earth\", \"Mercury\"))  \n    assert candidate(\"Mercury\", \"Uranus\") == (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"), \"Third test error: \" + str(candidate(\"Mercury\", \"Uranus\"))      \n    assert candidate(\"Neptune\", \"Venus\") == (\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"), \"Fourth test error: \" + str(candidate(\"Neptune\", \"Venus\"))  \n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"Earth\", \"Earth\") == ()\n    assert candidate(\"Mars\", \"Earth\") == ()\n    assert candidate(\"Jupiter\", \"Makemake\") == ()",
            "input_reasoning": "bf(\"Jupiter\", \"Neptune\") ",
            "output_reasoning": " (\"Saturn\", \"Uranus\"), \"First test error: \" + str(len(candidate(\"Jupiter\", \"Neptune\")))      "
        },
        "HumanEval_134": {
            "nl": "def check_if_last_char_is_a_letter(txt):\n    '''\n    Create a function that returns True if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and False otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    '''",
            "asserts": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"apple\") == False\n    assert candidate(\"apple pi e\") == True\n    assert candidate(\"eeeee\") == False\n    assert candidate(\"A\") == True\n    assert candidate(\"Pumpkin pie \") == False\n    assert candidate(\"Pumpkin pie 1\") == False\n    assert candidate(\"\") == False\n    assert candidate(\"eeeee e \") == False\n    assert candidate(\"apple pie\") == False\n    assert candidate(\"apple pi e \") == False\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True",
            "input_reasoning": "check_if_last_char_is_a_letter(\"apple\") ",
            "output_reasoning": " False"
        },
        "HumanEval_36": {
            "nl": "def fizz_buzz(n: int):\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    \"\"\"",
            "asserts": "METADATA = {}\n\n\ndef check(candidate):\n    assert candidate(50) == 0\n    assert candidate(78) == 2\n    assert candidate(79) == 3\n    assert candidate(100) == 3\n    assert candidate(200) == 6\n    assert candidate(4000) == 192\n    assert candidate(10000) == 639\n    assert candidate(100000) == 8026",
            "input_reasoning": "fizz_buzz(50) ",
            "output_reasoning": " 0"
        },
        "HumanEval_94": {
            "nl": "def skjkasdkd(lst):\n    \"\"\"You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n    \"\"\"",
            "asserts": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]) == 10, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]) == 25, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]) == 13, \"This prints if this assert fails 3 (also good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([0,724,32,71,99,32,6,0,5,91,83,0,5,6]) == 11, \"This prints if this assert fails 4 (also good for debugging!)\"\n    \n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([0,81,12,3,1,21]) == 3, \"This prints if this assert fails 5 (also good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([0,8,1,2,1,7]) == 7, \"This prints if this assert fails 6 (also good for debugging!)\"\n\n    assert candidate([8191]) == 19, \"This prints if this assert fails 7 (also good for debugging!)\"\n    assert candidate([8191, 123456, 127, 7]) == 19, \"This prints if this assert fails 8 (also good for debugging!)\"\n    assert candidate([127, 97, 8192]) == 10, \"This prints if this assert fails 9 (also good for debugging!)\"",
            "input_reasoning": "skjkasdkd([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]) ",
            "output_reasoning": " 10, \"This prints if this assert fails 1 (good for debugging!)\""
        },
        "HumanEval_97": {
            "nl": "def multiply(a, b):\n    \"\"\"Complete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    \"\"\"",
            "asserts": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(148, 412) == 16, \"First test error: \" + str(candidate(148, 412))                    \n    assert candidate(19, 28) == 72, \"Second test error: \" + str(candidate(19, 28))           \n    assert candidate(2020, 1851) == 0, \"Third test error: \" + str(candidate(2020, 1851))\n    assert candidate(14,-15) == 20, \"Fourth test error: \" + str(candidate(14,-15))      \n    assert candidate(76, 67) == 42, \"Fifth test error: \" + str(candidate(76, 67))      \n    assert candidate(17, 27) == 49, \"Sixth test error: \" + str(candidate(17, 27))      \n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(0, 1) == 0, \"1st edge test error: \" + str(candidate(0, 1))\n    assert candidate(0, 0) == 0, \"2nd edge test error: \" + str(candidate(0, 0))",
            "input_reasoning": "multiply(148, 412) ",
            "output_reasoning": " 16, \"First test error: \" + str(candidate(148, 412))                    "
        },
        "HumanEval_73": {
            "nl": "def smallest_change(arr):\n    \"\"\"\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n    \"\"\"",
            "asserts": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1,2,3,5,4,7,9,6]) == 4\n    assert candidate([1, 2, 3, 4, 3, 2, 2]) == 1\n    assert candidate([1, 4, 2]) == 1\n    assert candidate([1, 4, 4, 2]) == 1\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1, 2, 3, 2, 1]) == 0\n    assert candidate([3, 1, 1, 3]) == 0\n    assert candidate([1]) == 0\n    assert candidate([0, 1]) == 1",
            "input_reasoning": "smallest_change([1,2,3,5,4,7,9,6]) ",
            "output_reasoning": " 4"
        },
        "HumanEval_65": {
            "nl": "def circular_shift(x, shift):\n    \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    \"\"\"",
            "asserts": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(100, 2) == \"001\"\n    assert candidate(12, 2) == \"12\"\n    assert candidate(97, 8) == \"79\"\n    assert candidate(12, 1) == \"21\", \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(11, 101) == \"11\", \"This prints if this assert fails 2 (also good for debugging!)\"",
            "input_reasoning": "circular_shift(100, 2) ",
            "output_reasoning": " \"001\""
        }
    },
    "MBPP": {
        "131": {
            "nl": "Write a python function to reverse only the vowels of a given string (where y is not a vowel).",
            "asserts": "assert reverse_vowels(\"Python\") == \"Python\"\nassert reverse_vowels(\"USA\") == \"ASU\"\nassert reverse_vowels(\"ab\") == \"ab\"",
            "input_reasoning": "reverse_vowels(\"Python\")",
            "output_reasoning": "\"Python\""
        },
        "554": {
            "nl": "Write a python function which takes a list of integers and only returns the odd ones.",
            "asserts": "assert Split([1,2,3,4,5,6]) == [1,3,5]\nassert Split([10,11,12,13]) == [11,13]\nassert Split([7,8,9,1]) == [7,9,1]",
            "input_reasoning": "Split([1,2,3,4,5,6])",
            "output_reasoning": "[1,3,5]"
        },
        "415": {
            "nl": "Write a python function to find a pair with highest product from a given array of integers.",
            "asserts": "assert max_Product([1,2,3,4,7,0,8,4]) == (7,8)\nassert max_Product([0,-1,-2,-4,5,0,-6]) == (-4,-6)\nassert max_Product([1,2,3]) == (2,3)",
            "input_reasoning": "max_Product([1,2,3,4,7,0,8,4])",
            "output_reasoning": "(7,8)"
        },
        "279": {
            "nl": "Write a function to find the nth decagonal number.",
            "asserts": "assert is_num_decagonal(3) == 27\nassert is_num_decagonal(7) == 175\nassert is_num_decagonal(10) == 370",
            "input_reasoning": "is_num_decagonal(3)",
            "output_reasoning": "27"
        },
        "592": {
            "nl": "Write a python function to find the sum of the product of consecutive binomial co-efficients.",
            "asserts": "assert sum_Of_product(3) == 15\nassert sum_Of_product(4) == 56\nassert sum_Of_product(1) == 1",
            "input_reasoning": "sum_Of_product(3)",
            "output_reasoning": "15"
        },
        "247": {
            "nl": "Write a function to find the length of the longest palindromic subsequence in the given string.",
            "asserts": "assert lps(\"TENS FOR TENS\") == 5\nassert lps(\"CARDIO FOR CARDS\") == 7\nassert lps(\"PART OF THE JOURNEY IS PART\") == 9",
            "input_reasoning": "lps(\"TENS FOR TENS\")",
            "output_reasoning": "5"
        },
        "744": {
            "nl": "Write a function to check if the given tuple has any none value or not.",
            "asserts": "assert check_none((10, 4, 5, 6, None)) == True\nassert check_none((7, 8, 9, 11, 14)) == False\nassert check_none((1, 2, 3, 4, None)) == True",
            "input_reasoning": "check_none((10, 4, 5, 6, None))",
            "output_reasoning": "True"
        },
        "257": {
            "nl": "Write a function that takes in two numbers and returns a tuple with the second number and then the first number.",
            "asserts": "assert swap_numbers(10,20)==(20,10)\nassert swap_numbers(15,17)==(17,15)\nassert swap_numbers(100,200)==(200,100)",
            "input_reasoning": "swap_numbers(10,20)",
            "output_reasoning": "(20,10)"
        },
        "786": {
            "nl": "Write a function to locate the right insertion point for a specified value in sorted order.",
            "asserts": "assert right_insertion([1,2,4,5],6)==4\nassert right_insertion([1,2,4,5],3)==2\nassert right_insertion([1,2,4,5],7)==4",
            "input_reasoning": "right_insertion([1,2,4,5],6)",
            "output_reasoning": "4"
        },
        "478": {
            "nl": "Write a function to remove lowercase substrings from a given string.",
            "asserts": "assert remove_lowercase(\"PYTHon\")==('PYTH')\nassert remove_lowercase(\"FInD\")==('FID')\nassert remove_lowercase(\"STRinG\")==('STRG')",
            "input_reasoning": "remove_lowercase(\"PYTHon\")",
            "output_reasoning": "('PYTH')"
        },
        "405": {
            "nl": "Write a function to check whether an element exists within a tuple.",
            "asserts": "assert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'r')==True\nassert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'5')==False\nassert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\",\"e\"),3)==True",
            "input_reasoning": "check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'r')",
            "output_reasoning": "True"
        },
        "88": {
            "nl": "Write a function to get the frequency of all the elements in a list, returned as a dictionary.",
            "asserts": "assert freq_count([10,10,10,10,20,20,20,20,40,40,50,50,30])==({10: 4, 20: 4, 40: 2, 50: 2, 30: 1})\nassert freq_count([1,2,3,4,3,2,4,1,3,1,4])==({1:3, 2:2,3:3,4:3})\nassert freq_count([5,6,7,4,9,10,4,5,6,7,9,5])==({10:1,5:3,6:2,7:2,4:2,9:2})",
            "input_reasoning": "freq_count([10,10,10,10,20,20,20,20,40,40,50,50,30])",
            "output_reasoning": "({10: 4, 20: 4, 40: 2, 50: 2, 30: 1})"
        },
        "166": {
            "nl": "Write a function that counts the number of pairs of integers in a list that xor to an even number.",
            "asserts": "assert find_even_pair([5, 4, 7, 2, 1]) == 4\nassert find_even_pair([7, 2, 8, 1, 0, 5, 11]) == 9\nassert find_even_pair([1, 2, 3]) == 1",
            "input_reasoning": "find_even_pair([5, 4, 7, 2, 1])",
            "output_reasoning": "4"
        },
        "559": {
            "nl": "Write a function to find the sum of the largest contiguous sublist in the given list.",
            "asserts": "assert max_sub_array_sum([-2, -3, 4, -1, -2, 1, 5, -3], 8) == 7\nassert max_sub_array_sum([-3, -4, 5, -2, -3, 2, 6, -4], 8) == 8\nassert max_sub_array_sum([-4, -5, 6, -3, -4, 3, 7, -5], 8) == 10",
            "input_reasoning": "max_sub_array_sum([-2, -3, 4, -1, -2, 1, 5, -3], 8)",
            "output_reasoning": "7"
        },
        "299": {
            "nl": "Write a function to calculate the maximum aggregate from the list of tuples.",
            "asserts": "assert max_aggregate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)])==('Juan Whelan', 212)\nassert max_aggregate([('Juan Whelan',50),('Sabah Colley',48),('Peter Nichols',37),('Juan Whelan',22),('Sabah Colley',14)])==('Juan Whelan', 72)\nassert max_aggregate([('Juan Whelan',10),('Sabah Colley',20),('Peter Nichols',30),('Juan Whelan',40),('Sabah Colley',50)])==('Sabah Colley', 70)",
            "input_reasoning": "max_aggregate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)])",
            "output_reasoning": "('Juan Whelan', 212)"
        },
        "472": {
            "nl": "Write a python function to check whether the given list contains consecutive numbers or not.",
            "asserts": "assert check_Consecutive([1,2,3,4,5]) == True\nassert check_Consecutive([1,2,3,5,6]) == False\nassert check_Consecutive([1,2,1]) == False",
            "input_reasoning": "check_Consecutive([1,2,3,4,5])",
            "output_reasoning": "True"
        },
        "255": {
            "nl": "Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.",
            "asserts": "assert combinations_colors( [\"Red\",\"Green\",\"Blue\"],1)==[('Red',), ('Green',), ('Blue',)]\nassert combinations_colors( [\"Red\",\"Green\",\"Blue\"],2)==[('Red', 'Red'), ('Red', 'Green'), ('Red', 'Blue'), ('Green', 'Green'), ('Green', 'Blue'), ('Blue', 'Blue')]\nassert combinations_colors( [\"Red\",\"Green\",\"Blue\"],3)==[('Red', 'Red', 'Red'), ('Red', 'Red', 'Green'), ('Red', 'Red', 'Blue'), ('Red', 'Green', 'Green'), ('Red', 'Green', 'Blue'), ('Red', 'Blue', 'Blue'), ('Green', 'Green', 'Green'), ('Green', 'Green', 'Blue'), ('Green', 'Blue', 'Blue'), ('Blue', 'Blue', 'Blue')]",
            "input_reasoning": "combinations_colors( [\"Red\",\"Green\",\"Blue\"],1)",
            "output_reasoning": "[('Red',), ('Green',), ('Blue',)]"
        },
        "8": {
            "nl": "Write a function to find squares of individual elements in a list.",
            "asserts": "assert square_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\nassert square_nums([10,20,30])==([100,400,900])\nassert square_nums([12,15])==([144,225])",
            "input_reasoning": "square_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
            "output_reasoning": "[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]"
        },
        "87": {
            "nl": "Write a function to merge three dictionaries into a single dictionary.",
            "asserts": "assert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'O': 'Orange'}\nassert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{\"L\":\"lavender\",\"B\":\"Blue\"})=={'W': 'White', 'P': 'Pink', 'B': 'Black', 'R': 'Red', 'G': 'Green', 'L': 'lavender'}\nassert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" },{\"L\":\"lavender\",\"B\":\"Blue\"},{ \"G\": \"Green\", \"W\": \"White\" })=={'B': 'Black', 'P': 'Pink', 'R': 'Red', 'G': 'Green', 'L': 'lavender', 'W': 'White'}",
            "input_reasoning": "merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })",
            "output_reasoning": "{'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'O': 'Orange'}"
        },
        "404": {
            "nl": "Write a python function to find the minimum of two numbers.",
            "asserts": "assert minimum(1,2) == 1\nassert minimum(-5,-4) == -5\nassert minimum(0,0) == 0",
            "input_reasoning": "minimum(1,2)",
            "output_reasoning": "1"
        },
        "788": {
            "nl": "Write a function to create a new tuple from the given string and list.",
            "asserts": "assert new_tuple([\"WEB\", \"is\"], \"best\") == ('WEB', 'is', 'best')\nassert new_tuple([\"We\", \"are\"], \"Developers\") == ('We', 'are', 'Developers')\nassert new_tuple([\"Part\", \"is\"], \"Wrong\") == ('Part', 'is', 'Wrong')",
            "input_reasoning": "new_tuple([\"WEB\", \"is\"], \"best\")",
            "output_reasoning": "('WEB', 'is', 'best')"
        },
        "428": {
            "nl": "Write a function to sort the given array by using shell sort.",
            "asserts": "assert shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]) == [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]\nassert shell_sort([24, 22, 39, 34, 87, 73, 68]) == [22, 24, 34, 39, 68, 73, 87]\nassert shell_sort([32, 30, 16, 96, 82, 83, 74]) == [16, 30, 32, 74, 82, 83, 96]",
            "input_reasoning": "shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95])",
            "output_reasoning": "[2, 3, 4, 5, 12, 12, 23, 56, 81, 95]"
        },
        "638": {
            "nl": "Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.",
            "asserts": "assert wind_chill(120,35)==40\nassert wind_chill(40,20)==19\nassert wind_chill(10,8)==6",
            "input_reasoning": "wind_chill(120,35)",
            "output_reasoning": "40"
        },
        "271": {
            "nl": "Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.",
            "asserts": "assert even_Power_Sum(2) == 1056\nassert even_Power_Sum(3) == 8832\nassert even_Power_Sum(1) == 32",
            "input_reasoning": "even_Power_Sum(2)",
            "output_reasoning": "1056"
        },
        "798": {
            "nl": "Write a python function to find the sum of an array.",
            "asserts": "assert _sum([1, 2, 3]) == 6\nassert _sum([15, 12, 13, 10]) == 50\nassert _sum([0, 1, 2]) == 3",
            "input_reasoning": "_sum([1, 2, 3])",
            "output_reasoning": "6"
        },
        "285": {
            "nl": "Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.",
            "asserts": "assert text_match_two_three(\"ac\")==(False)\nassert text_match_two_three(\"dc\")==(False)\nassert text_match_two_three(\"abbbba\")==(True)",
            "input_reasoning": "text_match_two_three(\"ac\")",
            "output_reasoning": "(False)"
        },
        "68": {
            "nl": "Write a python function to check whether the given array is monotonic or not.",
            "asserts": "assert is_Monotonic([6, 5, 4, 4]) == True\nassert is_Monotonic([1, 2, 2, 3]) == True\nassert is_Monotonic([1, 3, 2]) == False",
            "input_reasoning": "is_Monotonic([6, 5, 4, 4])",
            "output_reasoning": "True"
        },
        "475": {
            "nl": "Write a function to sort a dictionary by value.",
            "asserts": "assert sort_counter({'Math':81, 'Physics':83, 'Chemistry':87})==[('Chemistry', 87), ('Physics', 83), ('Math', 81)]\nassert sort_counter({'Math':400, 'Physics':300, 'Chemistry':250})==[('Math', 400), ('Physics', 300), ('Chemistry', 250)]\nassert sort_counter({'Math':900, 'Physics':1000, 'Chemistry':1250})==[('Chemistry', 1250), ('Physics', 1000), ('Math', 900)]",
            "input_reasoning": "sort_counter({'Math':81, 'Physics':83, 'Chemistry':87})",
            "output_reasoning": "[('Chemistry', 87), ('Physics', 83), ('Math', 81)]"
        },
        "400": {
            "nl": "Write a function to extract the number of unique tuples in the given list.",
            "asserts": "assert extract_freq([(3, 4), (1, 2), (4, 3), (5, 6)] ) == 3\nassert extract_freq([(4, 15), (2, 3), (5, 4), (6, 7)] ) == 4\nassert extract_freq([(5, 16), (2, 3), (6, 5), (6, 9)] ) == 4",
            "input_reasoning": "extract_freq([(3, 4), (1, 2), (4, 3), (5, 6)] )",
            "output_reasoning": "3"
        },
        "420": {
            "nl": "Write a python function to find the cube sum of first n even natural numbers.",
            "asserts": "assert cube_Sum(2) == 72\nassert cube_Sum(3) == 288\nassert cube_Sum(4) == 800",
            "input_reasoning": "cube_Sum(2)",
            "output_reasoning": "72"
        },
        "138": {
            "nl": "Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.",
            "asserts": "assert is_Sum_Of_Powers_Of_Two(10) == True\nassert is_Sum_Of_Powers_Of_Two(7) == False\nassert is_Sum_Of_Powers_Of_Two(14) == True",
            "input_reasoning": "is_Sum_Of_Powers_Of_Two(10)",
            "output_reasoning": "True"
        },
        "116": {
            "nl": "Write a function to convert a given tuple of positive integers into a single integer.",
            "asserts": "assert tuple_to_int((1,2,3))==123\nassert tuple_to_int((4,5,6))==456\nassert tuple_to_int((5,6,7))==567",
            "input_reasoning": "tuple_to_int((1,2,3))",
            "output_reasoning": "123"
        },
        "93": {
            "nl": "Write a function to calculate the value of 'a' to the power 'b'.",
            "asserts": "assert power(3,4) == 81\nassert power(2,3) == 8\nassert power(5,5) == 3125",
            "input_reasoning": "power(3,4)",
            "output_reasoning": "81"
        },
        "572": {
            "nl": "Write a python function to remove duplicate numbers from a given number of lists.",
            "asserts": "assert two_unique_nums([1,2,3,2,3,4,5]) == [1, 4, 5]\nassert two_unique_nums([1,2,3,2,4,5]) == [1, 3, 4, 5]\nassert two_unique_nums([1,2,3,4,5]) == [1, 2, 3, 4, 5]",
            "input_reasoning": "two_unique_nums([1,2,3,2,3,4,5])",
            "output_reasoning": "[1, 4, 5]"
        },
        "775": {
            "nl": "Write a python function to check whether every odd index contains odd numbers of a given list.",
            "asserts": "assert odd_position([2,1,4,3,6,7,6,3]) == True\nassert odd_position([4,1,2]) == True\nassert odd_position([1,2,3]) == False",
            "input_reasoning": "odd_position([2,1,4,3,6,7,6,3])",
            "output_reasoning": "True"
        },
        "583": {
            "nl": "Write a function which returns nth catalan number.",
            "asserts": "assert catalan_number(10)==16796\nassert catalan_number(9)==4862\nassert catalan_number(7)==429",
            "input_reasoning": "catalan_number(10)",
            "output_reasoning": "16796"
        },
        "641": {
            "nl": "Write a function to find the nth nonagonal number.",
            "asserts": "assert is_nonagonal(10) == 325\nassert is_nonagonal(15) == 750\nassert is_nonagonal(18) == 1089",
            "input_reasoning": "is_nonagonal(10)",
            "output_reasoning": "325"
        },
        "222": {
            "nl": "Write a function to check if all the elements in tuple have same data type or not.",
            "asserts": "assert check_type((5, 6, 7, 3, 5, 6) ) == True\nassert check_type((1, 2, \"4\") ) == False\nassert check_type((3, 2, 1, 4, 5) ) == True",
            "input_reasoning": "check_type((5, 6, 7, 3, 5, 6) )",
            "output_reasoning": "True"
        },
        "477": {
            "nl": "Write a python function to convert the given string to lower case.",
            "asserts": "assert is_lower(\"InValid\") == \"invalid\"\nassert is_lower(\"TruE\") == \"true\"\nassert is_lower(\"SenTenCE\") == \"sentence\"",
            "input_reasoning": "is_lower(\"InValid\")",
            "output_reasoning": "\"invalid\""
        },
        "388": {
            "nl": "Write a python function to find the highest power of 2 that is less than or equal to n.",
            "asserts": "assert highest_Power_of_2(10) == 8\nassert highest_Power_of_2(19) == 16\nassert highest_Power_of_2(32) == 32",
            "input_reasoning": "highest_Power_of_2(10)",
            "output_reasoning": "8"
        },
        "618": {
            "nl": "Write a function to divide two lists element wise.",
            "asserts": "assert div_list([4,5,6],[1, 2, 3])==[4.0,2.5,2.0]\nassert div_list([3,2],[1,4])==[3.0, 0.5]\nassert div_list([90,120],[50,70])==[1.8, 1.7142857142857142]",
            "input_reasoning": "div_list([4,5,6],[1, 2, 3])",
            "output_reasoning": "[4.0,2.5,2.0]"
        },
        "162": {
            "nl": "Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).",
            "asserts": "assert sum_series(6) == 12\nassert sum_series(10) == 30\nassert sum_series(9) == 25",
            "input_reasoning": "sum_series(6)",
            "output_reasoning": "12"
        },
        "235": {
            "nl": "Write a python function to set all even bits of a given number.",
            "asserts": "assert even_bit_set_number(10) == 10\nassert even_bit_set_number(20) == 30\nassert even_bit_set_number(30) == 30",
            "input_reasoning": "even_bit_set_number(10)",
            "output_reasoning": "10"
        },
        "234": {
            "nl": "Write a function to find the volume of a cube given its side length.",
            "asserts": "assert volume_cube(3)==27\nassert volume_cube(2)==8\nassert volume_cube(5)==125",
            "input_reasoning": "volume_cube(3)",
            "output_reasoning": "27"
        },
        "128": {
            "nl": "Write a function to find words that are longer than n characters from a given list of words.",
            "asserts": "assert long_words(3,\"python is a programming language\")==['python','programming','language']\nassert long_words(2,\"writing a program\")==['writing','program']\nassert long_words(5,\"sorting list\")==['sorting']",
            "input_reasoning": "long_words(3,\"python is a programming language\")",
            "output_reasoning": "['python','programming','language']"
        },
        "804": {
            "nl": "Write a function to check whether the product of numbers in a list is even or not.",
            "asserts": "assert is_product_even([1,2,3])\nassert is_product_even([1,2,1,4])\nassert not is_product_even([1,1])",
            "input_reasoning": "is_product_even([1,2,3])",
            "output_reasoning": "True"
        },
        "100": {
            "nl": "Write a function to find the next smallest palindrome of a specified integer, returned as an integer.",
            "asserts": "assert next_smallest_palindrome(99)==101\nassert next_smallest_palindrome(1221)==1331\nassert next_smallest_palindrome(120)==121",
            "input_reasoning": "next_smallest_palindrome(99)",
            "output_reasoning": "101"
        },
        "468": {
            "nl": "Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.",
            "asserts": "assert max_product([3, 100, 4, 5, 150, 6]) == 3000\nassert max_product([4, 42, 55, 68, 80]) == 50265600\nassert max_product([10, 22, 9, 33, 21, 50, 41, 60]) == 2460",
            "input_reasoning": "max_product([3, 100, 4, 5, 150, 6])",
            "output_reasoning": "3000"
        },
        "733": {
            "nl": "Write a function to find the index of the first occurrence of a given number in a sorted array.",
            "asserts": "assert find_first_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 1\nassert find_first_occurrence([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 2\nassert find_first_occurrence([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6) == 4",
            "input_reasoning": "find_first_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5)",
            "output_reasoning": "1"
        },
        "800": {
            "nl": "Write a function to remove all whitespaces from a string.",
            "asserts": "assert remove_all_spaces('python  program')==('pythonprogram')\nassert remove_all_spaces('python   programming    language')==('pythonprogramminglanguage')\nassert remove_all_spaces('python                     program')==('pythonprogram')\nassert remove_all_spaces('   python                     program')=='pythonprogram'",
            "input_reasoning": "remove_all_spaces('python  program')",
            "output_reasoning": "('pythonprogram')"
        },
        "631": {
            "nl": "Write a function to replace whitespaces with an underscore and vice versa in a given string.",
            "asserts": "assert replace_spaces('Jumanji The Jungle') == 'Jumanji_The_Jungle'\nassert replace_spaces('The_Avengers') == 'The Avengers'\nassert replace_spaces('Fast and Furious') == 'Fast_and_Furious'",
            "input_reasoning": "replace_spaces('Jumanji The Jungle')",
            "output_reasoning": "'Jumanji_The_Jungle'"
        },
        "286": {
            "nl": "Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.",
            "asserts": "assert max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3) == 30\nassert max_sub_array_sum_repeated([-1, 10, 20], 3, 2) == 59\nassert max_sub_array_sum_repeated([-1, -2, -3], 3, 3) == -1",
            "input_reasoning": "max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3)",
            "output_reasoning": "30"
        },
        "310": {
            "nl": "Write a function to convert a given string to a tuple of characters.",
            "asserts": "assert string_to_tuple(\"python 3.0\")==('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')\nassert string_to_tuple(\"item1\")==('i', 't', 'e', 'm', '1')\nassert string_to_tuple(\"15.10\")==('1', '5', '.', '1', '0')",
            "input_reasoning": "string_to_tuple(\"python 3.0\")",
            "output_reasoning": "('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')"
        },
        "793": {
            "nl": "Write a python function to find the last position of an element in a sorted array.",
            "asserts": "assert last([1,2,3],1) == 0\nassert last([1,1,1,2,3,4],1) == 2\nassert last([2,3,2,3,6,8,9],3) == 3",
            "input_reasoning": "last([1,2,3],1)",
            "output_reasoning": "0"
        },
        "223": {
            "nl": "Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)",
            "asserts": "assert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\nassert is_majority([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\nassert is_majority([1, 1, 1, 2, 2], 5, 1) == True\nassert is_majority([1, 1, 2, 2], 5, 1) == False",
            "input_reasoning": "is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3)",
            "output_reasoning": "True"
        },
        "439": {
            "nl": "Write a function to join a list of multiple integers into a single integer.",
            "asserts": "assert multiple_to_single([11, 33, 50])==113350\nassert multiple_to_single([-1,2,3,4,5,6])==-123456\nassert multiple_to_single([10,15,20,25])==10152025",
            "input_reasoning": "multiple_to_single([11, 33, 50])",
            "output_reasoning": "113350"
        },
        "440": {
            "nl": "Write a function to find the first adverb and their positions in a given sentence.",
            "asserts": "assert find_adverb_position(\"clearly!! we can see the sky\")==(0, 7, 'clearly')\nassert find_adverb_position(\"seriously!! there are many roses\")==(0, 9, 'seriously')\nassert find_adverb_position(\"unfortunately!! sita is going to home\")==(0, 13, 'unfortunately')",
            "input_reasoning": "find_adverb_position(\"clearly!! we can see the sky\")",
            "output_reasoning": "(0, 7, 'clearly')"
        },
        "608": {
            "nl": "Write a python function to find nth bell number.",
            "asserts": "assert bell_Number(2) == 2\nassert bell_Number(3) == 5\nassert bell_Number(4) == 15",
            "input_reasoning": "bell_Number(2)",
            "output_reasoning": "2"
        },
        "731": {
            "nl": "Write a function to find the lateral surface area of a cone given radius r and the height h.",
            "asserts": "assert lateralsurface_cone(5,12)==204.20352248333654\nassert lateralsurface_cone(10,15)==566.3586699569488\nassert lateralsurface_cone(19,17)==1521.8090132193388",
            "input_reasoning": "lateralsurface_cone(5,12)",
            "output_reasoning": "204.20352248333654"
        },
        "607": {
            "nl": "Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.",
            "asserts": "assert find_literals('The quick brown fox jumps over the lazy dog.', 'fox') == ('fox', 16, 19)\nassert find_literals('Its been a very crazy procedure right', 'crazy') == ('crazy', 16, 21)\nassert find_literals('Hardest choices required strongest will', 'will') == ('will', 35, 39)",
            "input_reasoning": "find_literals('The quick brown fox jumps over the lazy dog.', 'fox')",
            "output_reasoning": "('fox', 16, 19)"
        },
        "396": {
            "nl": "Write a function to check whether the given string starts and ends with the same character or not.",
            "asserts": "assert check_char(\"abba\") == \"Valid\"\nassert check_char(\"a\") == \"Valid\"\nassert check_char(\"abcd\") == \"Invalid\"",
            "input_reasoning": "check_char(\"abba\")",
            "output_reasoning": "\"Valid\""
        },
        "442": {
            "nl": "Write a function to find the ration of positive numbers in an array of integers.",
            "asserts": "assert positive_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.54\nassert positive_count([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==0.69\nassert positive_count([2, 4, -6, -9, 11, -12, 14, -5, 17])==0.56",
            "input_reasoning": "positive_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])",
            "output_reasoning": "0.54"
        },
        "735": {
            "nl": "Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/",
            "asserts": "assert toggle_middle_bits(9) == 15\nassert toggle_middle_bits(10) == 12\nassert toggle_middle_bits(11) == 13\nassert toggle_middle_bits(0b1000001) == 0b1111111\nassert toggle_middle_bits(0b1001101) == 0b1110011",
            "input_reasoning": "toggle_middle_bits(9)",
            "output_reasoning": "15"
        },
        "253": {
            "nl": "Write a python function that returns the number of integer elements in a given list.",
            "asserts": "assert count_integer([1,2,'abc',1.2]) == 2\nassert count_integer([1,2,3]) == 3\nassert count_integer([1,1.2,4,5.1]) == 2",
            "input_reasoning": "count_integer([1,2,'abc',1.2])",
            "output_reasoning": "2"
        },
        "58": {
            "nl": "Write a python function to check whether the given two integers have opposite sign or not.",
            "asserts": "assert opposite_Signs(1,-2) == True\nassert opposite_Signs(3,2) == False\nassert opposite_Signs(-10,-10) == False\nassert opposite_Signs(-2,2) == True",
            "input_reasoning": "opposite_Signs(1,-2)",
            "output_reasoning": "True"
        },
        "407": {
            "nl": "Write a function to create the next bigger number by rearranging the digits of a given number.",
            "asserts": "assert rearrange_bigger(12)==21\nassert rearrange_bigger(10)==False\nassert rearrange_bigger(102)==120",
            "input_reasoning": "rearrange_bigger(12)",
            "output_reasoning": "21"
        },
        "267": {
            "nl": "Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.",
            "asserts": "assert square_Sum(2) == 10\nassert square_Sum(3) == 35\nassert square_Sum(4) == 84",
            "input_reasoning": "square_Sum(2)",
            "output_reasoning": "10"
        },
        "57": {
            "nl": "Write a python function to find the largest number that can be formed with the given list of digits.",
            "asserts": "assert find_Max_Num([1,2,3]) == 321\nassert find_Max_Num([4,5,6,1]) == 6541\nassert find_Max_Num([1,2,3,9]) == 9321",
            "input_reasoning": "find_Max_Num([1,2,3])",
            "output_reasoning": "321"
        },
        "17": {
            "nl": "Write a function that returns the perimeter of a square given its side length as input.",
            "asserts": "assert square_perimeter(10)==40\nassert square_perimeter(5)==20\nassert square_perimeter(4)==16",
            "input_reasoning": "square_perimeter(10)",
            "output_reasoning": "40"
        },
        "805": {
            "nl": "Write a function that returns the list in a list of lists whose sum of elements is the highest.",
            "asserts": "assert max_sum_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]])==[10, 11, 12]\nassert max_sum_list([[3,2,1], [6,5,4], [12,11,10]])==[12,11,10]\nassert max_sum_list([[2,3,1]])==[2,3,1]",
            "input_reasoning": "max_sum_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]])",
            "output_reasoning": "[10, 11, 12]"
        },
        "19": {
            "nl": "Write a function to find whether a given array of integers contains any duplicate element.",
            "asserts": "assert test_duplicate(([1,2,3,4,5]))==False\nassert test_duplicate(([1,2,3,4, 4]))==True\nassert test_duplicate([1,1,2,2,3,3,4,4,5])==True",
            "input_reasoning": "test_duplicate(([1,2,3,4,5]))",
            "output_reasoning": "False"
        },
        "564": {
            "nl": "Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.",
            "asserts": "assert count_Pairs([1,2,1],3) == 2\nassert count_Pairs([1,1,1,1],4) == 0\nassert count_Pairs([1,2,3,4,5],5) == 10",
            "input_reasoning": "count_Pairs([1,2,1],3)",
            "output_reasoning": "2"
        },
        "127": {
            "nl": "Write a function to multiply two integers.",
            "asserts": "assert multiply_int(10,20)==200\nassert multiply_int(5,10)==50\nassert multiply_int(4,8)==32",
            "input_reasoning": "multiply_int(10,20)",
            "output_reasoning": "200"
        },
        "91": {
            "nl": "Write a function to check if a string is present as a substring in a given list of string values.",
            "asserts": "assert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ack\")==True\nassert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"abc\")==False\nassert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ange\")==True",
            "input_reasoning": "find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ack\")",
            "output_reasoning": "True"
        },
        "66": {
            "nl": "Write a python function to count the number of positive numbers in a list.",
            "asserts": "assert pos_count([1,-2,3,-4]) == 2\nassert pos_count([3,4,5,-1]) == 3\nassert pos_count([1,2,3,4]) == 4",
            "input_reasoning": "pos_count([1,-2,3,-4])",
            "output_reasoning": "2"
        },
        "780": {
            "nl": "Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/",
            "asserts": "assert find_combinations([(2, 4), (6, 7), (5, 1), (6, 10)]) == [(8, 11), (7, 5), (8, 14), (11, 8), (12, 17), (11, 11)]\nassert find_combinations([(3, 5), (7, 8), (6, 2), (7, 11)]) == [(10, 13), (9, 7), (10, 16), (13, 10), (14, 19), (13, 13)]\nassert find_combinations([(4, 6), (8, 9), (7, 3), (8, 12)]) == [(12, 15), (11, 9), (12, 18), (15, 12), (16, 21), (15, 15)]",
            "input_reasoning": "find_combinations([(2, 4), (6, 7), (5, 1), (6, 10)])",
            "output_reasoning": "[(8, 11), (7, 5), (8, 14), (11, 8), (12, 17), (11, 11)]"
        },
        "567": {
            "nl": "Write a function to check whether a specified list is sorted or not.",
            "asserts": "assert issort_list([1,2,4,6,8,10,12,14,16,17])==True\nassert issort_list([1, 2, 4, 6, 8, 10, 12, 14, 20, 17])==False\nassert issort_list([1, 2, 4, 6, 8, 10,15,14,20])==False",
            "input_reasoning": "issort_list([1,2,4,6,8,10,12,14,16,17])",
            "output_reasoning": "True"
        },
        "619": {
            "nl": "Write a function to move all the numbers to the end of the given string.",
            "asserts": "assert move_num('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\nassert move_num('Avengers124Assemble') == 'AvengersAssemble124'\nassert move_num('Its11our12path13to14see15things16do17things') == 'Itsourpathtoseethingsdothings11121314151617'",
            "input_reasoning": "move_num('I1love143you55three3000thousand')",
            "output_reasoning": "'Iloveyouthreethousand1143553000'"
        },
        "393": {
            "nl": "Write a function to find the list with maximum length.",
            "asserts": "assert max_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\nassert max_length_list([[1,2,3,4,5],[1,2,3,4],[1,2,3],[1,2],[1]])==(5,[1,2,3,4,5])\nassert max_length_list([[3,4,5],[6,7,8,9],[10,11,12]])==(4,[6,7,8,9])",
            "input_reasoning": "max_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])",
            "output_reasoning": "(3, [13, 15, 17])"
        },
        "620": {
            "nl": "Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.",
            "asserts": "assert largest_subset([ 1, 3, 6, 13, 17, 18 ]) == 4\nassert largest_subset([10, 5, 3, 15, 20]) == 3\nassert largest_subset([18, 1, 3, 6, 13, 17]) == 4",
            "input_reasoning": "largest_subset([ 1, 3, 6, 13, 17, 18 ])",
            "output_reasoning": "4"
        },
        "160": {
            "nl": "Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.",
            "asserts": "assert find_solution(2, 3, 7) == (2, 1)\nassert find_solution(4, 2, 7) == None\nassert find_solution(1, 13, 17) == (4, 1)",
            "input_reasoning": "find_solution(2, 3, 7)",
            "output_reasoning": "(2, 1)"
        },
        "787": {
            "nl": "Write a function that matches a string that has an a followed by three 'b'.",
            "asserts": "assert not text_match_three(\"ac\")\nassert not text_match_three(\"dc\")\nassert text_match_three(\"abbbba\")\nassert text_match_three(\"caacabbbba\")",
            "input_reasoning": "text_match_three(\"ac\")",
            "output_reasoning": "False"
        },
        "86": {
            "nl": "Write a function to find nth centered hexagonal number.",
            "asserts": "assert centered_hexagonal_number(10) == 271\nassert centered_hexagonal_number(2) == 7\nassert centered_hexagonal_number(9) == 217",
            "input_reasoning": "centered_hexagonal_number(10)",
            "output_reasoning": "271"
        },
        "436": {
            "nl": "Write a python function to return the negative numbers in a list.",
            "asserts": "assert neg_nos([-1,4,5,-6]) == [-1,-6]\nassert neg_nos([-1,-2,3,4]) == [-1,-2]\nassert neg_nos([-7,-6,8,9]) == [-7,-6]",
            "input_reasoning": "neg_nos([-1,4,5,-6])",
            "output_reasoning": "[-1,-6]"
        },
        "568": {
            "nl": "Write a function to create a list of N empty dictionaries.",
            "asserts": "assert empty_list(5)==[{},{},{},{},{}]\nassert empty_list(6)==[{},{},{},{},{},{}]\nassert empty_list(7)==[{},{},{},{},{},{},{}]",
            "input_reasoning": "empty_list(5)",
            "output_reasoning": "[{},{},{},{},{}]"
        },
        "113": {
            "nl": "Write a function to check if a string represents an integer or not.",
            "asserts": "assert check_integer(\"python\")==False\nassert check_integer(\"1\")==True\nassert check_integer(\"12345\")==True",
            "input_reasoning": "check_integer(\"python\")",
            "output_reasoning": "False"
        },
        "69": {
            "nl": "Write a function to check whether a list contains the given sublist or not.",
            "asserts": "assert is_sublist([2,4,3,5,7],[3,7])==False\nassert is_sublist([2,4,3,5,7],[4,3])==True\nassert is_sublist([2,4,3,5,7],[1,6])==False",
            "input_reasoning": "is_sublist([2,4,3,5,7],[3,7])",
            "output_reasoning": "False"
        },
        "125": {
            "nl": "Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.",
            "asserts": "assert find_length(\"11000010001\") == 6\nassert find_length(\"10111\") == 1\nassert find_length(\"11011101100101\") == 2",
            "input_reasoning": "find_length(\"11000010001\")",
            "output_reasoning": "6"
        },
        "11": {
            "nl": "Write a python function to remove first and last occurrence of a given character from the string.",
            "asserts": "assert remove_Occ(\"hello\",\"l\") == \"heo\"\nassert remove_Occ(\"abcda\",\"a\") == \"bcd\"\nassert remove_Occ(\"PHP\",\"P\") == \"H\"",
            "input_reasoning": "remove_Occ(\"hello\",\"l\")",
            "output_reasoning": "\"heo\""
        },
        "391": {
            "nl": "Write a function to convert more than one list to nested dictionary.",
            "asserts": "assert convert_list_dictionary([\"S001\", \"S002\", \"S003\", \"S004\"],[\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"] ,[85, 98, 89, 92])==[{'S001': {'Adina Park': 85}}, {'S002': {'Leyton Marsh': 98}}, {'S003': {'Duncan Boyle': 89}}, {'S004': {'Saim Richards': 92}}]\nassert convert_list_dictionary([\"abc\",\"def\",\"ghi\",\"jkl\"],[\"python\",\"program\",\"language\",\"programs\"],[100,200,300,400])==[{'abc':{'python':100}},{'def':{'program':200}},{'ghi':{'language':300}},{'jkl':{'programs':400}}]\nassert convert_list_dictionary([\"A1\",\"A2\",\"A3\",\"A4\"],[\"java\",\"C\",\"C++\",\"DBMS\"],[10,20,30,40])==[{'A1':{'java':10}},{'A2':{'C':20}},{'A3':{'C++':30}},{'A4':{'DBMS':40}}]",
            "input_reasoning": "convert_list_dictionary([\"S001\", \"S002\", \"S003\", \"S004\"],[\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"] ,[85, 98, 89, 92])",
            "output_reasoning": "[{'S001': {'Adina Park': 85}}, {'S002': {'Leyton Marsh': 98}}, {'S003': {'Duncan Boyle': 89}}, {'S004': {'Saim Richards': 92}}]"
        },
        "108": {
            "nl": "Write a function to merge three lists into a single sorted list.",
            "asserts": "assert merge_sorted_list([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48])==[4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]\nassert merge_sorted_list([1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12])==[1, 1, 2, 3, 4, 5, 5, 6, 7, 7, 8, 8, 9, 11, 12]\nassert merge_sorted_list([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1],[25, 35, 22, 85, 14, 65, 75, 25, 58],[12, 74, 9, 50, 61, 41])==[1, 2, 3, 4, 7, 8, 9, 9, 9, 10, 12, 14, 14, 18, 22, 25, 25, 35, 41, 50, 58, 61, 65, 74, 75, 85]",
            "input_reasoning": "merge_sorted_list([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48])",
            "output_reasoning": "[4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]"
        },
        "594": {
            "nl": "Write a function to find the difference of the first even and first odd number of a given list.",
            "asserts": "assert diff_even_odd([1,3,5,7,4,1,6,8])==3\nassert diff_even_odd([1,2,3,4,5,6,7,8,9,10])==1\nassert diff_even_odd([1,5,7,9,10])==9",
            "input_reasoning": "diff_even_odd([1,3,5,7,4,1,6,8])",
            "output_reasoning": "3"
        },
        "591": {
            "nl": "Write a python function to interchange the first and last elements in a list.",
            "asserts": "assert swap_List([12, 35, 9, 56, 24]) == [24, 35, 9, 56, 12]\nassert swap_List([1, 2, 3]) == [3, 2, 1]\nassert swap_List([4, 5, 6]) == [6, 5, 4]",
            "input_reasoning": "swap_List([12, 35, 9, 56, 24])",
            "output_reasoning": "[24, 35, 9, 56, 12]"
        },
        "63": {
            "nl": "Write a function to find the maximum difference between available pairs in the given tuple list.",
            "asserts": "assert max_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7\nassert max_difference([(4, 6), (2, 17), (9, 13), (11, 12)]) == 15\nassert max_difference([(12, 35), (21, 27), (13, 23), (41, 22)]) == 23",
            "input_reasoning": "max_difference([(3, 5), (1, 7), (10, 3), (1, 2)])",
            "output_reasoning": "7"
        },
        "759": {
            "nl": "Write a function to check whether a given string is a decimal number with a precision of 2.",
            "asserts": "assert is_decimal('123.11')==True\nassert is_decimal('e666.86')==False\nassert is_decimal('3.124587')==False\nassert is_decimal('1.11')==True\nassert is_decimal('1.1.11')==False",
            "input_reasoning": "is_decimal('123.11')",
            "output_reasoning": "True"
        },
        "730": {
            "nl": "Write a function to remove consecutive duplicates of a given list.",
            "asserts": "assert consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4 ])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4]\nassert consecutive_duplicates([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10])==[10, 15, 19, 18, 17, 26, 17, 18, 10]\nassert consecutive_duplicates(['a', 'a', 'b', 'c', 'd', 'd'])==['a', 'b', 'c', 'd']\nassert consecutive_duplicates(['a', 'a', 'b', 'c', 'd', 'd', 'a', 'a'])==['a', 'b', 'c', 'd', 'a']",
            "input_reasoning": "consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4 ])",
            "output_reasoning": "[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4]"
        },
        "397": {
            "nl": "Write a function to find the median of three numbers.",
            "asserts": "assert median_numbers(25,55,65)==55.0\nassert median_numbers(20,10,30)==20.0\nassert median_numbers(15,45,75)==45.0",
            "input_reasoning": "median_numbers(25,55,65)",
            "output_reasoning": "55.0"
        },
        "165": {
            "nl": "Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).",
            "asserts": "assert count_char_position(\"xbcefg\") == 2\nassert count_char_position(\"ABcED\") == 3\nassert count_char_position(\"AbgdeF\") == 5",
            "input_reasoning": "count_char_position(\"xbcefg\")",
            "output_reasoning": "2"
        },
        "123": {
            "nl": "Write a function to sum all amicable numbers from 1 to a specified number.",
            "asserts": "assert amicable_numbers_sum(999)==504\nassert amicable_numbers_sum(9999)==31626\nassert amicable_numbers_sum(99)==0",
            "input_reasoning": "amicable_numbers_sum(999)",
            "output_reasoning": "504"
        },
        "723": {
            "nl": "The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.",
            "asserts": "assert count_same_pair([1, 2, 3, 4, 5, 6, 7, 8],[2, 2, 3, 1, 2, 6, 7, 9])==4\nassert count_same_pair([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8],[2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==11\nassert count_same_pair([2, 4, -6, -9, 11, -12, 14, -5, 17],[2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==1\nassert count_same_pair([0, 1, 1, 2],[0, 1, 2, 2])==3",
            "input_reasoning": "count_same_pair([1, 2, 3, 4, 5, 6, 7, 8],[2, 2, 3, 1, 2, 6, 7, 9])",
            "output_reasoning": "4"
        },
        "623": {
            "nl": "Write a function to compute the n-th power of each number in a list.",
            "asserts": "assert nth_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],2)==[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\nassert nth_nums([10,20,30],3)==([1000, 8000, 27000])\nassert nth_nums([12,15],5)==([248832, 759375])",
            "input_reasoning": "nth_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],2)",
            "output_reasoning": "[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]"
        },
        "720": {
            "nl": "Write a function to add a dictionary to the tuple. The output should be a tuple.",
            "asserts": "assert add_dict_to_tuple((4, 5, 6), {\"MSAM\" : 1, \"is\" : 2, \"best\" : 3} ) == (4, 5, 6, {'MSAM': 1, 'is': 2, 'best': 3})\nassert add_dict_to_tuple((1, 2, 3), {\"UTS\" : 2, \"is\" : 3, \"Worst\" : 4} ) == (1, 2, 3, {'UTS': 2, 'is': 3, 'Worst': 4})\nassert add_dict_to_tuple((8, 9, 10), {\"POS\" : 3, \"is\" : 4, \"Okay\" : 5} ) == (8, 9, 10, {'POS': 3, 'is': 4, 'Okay': 5})",
            "input_reasoning": "add_dict_to_tuple((4, 5, 6), {\"MSAM\" : 1, \"is\" : 2, \"best\" : 3} )",
            "output_reasoning": "(4, 5, 6, {'MSAM': 1, 'is': 2, 'best': 3})"
        },
        "771": {
            "nl": "Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/",
            "asserts": "assert check_expression(\"{()}[{}]\") == True\nassert check_expression(\"{()}[{]\") == False\nassert check_expression(\"{()}[{}][]({})\") == True",
            "input_reasoning": "check_expression(\"{()}[{}]\")",
            "output_reasoning": "True"
        },
        "414": {
            "nl": "Write a python function to check whether any value in a sequence exists in a sequence or not.",
            "asserts": "assert overlapping([1,2,3,4,5],[6,7,8,9]) == False\nassert overlapping([1,2,3],[4,5,6]) == False\nassert overlapping([1,4,5],[1,4,5]) == True",
            "input_reasoning": "overlapping([1,2,3,4,5],[6,7,8,9])",
            "output_reasoning": "False"
        },
        "161": {
            "nl": "Write a function to remove all elements from a given list present in another list.",
            "asserts": "assert remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]) == [1, 3, 5, 7, 9, 10]\nassert remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 5, 7]) == [2, 4, 6, 8, 9, 10]\nassert remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [5, 7]) == [1, 2, 3, 4, 6, 8, 9, 10]",
            "input_reasoning": "remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8])",
            "output_reasoning": "[1, 3, 5, 7, 9, 10]"
        },
        "746": {
            "nl": "Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.",
            "asserts": "assert sector_area(4,45)==6.283185307179586\nassert sector_area(9,45)==31.808625617596654\nassert sector_area(9,361)==None",
            "input_reasoning": "sector_area(4,45)",
            "output_reasoning": "6.283185307179586"
        },
        "633": {
            "nl": "Write a python function to find the sum of xor of all pairs of numbers in the given list.",
            "asserts": "assert pair_xor_Sum([5,9,7,6],4) == 47\nassert pair_xor_Sum([7,3,5],3) == 12\nassert pair_xor_Sum([7,3],2) == 4",
            "input_reasoning": "pair_xor_Sum([5,9,7,6],4)",
            "output_reasoning": "47"
        },
        "282": {
            "nl": "Write a function to subtract two lists element-wise.",
            "asserts": "assert sub_list([1, 2, 3],[4,5,6])==[-3,-3,-3]\nassert sub_list([1,2],[3,4])==[-2,-2]\nassert sub_list([90,120],[50,70])==[40,50]",
            "input_reasoning": "sub_list([1, 2, 3],[4,5,6])",
            "output_reasoning": "[-3,-3,-3]"
        },
        "770": {
            "nl": "Write a python function to find the sum of fourth power of first n odd natural numbers.",
            "asserts": "assert odd_num_sum(2) == 82\nassert odd_num_sum(3) == 707\nassert odd_num_sum(4) == 3108",
            "input_reasoning": "odd_num_sum(2)",
            "output_reasoning": "82"
        },
        "260": {
            "nl": "Write a function to find the nth newman\u2013shanks\u2013williams prime number.",
            "asserts": "assert newman_prime(3) == 7\nassert newman_prime(4) == 17\nassert newman_prime(5) == 41",
            "input_reasoning": "newman_prime(3)",
            "output_reasoning": "7"
        },
        "458": {
            "nl": "Write a function to find the area of a rectangle.",
            "asserts": "assert rectangle_area(10,20)==200\nassert rectangle_area(10,5)==50\nassert rectangle_area(4,2)==8",
            "input_reasoning": "rectangle_area(10,20)",
            "output_reasoning": "200"
        },
        "725": {
            "nl": "Write a function to extract values between quotation marks \" \" of the given string.",
            "asserts": "assert extract_quotation('Cortex \"A53\" Based \"multi\" tasking \"Processor\"') == ['A53', 'multi', 'Processor']\nassert extract_quotation('Cast your \"favorite\" entertainment \"apps\"') == ['favorite', 'apps']\nassert extract_quotation('Watch content \"4k Ultra HD\" resolution with \"HDR 10\" Support') == ['4k Ultra HD', 'HDR 10']\nassert extract_quotation(\"Watch content '4k Ultra HD' resolution with 'HDR 10' Support\") == []",
            "input_reasoning": "extract_quotation('Cortex \"A53\" Based \"multi\" tasking \"Processor\"')",
            "output_reasoning": "['A53', 'multi', 'Processor']"
        },
        "776": {
            "nl": "Write a function to count those characters which have vowels as their neighbors in the given string.",
            "asserts": "assert count_vowels('bestinstareels') == 7\nassert count_vowels('partofthejourneyistheend') == 12\nassert count_vowels('amazonprime') == 5",
            "input_reasoning": "count_vowels('bestinstareels')",
            "output_reasoning": "7"
        },
        "445": {
            "nl": "Write a function to perform index wise multiplication of tuple elements in the given two tuples.",
            "asserts": "assert index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3)) ) == ((6, 21), (12, 45), (2, 9), (7, 30))\nassert index_multiplication(((2, 4), (5, 6), (3, 10), (2, 11)),((7, 8), (4, 10), (2, 2), (8, 4)) ) == ((14, 32), (20, 60), (6, 20), (16, 44))\nassert index_multiplication(((3, 5), (6, 7), (4, 11), (3, 12)),((8, 9), (5, 11), (3, 3), (9, 5)) ) == ((24, 45), (30, 77), (12, 33), (27, 60))",
            "input_reasoning": "index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3)) )",
            "output_reasoning": "((6, 21), (12, 45), (2, 9), (7, 30))"
        },
        "599": {
            "nl": "Write a function to find sum and average of first n natural numbers.",
            "asserts": "assert sum_average(10)==(55, 5.5)\nassert sum_average(15)==(120, 8.0)\nassert sum_average(20)==(210, 10.5)",
            "input_reasoning": "sum_average(10)",
            "output_reasoning": "(55, 5.5)"
        },
        "104": {
            "nl": "Write a function to sort each sublist of strings in a given list of lists.",
            "asserts": "assert sort_sublists(([\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]))==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\nassert sort_sublists(([\" red \",\"green\" ],[\"blue \",\" black\"],[\" orange\",\"brown\"]))==[[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]\nassert sort_sublists(([\"zilver\",\"gold\"], [\"magnesium\",\"aluminium\"], [\"steel\", \"bronze\"]))==[['gold', 'zilver'],['aluminium', 'magnesium'], ['bronze', 'steel']]",
            "input_reasoning": "sort_sublists(([\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]))",
            "output_reasoning": "[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]"
        },
        "92": {
            "nl": "Write a function to check whether the given number is undulating or not.",
            "asserts": "assert is_undulating(1212121) == True\nassert is_undulating(1991) == False\nassert is_undulating(121) == True",
            "input_reasoning": "is_undulating(1212121)",
            "output_reasoning": "True"
        },
        "291": {
            "nl": "Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.",
            "asserts": "assert count_no_of_ways(2, 4) == 16\nassert count_no_of_ways(3, 2) == 6\nassert count_no_of_ways(4, 4) == 228",
            "input_reasoning": "count_no_of_ways(2, 4)",
            "output_reasoning": "16"
        },
        "409": {
            "nl": "Write a function to find the minimum product from the pairs of tuples within a given list.",
            "asserts": "assert min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==8\nassert min_product_tuple([(10,20), (15,2), (5,10)] )==30\nassert min_product_tuple([(11,44), (10,15), (20,5), (12, 9)] )==100",
            "input_reasoning": "min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )",
            "output_reasoning": "8"
        },
        "637": {
            "nl": "Write a function to check whether the given amount has no profit and no loss",
            "asserts": "assert noprofit_noloss(1500,1200)==False\nassert noprofit_noloss(100,100)==True\nassert noprofit_noloss(2000,5000)==False",
            "input_reasoning": "noprofit_noloss(1500,1200)",
            "output_reasoning": "False"
        },
        "126": {
            "nl": "Write a python function to find the sum of common divisors of two given numbers.",
            "asserts": "assert sum(10,15) == 6\nassert sum(100,150) == 93\nassert sum(4,6) == 3",
            "input_reasoning": "sum(10,15)",
            "output_reasoning": "6"
        },
        "295": {
            "nl": "Write a function to return the sum of all divisors of a number.",
            "asserts": "assert sum_div(8)==7\nassert sum_div(12)==16\nassert sum_div(7)==1",
            "input_reasoning": "sum_div(8)",
            "output_reasoning": "7"
        },
        "65": {
            "nl": "Write a function to flatten a list and sum all of its elements.",
            "asserts": "assert recursive_list_sum(([1, 2, [3,4],[5,6]]))==21\nassert recursive_list_sum(([7, 10, [15,14],[19,41]]))==106\nassert recursive_list_sum(([10, 20, [30,40],[50,60]]))==210",
            "input_reasoning": "recursive_list_sum(([1, 2, [3,4],[5,6]]))",
            "output_reasoning": "21"
        },
        "764": {
            "nl": "Write a python function to count number of digits in a given string.",
            "asserts": "assert number_ctr('program2bedone') == 1\nassert number_ctr('3wonders') == 1\nassert number_ctr('123') == 3\nassert number_ctr('3wond-1ers2') == 3",
            "input_reasoning": "number_ctr('program2bedone')",
            "output_reasoning": "1"
        },
        "758": {
            "nl": "Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.",
            "asserts": "assert unique_sublists([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]] )=={(1, 3): 2, (5, 7): 2, (13, 15, 17): 1, (9, 11): 1}\nassert unique_sublists([['green', 'orange'], ['black'], ['green', 'orange'], ['white']])=={('green', 'orange'): 2, ('black',): 1, ('white',): 1}\nassert unique_sublists([[10, 20, 30, 40], [60, 70, 50, 50], [90, 100, 200]])=={(10, 20, 30, 40): 1, (60, 70, 50, 50): 1, (90, 100, 200): 1}\nassert unique_sublists([['john']])=={('john',): 1}",
            "input_reasoning": "unique_sublists([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]] )",
            "output_reasoning": "{(1, 3): 2, (5, 7): 2, (13, 15, 17): 1, (9, 11): 1}"
        },
        "408": {
            "nl": "Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.",
            "asserts": "assert k_smallest_pairs([1,3,7],[2,4,6],2)==[[1, 2], [1, 4]]\nassert k_smallest_pairs([1,3,7],[2,4,6],1)==[[1, 2]]\nassert k_smallest_pairs([1,3,7],[2,4,6],7)==[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]",
            "input_reasoning": "k_smallest_pairs([1,3,7],[2,4,6],2)",
            "output_reasoning": "[[1, 2], [1, 4]]"
        },
        "622": {
            "nl": "Write a function to find the median of two sorted lists of same size.",
            "asserts": "assert get_median([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\nassert get_median([2, 4, 8, 9], [7, 13, 19, 28], 4) == 8.5\nassert get_median([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6) == 25.0",
            "input_reasoning": "get_median([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5)",
            "output_reasoning": "16.0"
        },
        "62": {
            "nl": "Write a python function to find smallest number in a list.",
            "asserts": "assert smallest_num([10, 20, 1, 45, 99]) == 1\nassert smallest_num([1, 2, 3]) == 1\nassert smallest_num([45, 46, 50, 60]) == 45",
            "input_reasoning": "smallest_num([10, 20, 1, 45, 99])",
            "output_reasoning": "1"
        },
        "132": {
            "nl": "Write a function to convert a tuple to a string.",
            "asserts": "assert tup_string(('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's'))==(\"exercises\")\nassert tup_string(('p','y','t','h','o','n'))==(\"python\")\nassert tup_string(('p','r','o','g','r','a','m'))==(\"program\")",
            "input_reasoning": "tup_string(('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's'))",
            "output_reasoning": "(\"exercises\")"
        },
        "784": {
            "nl": "Write a function to find the product of first even and odd number of a given list.",
            "asserts": "assert mul_even_odd([1,3,5,7,4,1,6,8])==4\nassert mul_even_odd([1,2,3,4,5,6,7,8,9,10])==2\nassert mul_even_odd([1,5,7,9,10])==10",
            "input_reasoning": "mul_even_odd([1,3,5,7,4,1,6,8])",
            "output_reasoning": "4"
        },
        "77": {
            "nl": "Write a python function to find whether a number is divisible by 11.",
            "asserts": "assert is_Diff (12345) == False\nassert is_Diff(1212112) == True\nassert is_Diff(1212) == False",
            "input_reasoning": "is_Diff (12345)",
            "output_reasoning": "False"
        },
        "644": {
            "nl": "Write a python function to reverse an array upto a given position.",
            "asserts": "assert reverse_Array_Upto_K([1, 2, 3, 4, 5, 6],4) == [4, 3, 2, 1, 5, 6]\nassert reverse_Array_Upto_K([4, 5, 6, 7], 2) == [5, 4, 6, 7]\nassert reverse_Array_Upto_K([9, 8, 7, 6, 5],3) == [7, 8, 9, 6, 5]",
            "input_reasoning": "reverse_Array_Upto_K([1, 2, 3, 4, 5, 6],4)",
            "output_reasoning": "[4, 3, 2, 1, 5, 6]"
        },
        "421": {
            "nl": "Write a function to concatenate each element of tuple by the delimiter.",
            "asserts": "assert concatenate_tuple((\"ID\", \"is\", 4, \"UTS\") ) == 'ID-is-4-UTS'\nassert concatenate_tuple((\"QWE\", \"is\", 4, \"RTY\") ) == 'QWE-is-4-RTY'\nassert concatenate_tuple((\"ZEN\", \"is\", 4, \"OP\") ) == 'ZEN-is-4-OP'",
            "input_reasoning": "concatenate_tuple((\"ID\", \"is\", 4, \"UTS\") )",
            "output_reasoning": "'ID-is-4-UTS'"
        },
        "262": {
            "nl": "Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.",
            "asserts": "assert split_two_parts([1,1,2,3,4,4,5,1],3)==([1, 1, 2], [3, 4, 4, 5, 1])\nassert split_two_parts(['a', 'b', 'c', 'd'],2)==(['a', 'b'], ['c', 'd'])\nassert split_two_parts(['p', 'y', 't', 'h', 'o', 'n'],4)==(['p', 'y', 't', 'h'], ['o', 'n'])",
            "input_reasoning": "split_two_parts([1,1,2,3,4,4,5,1],3)",
            "output_reasoning": "([1, 1, 2], [3, 4, 4, 5, 1])"
        },
        "417": {
            "nl": "Write a function to find common first element in given list of tuple.",
            "asserts": "assert group_tuples([('x', 'y'), ('x', 'z'), ('w', 't')]) == [('x', 'y', 'z'), ('w', 't')]\nassert group_tuples([('a', 'b'), ('a', 'c'), ('d', 'e')]) == [('a', 'b', 'c'), ('d', 'e')]\nassert group_tuples([('f', 'g'), ('f', 'g'), ('h', 'i')]) == [('f', 'g', 'g'), ('h', 'i')]",
            "input_reasoning": "group_tuples([('x', 'y'), ('x', 'z'), ('w', 't')])",
            "output_reasoning": "[('x', 'y', 'z'), ('w', 't')]"
        },
        "278": {
            "nl": "Write a function to find the number of elements that occurs before the tuple element in the given tuple.",
            "asserts": "assert count_first_elements((1, 5, 7, (4, 6), 10) ) == 3\nassert count_first_elements((2, 9, (5, 7), 11) ) == 2\nassert count_first_elements((11, 15, 5, 8, (2, 3), 8) ) == 4",
            "input_reasoning": "count_first_elements((1, 5, 7, (4, 6), 10) )",
            "output_reasoning": "3"
        },
        "476": {
            "nl": "Write a python function to find the sum of the largest and smallest value in a given array.",
            "asserts": "assert big_sum([1,2,3]) == 4\nassert big_sum([-1,2,3,4]) == 3\nassert big_sum([2,3,6]) == 8",
            "input_reasoning": "big_sum([1,2,3])",
            "output_reasoning": "4"
        },
        "240": {
            "nl": "Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.",
            "asserts": "assert replace_list([1, 3, 5, 7, 9, 10],[2, 4, 6, 8])==[1, 3, 5, 7, 9, 2, 4, 6, 8]\nassert replace_list([1,2,3,4,5],[5,6,7,8])==[1,2,3,4,5,6,7,8]\nassert replace_list([\"red\",\"blue\",\"green\"],[\"yellow\"])==[\"red\",\"blue\",\"yellow\"]",
            "input_reasoning": "replace_list([1, 3, 5, 7, 9, 10],[2, 4, 6, 8])",
            "output_reasoning": "[1, 3, 5, 7, 9, 2, 4, 6, 8]"
        },
        "741": {
            "nl": "Write a python function to check whether all the characters are same or not.",
            "asserts": "assert all_Characters_Same(\"python\") == False\nassert all_Characters_Same(\"aaa\") == True\nassert all_Characters_Same(\"data\") == False",
            "input_reasoning": "all_Characters_Same(\"python\")",
            "output_reasoning": "False"
        },
        "463": {
            "nl": "Write a function to find the maximum product subarray of the given array.",
            "asserts": "assert max_subarray_product([1, -2, -3, 0, 7, -8, -2]) == 112\nassert max_subarray_product([6, -3, -10, 0, 2]) == 180\nassert max_subarray_product([-2, -40, 0, -2, -3]) == 80",
            "input_reasoning": "max_subarray_product([1, -2, -3, 0, 7, -8, -2])",
            "output_reasoning": "112"
        },
        "79": {
            "nl": "Write a python function to check whether the length of the word is odd or not.",
            "asserts": "assert word_len(\"Hadoop\") == False\nassert word_len(\"great\") == True\nassert word_len(\"structure\") == True",
            "input_reasoning": "word_len(\"Hadoop\")",
            "output_reasoning": "False"
        },
        "120": {
            "nl": "Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.",
            "asserts": "assert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==36\nassert max_product_tuple([(10,20), (15,2), (5,10)] )==200\nassert max_product_tuple([(11,44), (10,15), (20,5), (12, 9)] )==484",
            "input_reasoning": "max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )",
            "output_reasoning": "36"
        },
        "75": {
            "nl": "Write a function to find tuples which have all elements divisible by k from the given list of tuples.",
            "asserts": "assert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == [(6, 24, 12)]\nassert find_tuples([(5, 25, 30), (4, 2, 3), (7, 8, 9)], 5) == [(5, 25, 30)]\nassert find_tuples([(7, 9, 16), (8, 16, 4), (19, 17, 18)], 4) == [(8, 16, 4)]",
            "input_reasoning": "find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6)",
            "output_reasoning": "[(6, 24, 12)]"
        },
        "244": {
            "nl": "Write a python function to find the next perfect square greater than a given number.",
            "asserts": "assert next_Perfect_Square(35) == 36\nassert next_Perfect_Square(6) == 9\nassert next_Perfect_Square(9) == 16",
            "input_reasoning": "next_Perfect_Square(35)",
            "output_reasoning": "36"
        },
        "434": {
            "nl": "Write a function that matches a string that has an a followed by one or more b's.",
            "asserts": "assert text_match_one(\"ac\")==False\nassert text_match_one(\"dc\")==False\nassert text_match_one(\"abba\")==True",
            "input_reasoning": "text_match_one(\"ac\")",
            "output_reasoning": "False"
        },
        "721": {
            "nl": "Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.",
            "asserts": "assert maxAverageOfPath([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\nassert maxAverageOfPath([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2\nassert maxAverageOfPath([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2\nassert maxAverageOfPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8",
            "input_reasoning": "maxAverageOfPath([[1, 2, 3], [6, 5, 4], [7, 3, 9]])",
            "output_reasoning": "5.2"
        },
        "129": {
            "nl": "Write a function to calculate whether the matrix is a magic square.",
            "asserts": "assert magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True\nassert magic_square_test([[2, 7, 6], [9, 5, 1], [4, 3, 8]])==True\nassert magic_square_test([[2, 7, 6], [9, 5, 1], [4, 3, 7]])==False",
            "input_reasoning": "magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])",
            "output_reasoning": "True"
        },
        "557": {
            "nl": "Write a function to toggle the case of all characters in a string.",
            "asserts": "assert toggle_string(\"Python\")==(\"pYTHON\")\nassert toggle_string(\"Pangram\")==(\"pANGRAM\")\nassert toggle_string(\"LIttLE\")==(\"liTTle\")",
            "input_reasoning": "toggle_string(\"Python\")",
            "output_reasoning": "(\"pYTHON\")"
        },
        "754": {
            "nl": "We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.",
            "asserts": "assert extract_index_list([1, 1, 3, 4, 5, 6, 7],[0, 1, 2, 3, 4, 5, 7],[0, 1, 2, 3, 4, 5, 7])==[1, 7]\nassert extract_index_list([1, 1, 3, 4, 5, 6, 7],[0, 1, 2, 3, 4, 6, 5],[0, 1, 2, 3, 4, 6, 7])==[1, 6]\nassert extract_index_list([1, 1, 3, 4, 6, 5, 6],[0, 1, 2, 3, 4, 5, 7],[0, 1, 2, 3, 4, 5, 7])==[1, 5]\nassert extract_index_list([1, 2, 3, 4, 6, 6, 6],[0, 1, 2, 3, 4, 5, 7],[0, 1, 2, 3, 4, 5, 7])==[]",
            "input_reasoning": "extract_index_list([1, 1, 3, 4, 5, 6, 7],[0, 1, 2, 3, 4, 5, 7],[0, 1, 2, 3, 4, 5, 7])",
            "output_reasoning": "[1, 7]"
        },
        "264": {
            "nl": "Write a function to calculate a dog's age in dog's years.",
            "asserts": "assert dog_age(12)==61\nassert dog_age(15)==73\nassert dog_age(24)==109",
            "input_reasoning": "dog_age(12)",
            "output_reasoning": "61"
        },
        "808": {
            "nl": "Write a function to check if the given tuples contain the k or not.",
            "asserts": "assert check_K((10, 4, 5, 6, 8), 6) == True\nassert check_K((1, 2, 3, 4, 5, 6), 7) == False\nassert check_K((7, 8, 9, 44, 11, 12), 11) == True",
            "input_reasoning": "check_K((10, 4, 5, 6, 8), 6)",
            "output_reasoning": "True"
        },
        "782": {
            "nl": "Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/",
            "asserts": "assert odd_length_sum([1,2,4]) == 14\nassert odd_length_sum([1,2,1,2]) == 15\nassert odd_length_sum([1,7]) == 8",
            "input_reasoning": "odd_length_sum([1,2,4])",
            "output_reasoning": "14"
        },
        "450": {
            "nl": "Write a function to extract specified size of strings from a given list of string values.",
            "asserts": "assert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,8)==['practice', 'solution']\nassert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,6)==['Python']\nassert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,9)==['exercises']",
            "input_reasoning": "extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,8)",
            "output_reasoning": "['practice', 'solution']"
        },
        "462": {
            "nl": "Write a function to find all possible combinations of the elements of a given list.",
            "asserts": "assert combinations_list(['orange', 'red', 'green', 'blue'])==[[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']]\nassert combinations_list(['red', 'green', 'blue', 'white', 'black', 'orange'])==[[], ['red'], ['green'], ['green', 'red'], ['blue'], ['blue', 'red'], ['blue', 'green'], ['blue', 'green', 'red'], ['white'], ['white', 'red'], ['white', 'green'], ['white', 'green', 'red'], ['white', 'blue'], ['white', 'blue', 'red'], ['white', 'blue', 'green'], ['white', 'blue', 'green', 'red'], ['black'], ['black', 'red'], ['black', 'green'], ['black', 'green', 'red'], ['black', 'blue'], ['black', 'blue', 'red'], ['black', 'blue', 'green'], ['black', 'blue', 'green', 'red'], ['black', 'white'], ['black', 'white', 'red'], ['black', 'white', 'green'], ['black', 'white', 'green', 'red'], ['black', 'white', 'blue'], ['black', 'white', 'blue', 'red'], ['black', 'white', 'blue', 'green'], ['black', 'white', 'blue', 'green', 'red'], ['orange'], ['orange', 'red'], ['orange', 'green'], ['orange', 'green', 'red'], ['orange', 'blue'], ['orange', 'blue', 'red'], ['orange', 'blue', 'green'], ['orange', 'blue', 'green', 'red'], ['orange', 'white'], ['orange', 'white', 'red'], ['orange', 'white', 'green'], ['orange', 'white', 'green', 'red'], ['orange', 'white', 'blue'], ['orange', 'white', 'blue', 'red'], ['orange', 'white', 'blue', 'green'], ['orange', 'white', 'blue', 'green', 'red'], ['orange', 'black'], ['orange', 'black', 'red'], ['orange', 'black', 'green'], ['orange', 'black', 'green', 'red'], ['orange', 'black', 'blue'], ['orange', 'black', 'blue', 'red'], ['orange', 'black', 'blue', 'green'], ['orange', 'black', 'blue', 'green', 'red'], ['orange', 'black', 'white'], ['orange', 'black', 'white', 'red'], ['orange', 'black', 'white', 'green'], ['orange', 'black', 'white', 'green', 'red'], ['orange', 'black', 'white', 'blue'], ['orange', 'black', 'white', 'blue', 'red'], ['orange', 'black', 'white', 'blue', 'green'], ['orange', 'black', 'white', 'blue', 'green', 'red']]\nassert combinations_list(['red', 'green', 'black', 'orange'])==[[], ['red'], ['green'], ['green', 'red'], ['black'], ['black', 'red'], ['black', 'green'], ['black', 'green', 'red'], ['orange'], ['orange', 'red'], ['orange', 'green'], ['orange', 'green', 'red'], ['orange', 'black'], ['orange', 'black', 'red'], ['orange', 'black', 'green'], ['orange', 'black', 'green', 'red']]",
            "input_reasoning": "combinations_list(['orange', 'red', 'green', 'blue'])",
            "output_reasoning": "[[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']]"
        },
        "245": {
            "nl": "Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.",
            "asserts": "assert max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194\nassert max_sum([80, 60, 30, 40, 20, 10]) == 210\nassert max_sum([2, 3 ,14, 16, 21, 23, 29, 30]) == 138",
            "input_reasoning": "max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9])",
            "output_reasoning": "194"
        },
        "18": {
            "nl": "Write a function to remove characters from the first string which are present in the second string.",
            "asserts": "assert remove_dirty_chars(\"probasscurve\", \"pros\") == 'bacuve'\nassert remove_dirty_chars(\"digitalindia\", \"talent\") == 'digiidi'\nassert remove_dirty_chars(\"exoticmiles\", \"toxic\") == 'emles'",
            "input_reasoning": "remove_dirty_chars(\"probasscurve\", \"pros\")",
            "output_reasoning": "'bacuve'"
        },
        "268": {
            "nl": "Write a function to find the n'th star number.",
            "asserts": "assert find_star_num(3) == 37\nassert find_star_num(4) == 73\nassert find_star_num(5) == 121",
            "input_reasoning": "find_star_num(3)",
            "output_reasoning": "37"
        },
        "269": {
            "nl": "Write a function to find the ascii value of a character.",
            "asserts": "assert ascii_value('A')==65\nassert ascii_value('R')==82\nassert ascii_value('S')==83",
            "input_reasoning": "ascii_value('A')",
            "output_reasoning": "65"
        },
        "752": {
            "nl": "Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...",
            "asserts": "assert jacobsthal_num(5) == 11\nassert jacobsthal_num(2) == 1\nassert jacobsthal_num(4) == 5\nassert jacobsthal_num(13) == 2731",
            "input_reasoning": "jacobsthal_num(5)",
            "output_reasoning": "11"
        },
        "781": {
            "nl": "Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php",
            "asserts": "assert count_divisors(10)\nassert not count_divisors(100)\nassert count_divisors(125)",
            "input_reasoning": "count_divisors(10)",
            "output_reasoning": "True"
        },
        "627": {
            "nl": "Write a python function to find the smallest missing number from a sorted list of natural numbers.",
            "asserts": "assert find_First_Missing([0,1,2,3]) == 4\nassert find_First_Missing([0,1,2,6,9]) == 3\nassert find_First_Missing([2,3,5,8,9]) == 0",
            "input_reasoning": "find_First_Missing([0,1,2,3])",
            "output_reasoning": "4"
        },
        "565": {
            "nl": "Write a python function to split a string into characters.",
            "asserts": "assert split('python') == ['p','y','t','h','o','n']\nassert split('Name') == ['N','a','m','e']\nassert split('program') == ['p','r','o','g','r','a','m']",
            "input_reasoning": "split('python')",
            "output_reasoning": "['p','y','t','h','o','n']"
        },
        "590": {
            "nl": "Write a function to convert polar coordinates to rectangular coordinates.",
            "asserts": "assert polar_rect(3,4)==((5.0, 0.9272952180016122), (-2+2.4492935982947064e-16j))\nassert polar_rect(4,7)==((8.06225774829855, 1.0516502125483738), (-2+2.4492935982947064e-16j))\nassert polar_rect(15,17)==((22.67156809750927, 0.8478169733934057), (-2+2.4492935982947064e-16j))",
            "input_reasoning": "polar_rect(3,4)",
            "output_reasoning": "((5.0, 0.9272952180016122), (-2+2.4492935982947064e-16j))"
        },
        "797": {
            "nl": "Write a python function to find the sum of all odd natural numbers within the range l and r.",
            "asserts": "assert sum_in_range(2,5) == 8\nassert sum_in_range(5,7) == 12\nassert sum_in_range(7,13) == 40",
            "input_reasoning": "sum_in_range(2,5)",
            "output_reasoning": "8"
        },
        "425": {
            "nl": "Write a function to count the number of sublists containing a particular element.",
            "asserts": "assert count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]],1)==3\nassert count_element_in_list([['A', 'B'], ['A', 'C'], ['A', 'D', 'E'], ['B', 'C', 'D']],'A')==3\nassert count_element_in_list([['A', 'B'], ['A', 'C'], ['A', 'D', 'E'], ['B', 'C', 'D']],'E')==1",
            "input_reasoning": "count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]],1)",
            "output_reasoning": "3"
        },
        "141": {
            "nl": "Write a function to sort a list of elements.",
            "asserts": "assert pancake_sort([15, 79, 25, 38, 69]) == [15, 25, 38, 69, 79]\nassert pancake_sort([98, 12, 54, 36, 85]) == [12, 36, 54, 85, 98]\nassert pancake_sort([41, 42, 32, 12, 23]) == [12, 23, 32, 41, 42]",
            "input_reasoning": "pancake_sort([15, 79, 25, 38, 69])",
            "output_reasoning": "[15, 25, 38, 69, 79]"
        },
        "287": {
            "nl": "Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.",
            "asserts": "assert square_Sum(2) == 20\nassert square_Sum(3) == 56\nassert square_Sum(4) == 120",
            "input_reasoning": "square_Sum(2)",
            "output_reasoning": "20"
        },
        "3": {
            "nl": "Write a python function to identify non-prime numbers.",
            "asserts": "assert is_not_prime(2) == False\nassert is_not_prime(10) == True\nassert is_not_prime(35) == True\nassert is_not_prime(37) == False",
            "input_reasoning": "is_not_prime(2)",
            "output_reasoning": "False"
        },
        "604": {
            "nl": "Write a function to reverse words seperated by spaces in a given string.",
            "asserts": "assert reverse_words(\"python program\")==(\"program python\")\nassert reverse_words(\"java language\")==(\"language java\")\nassert reverse_words(\"indian man\")==(\"man indian\")",
            "input_reasoning": "reverse_words(\"python program\")",
            "output_reasoning": "(\"program python\")"
        },
        "115": {
            "nl": "Write a function to check whether all dictionaries in a list are empty or not.",
            "asserts": "assert empty_dit([{},{},{}])==True\nassert empty_dit([{1,2},{},{}])==False\nassert empty_dit({})==True",
            "input_reasoning": "empty_dit([{},{},{}])",
            "output_reasoning": "True"
        },
        "582": {
            "nl": "Write a function to check if a dictionary is empty",
            "asserts": "assert my_dict({10})==False\nassert my_dict({11})==False\nassert my_dict({})==True",
            "input_reasoning": "my_dict({10})",
            "output_reasoning": "False"
        },
        "588": {
            "nl": "Write a python function to find the difference between largest and smallest value in a given list.",
            "asserts": "assert big_diff([1,2,3,4]) == 3\nassert big_diff([4,5,12]) == 8\nassert big_diff([9,2,3]) == 7",
            "input_reasoning": "big_diff([1,2,3,4])",
            "output_reasoning": "3"
        },
        "777": {
            "nl": "Write a python function to find the sum of non-repeated elements in a given list.",
            "asserts": "assert find_sum([1,2,3,1,1,4,5,6]) == 21\nassert find_sum([1,10,9,4,2,10,10,45,4]) == 71\nassert find_sum([12,10,9,45,2,10,10,45,10]) == 78",
            "input_reasoning": "find_sum([1,2,3,1,1,4,5,6])",
            "output_reasoning": "21"
        },
        "597": {
            "nl": "Write a function to find kth element from the given two sorted arrays.",
            "asserts": "assert find_kth([2, 3, 6, 7, 9], [1, 4, 8, 10], 5) == 6\nassert find_kth([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 7) == 256\nassert find_kth([3, 4, 7, 8, 10], [2, 5, 9, 11], 6) == 8",
            "input_reasoning": "find_kth([2, 3, 6, 7, 9], [1, 4, 8, 10], 5)",
            "output_reasoning": "6"
        },
        "640": {
            "nl": "Write a function to remove the parenthesis and what is inbetween them from a string.",
            "asserts": "assert remove_parenthesis([\"python (chrome)\"])==(\"python\")\nassert remove_parenthesis([\"string(.abc)\"])==(\"string\")\nassert remove_parenthesis([\"alpha(num)\"])==(\"alpha\")",
            "input_reasoning": "remove_parenthesis([\"python (chrome)\"])",
            "output_reasoning": "(\"python\")"
        },
        "574": {
            "nl": "Write a function to find the surface area of a cylinder.",
            "asserts": "assert surfacearea_cylinder(10,5)==942.45\nassert surfacearea_cylinder(4,5)==226.18800000000002\nassert surfacearea_cylinder(4,10)==351.848",
            "input_reasoning": "surfacearea_cylinder(10,5)",
            "output_reasoning": "942.45"
        },
        "452": {
            "nl": "Write a function that gives loss amount on a sale if the given amount has loss else return 0.",
            "asserts": "assert loss_amount(1500,1200)==0\nassert loss_amount(100,200)==100\nassert loss_amount(2000,5000)==3000",
            "input_reasoning": "loss_amount(1500,1200)",
            "output_reasoning": "0"
        },
        "580": {
            "nl": "Write a function to remove uneven elements in the nested mixed tuple.",
            "asserts": "assert extract_even((4, 5, (7, 6, (2, 4)), 6, 8)) == (4, (6, (2, 4)), 6, 8)\nassert extract_even((5, 6, (8, 7, (4, 8)), 7, 9)) == (6, (8, (4, 8)))\nassert extract_even((5, 6, (9, 8, (4, 6)), 8, 10)) == (6, (8, (4, 6)), 8, 10)",
            "input_reasoning": "extract_even((4, 5, (7, 6, (2, 4)), 6, 8))",
            "output_reasoning": "(4, (6, (2, 4)), 6, 8)"
        },
        "401": {
            "nl": "Write a function to perform index wise addition of tuple elements in the given two nested tuples.",
            "asserts": "assert add_nested_tuples(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\nassert add_nested_tuples(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))\nassert add_nested_tuples(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))",
            "input_reasoning": "add_nested_tuples(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3)))",
            "output_reasoning": "((7, 10), (7, 14), (3, 10), (8, 13))"
        },
        "766": {
            "nl": "Write a function to return a list of all pairs of consecutive items in a given list.",
            "asserts": "assert pair_wise([1,1,2,3,3,4,4,5])==[(1, 1), (1, 2), (2, 3), (3, 3), (3, 4), (4, 4), (4, 5)]\nassert pair_wise([1,5,7,9,10])==[(1, 5), (5, 7), (7, 9), (9, 10)]\nassert pair_wise([5,1,9,7,10])==[(5, 1), (1, 9), (9, 7), (7, 10)]\nassert pair_wise([1,2,3,4,5,6,7,8,9,10])==[(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9), (9, 10)]",
            "input_reasoning": "pair_wise([1,1,2,3,3,4,4,5])",
            "output_reasoning": "[(1, 1), (1, 2), (2, 3), (3, 3), (3, 4), (4, 4), (4, 5)]"
        },
        "460": {
            "nl": "Write a python function to get the first element of each sublist.",
            "asserts": "assert Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]\nassert Extract([[1,2,3],[4, 5]]) == [1,4]\nassert Extract([[9,8,1],[1,2]]) == [9,1]",
            "input_reasoning": "Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]])",
            "output_reasoning": "[1, 3, 6]"
        },
        "611": {
            "nl": "Write a function which given a matrix represented as a list of lists returns the max of the n'th column.",
            "asserts": "assert max_of_nth([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2) == 19\nassert max_of_nth([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1) == 10\nassert max_of_nth([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1) == 11",
            "input_reasoning": "max_of_nth([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2)",
            "output_reasoning": "19"
        },
        "399": {
            "nl": "Write a function to perform the mathematical bitwise xor operation across the given tuples.",
            "asserts": "assert bitwise_xor((10, 4, 6, 9), (5, 2, 3, 3)) == (15, 6, 5, 10)\nassert bitwise_xor((11, 5, 7, 10), (6, 3, 4, 4)) == (13, 6, 3, 14)\nassert bitwise_xor((12, 6, 8, 11), (7, 4, 5, 6)) == (11, 2, 13, 13)",
            "input_reasoning": "bitwise_xor((10, 4, 6, 9), (5, 2, 3, 3))",
            "output_reasoning": "(15, 6, 5, 10)"
        },
        "605": {
            "nl": "Write a function to check if the given integer is a prime number.",
            "asserts": "assert prime_num(13)==True\nassert prime_num(7)==True\nassert prime_num(-1010)==False",
            "input_reasoning": "prime_num(13)",
            "output_reasoning": "True"
        },
        "413": {
            "nl": "Write a function to extract the nth element from a given list of tuples.",
            "asserts": "assert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']\nassert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,2)==[99, 96, 94, 98]\nassert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)],1)==[98, 97, 91, 94]",
            "input_reasoning": "extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)",
            "output_reasoning": "['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']"
        },
        "437": {
            "nl": "Write a function to remove odd characters in a string.",
            "asserts": "assert remove_odd(\"python\")==(\"yhn\")\nassert remove_odd(\"program\")==(\"rga\")\nassert remove_odd(\"language\")==(\"agae\")",
            "input_reasoning": "remove_odd(\"python\")",
            "output_reasoning": "(\"yhn\")"
        },
        "167": {
            "nl": "Write a python function to find the smallest power of 2 greater than or equal to n.",
            "asserts": "assert next_power_of_2(0) == 1\nassert next_power_of_2(5) == 8\nassert next_power_of_2(17) == 32",
            "input_reasoning": "next_power_of_2(0)",
            "output_reasoning": "1"
        },
        "456": {
            "nl": "Write a function to reverse each string in a given list of string values.",
            "asserts": "assert reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black'])==['deR', 'neerG', 'eulB', 'etihW', 'kcalB']\nassert reverse_string_list(['john','amal','joel','george'])==['nhoj','lama','leoj','egroeg']\nassert reverse_string_list(['jack','john','mary'])==['kcaj','nhoj','yram']",
            "input_reasoning": "reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black'])",
            "output_reasoning": "['deR', 'neerG', 'eulB', 'etihW', 'kcalB']"
        },
        "229": {
            "nl": "Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.",
            "asserts": "assert re_arrange_array([-1, 2, -3, 4, 5, 6, -7, 8, 9], 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9]\nassert re_arrange_array([12, -14, -26, 13, 15], 5) == [-14, -26, 12, 13, 15]\nassert re_arrange_array([10, 24, 36, -42, -39, -78, 85], 7) == [-42, -39, -78, 10, 24, 36, 85]",
            "input_reasoning": "re_arrange_array([-1, 2, -3, 4, 5, 6, -7, 8, 9], 9)",
            "output_reasoning": "[-1, -3, -7, 4, 5, 6, 2, 8, 9]"
        },
        "576": {
            "nl": "Write a python function to check whether a list is sublist of another or not.",
            "asserts": "assert is_Sub_Array([1,4,3,5],[1,2]) == False\nassert is_Sub_Array([1,2,1],[1,2,1]) == True\nassert is_Sub_Array([1,0,2,2],[2,2,0]) ==False",
            "input_reasoning": "is_Sub_Array([1,4,3,5],[1,2])",
            "output_reasoning": "False"
        },
        "625": {
            "nl": "Write a python function to interchange the first and last element in a given list.",
            "asserts": "assert swap_List([1,2,3]) == [3,2,1]\nassert swap_List([1,2,3,4,4]) == [4,2,3,4,1]\nassert swap_List([4,5,6]) == [6,5,4]",
            "input_reasoning": "swap_List([1,2,3])",
            "output_reasoning": "[3,2,1]"
        },
        "270": {
            "nl": "Write a python function to find the sum of even numbers at even positions of a list.",
            "asserts": "assert sum_even_and_even_index([5, 6, 12, 1, 18, 8]) == 30\nassert sum_even_and_even_index([3, 20, 17, 9, 2, 10, 18, 13, 6, 18]) == 26\nassert sum_even_and_even_index([5, 6, 12, 1]) == 12",
            "input_reasoning": "sum_even_and_even_index([5, 6, 12, 1, 18, 8])",
            "output_reasoning": "30"
        },
        "280": {
            "nl": "Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).",
            "asserts": "assert sequential_search([11,23,58,31,56,77,43,12,65,19],31) == (True, 3)\nassert sequential_search([12, 32, 45, 62, 35, 47, 44, 61],61) == (True, 7)\nassert sequential_search([9, 10, 17, 19, 22, 39, 48, 56],48) == (True, 6)",
            "input_reasoning": "sequential_search([11,23,58,31,56,77,43,12,65,19],31)",
            "output_reasoning": "(True, 3)"
        },
        "453": {
            "nl": "Write a python function to find the sum of even factors of a number.",
            "asserts": "assert sumofFactors(18) == 26\nassert sumofFactors(30) == 48\nassert sumofFactors(6) == 8",
            "input_reasoning": "sumofFactors(18)",
            "output_reasoning": "26"
        },
        "390": {
            "nl": "Write a function to apply a given format string to all of the elements in a list.",
            "asserts": "assert add_string([1,2,3,4],'temp{0}')==['temp1', 'temp2', 'temp3', 'temp4']\nassert add_string(['a','b','c','d'], 'python{0}')==[ 'pythona', 'pythonb', 'pythonc', 'pythond']\nassert add_string([5,6,7,8],'string{0}')==['string5', 'string6', 'string7', 'string8']",
            "input_reasoning": "add_string([1,2,3,4],'temp{0}')",
            "output_reasoning": "['temp1', 'temp2', 'temp3', 'temp4']"
        },
        "103": {
            "nl": "Write a function to find the Eulerian number a(n, m).",
            "asserts": "assert eulerian_num(3, 1) == 4\nassert eulerian_num(4, 1) == 11\nassert eulerian_num(5, 3) == 26",
            "input_reasoning": "eulerian_num(3, 1)",
            "output_reasoning": "4"
        },
        "307": {
            "nl": "Write a function to get a colon of a tuple.",
            "asserts": "assert colon_tuplex((\"HELLO\", 5, [], True) ,2,50)==(\"HELLO\", 5, [50], True)\nassert colon_tuplex((\"HELLO\", 5, [], True) ,2,100)==((\"HELLO\", 5, [100],True))\nassert colon_tuplex((\"HELLO\", 5, [], True) ,2,500)==(\"HELLO\", 5, [500], True)",
            "input_reasoning": "colon_tuplex((\"HELLO\", 5, [], True) ,2,50)",
            "output_reasoning": "(\"HELLO\", 5, [50], True)"
        },
        "133": {
            "nl": "Write a function to calculate the sum of the negative numbers of a given list of numbers.",
            "asserts": "assert sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17])==-32\nassert sum_negativenum([10,15,-14,13,-18,12,-20])==-52\nassert sum_negativenum([19, -65, 57, 39, 152,-639, 121, 44, 90, -190])==-894",
            "input_reasoning": "sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17])",
            "output_reasoning": "-32"
        },
        "273": {
            "nl": "Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.",
            "asserts": "assert substract_elements((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\nassert substract_elements((11, 2, 3), (24, 45 ,16)) == (-13, -43, -13)\nassert substract_elements((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)",
            "input_reasoning": "substract_elements((10, 4, 5), (2, 5, 18))",
            "output_reasoning": "(8, -1, -13)"
        },
        "562": {
            "nl": "Write a python function to find the length of the longest sublists.",
            "asserts": "assert Find_Max_Length([[1],[1,4],[5,6,7,8]]) == 4\nassert Find_Max_Length([[0,1],[2,2,],[3,2,1]]) == 3\nassert Find_Max_Length([[7],[22,23],[13,14,15],[10,20,30,40,50]]) == 5",
            "input_reasoning": "Find_Max_Length([[1],[1,4],[5,6,7,8]])",
            "output_reasoning": "4"
        },
        "598": {
            "nl": "Write a function to check whether the given number is armstrong or not.",
            "asserts": "assert armstrong_number(153)==True\nassert armstrong_number(259)==False\nassert armstrong_number(4458)==False",
            "input_reasoning": "armstrong_number(153)",
            "output_reasoning": "True"
        },
        "242": {
            "nl": "Write a function to count the total number of characters in a string.",
            "asserts": "assert count_charac(\"python programming\")==18\nassert count_charac(\"language\")==8\nassert count_charac(\"words\")==5",
            "input_reasoning": "count_charac(\"python programming\")",
            "output_reasoning": "18"
        },
        "432": {
            "nl": "Write a function to find the median length of a trapezium.",
            "asserts": "assert median_trapezium(15,25,35)==20\nassert median_trapezium(10,20,30)==15\nassert median_trapezium(6,9,4)==7.5",
            "input_reasoning": "median_trapezium(15,25,35)",
            "output_reasoning": "20"
        },
        "418": {
            "nl": "Write a python function to find the element of a list having maximum length.",
            "asserts": "assert Find_Max([['A'],['A','B'],['A','B','C']]) == ['A','B','C']\nassert Find_Max([[1],[1,2],[1,2,3]]) == [1,2,3]\nassert Find_Max([[1,1],[1,2,3],[1,5,6,1]]) == [1,5,6,1]",
            "input_reasoning": "Find_Max([['A'],['A','B'],['A','B','C']])",
            "output_reasoning": "['A','B','C']"
        },
        "585": {
            "nl": "Write a function to find the n most expensive items in a given dataset.",
            "asserts": "assert expensive_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}],1)==[{'name': 'Item-2', 'price': 555.22}]\nassert expensive_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}, {'name': 'Item-3', 'price': 45.09}],2)==[{'name': 'Item-2', 'price': 555.22},{'name': 'Item-1', 'price': 101.1}]\nassert expensive_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}, {'name': 'Item-3', 'price': 45.09},{'name': 'Item-4', 'price': 22.75}],1)==[{'name': 'Item-2', 'price': 555.22}]",
            "input_reasoning": "expensive_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}],1)",
            "output_reasoning": "[{'name': 'Item-2', 'price': 555.22}]"
        },
        "239": {
            "nl": "Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.",
            "asserts": "assert get_total_number_of_sequences(10, 4) == 4\nassert get_total_number_of_sequences(5, 2) == 6\nassert get_total_number_of_sequences(16, 3) == 84",
            "input_reasoning": "get_total_number_of_sequences(10, 4)",
            "output_reasoning": "4"
        },
        "734": {
            "nl": "Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/",
            "asserts": "assert sum_Of_Subarray_Prod([1,2,3]) == 20\nassert sum_Of_Subarray_Prod([1,2]) == 5\nassert sum_Of_Subarray_Prod([1,2,3,4]) == 84",
            "input_reasoning": "sum_Of_Subarray_Prod([1,2,3])",
            "output_reasoning": "20"
        },
        "429": {
            "nl": "Write a function to extract the elementwise and tuples from the given two tuples.",
            "asserts": "assert and_tuples((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)\nassert and_tuples((1, 2, 3, 4), (5, 6, 7, 8)) == (1, 2, 3, 0)\nassert and_tuples((8, 9, 11, 12), (7, 13, 14, 17)) == (0, 9, 10, 0)",
            "input_reasoning": "and_tuples((10, 4, 6, 9), (5, 2, 3, 3))",
            "output_reasoning": "(0, 0, 2, 1)"
        },
        "569": {
            "nl": "Write a function to sort each sublist of strings in a given list of lists.",
            "asserts": "assert sort_sublists([['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange']])==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\nassert sort_sublists([['green', 'orange'], ['black'], ['green', 'orange'], ['white']])==[['green', 'orange'], ['black'], ['green', 'orange'], ['white']]\nassert sort_sublists([['a','b'],['d','c'],['g','h'] , ['f','e']])==[['a', 'b'], ['c', 'd'], ['g', 'h'], ['e', 'f']]",
            "input_reasoning": "sort_sublists([['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange']])",
            "output_reasoning": "[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]"
        },
        "135": {
            "nl": "Write a function to find the nth hexagonal number.",
            "asserts": "assert hexagonal_num(10) == 190\nassert hexagonal_num(5) == 45\nassert hexagonal_num(7) == 91",
            "input_reasoning": "hexagonal_num(10)",
            "output_reasoning": "190"
        },
        "412": {
            "nl": "Write a python function to remove odd numbers from a given list.",
            "asserts": "assert remove_odd([1,2,3]) == [2]\nassert remove_odd([2,4,6]) == [2,4,6]\nassert remove_odd([10,20,3]) == [10,20]",
            "input_reasoning": "remove_odd([1,2,3])",
            "output_reasoning": "[2]"
        },
        "441": {
            "nl": "Write a function to find the surface area of a cube of a given size.",
            "asserts": "assert surfacearea_cube(5)==150\nassert surfacearea_cube(3)==54\nassert surfacearea_cube(10)==600",
            "input_reasoning": "surfacearea_cube(5)",
            "output_reasoning": "150"
        },
        "563": {
            "nl": "Write a function to extract values between quotation marks from a string.",
            "asserts": "assert extract_values('\"Python\", \"PHP\", \"Java\"')==['Python', 'PHP', 'Java']\nassert extract_values('\"python\",\"program\",\"language\"')==['python','program','language']\nassert extract_values('\"red\",\"blue\",\"green\",\"yellow\"')==['red','blue','green','yellow']",
            "input_reasoning": "extract_values('\"Python\", \"PHP\", \"Java\"')",
            "output_reasoning": "['Python', 'PHP', 'Java']"
        },
        "74": {
            "nl": "Write a function to check whether it follows the sequence given in the patterns array.",
            "asserts": "assert is_samepatterns([\"red\",\"green\",\"green\"], [\"a\", \"b\", \"b\"])==True\nassert is_samepatterns([\"red\",\"green\",\"greenn\"], [\"a\",\"b\",\"b\"])==False\nassert is_samepatterns([\"red\",\"green\",\"greenn\"], [\"a\",\"b\"])==False",
            "input_reasoning": "is_samepatterns([\"red\",\"green\",\"green\"], [\"a\", \"b\", \"b\"])",
            "output_reasoning": "True"
        },
        "792": {
            "nl": "Write a python function to count the number of lists in a given number of lists.",
            "asserts": "assert count_list([[1, 3], [5, 7], [9, 11], [13, 15, 17]]) == 4\nassert count_list([[1,2],[2,3],[4,5]]) == 3\nassert count_list([[1,0],[2,0]]) == 2",
            "input_reasoning": "count_list([[1, 3], [5, 7], [9, 11], [13, 15, 17]])",
            "output_reasoning": "4"
        },
        "265": {
            "nl": "Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.",
            "asserts": "assert list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'],3)==[['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']]\nassert list_split([1,2,3,4,5,6,7,8,9,10,11,12,13,14],3)==[[1,4,7,10,13], [2,5,8,11,14], [3,6,9,12]]\nassert list_split(['python','java','C','C++','DBMS','SQL'],2)==[['python', 'C', 'DBMS'], ['java', 'C++', 'SQL']]",
            "input_reasoning": "list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'],3)",
            "output_reasoning": "[['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']]"
        },
        "427": {
            "nl": "Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.",
            "asserts": "assert change_date_format(\"2026-01-02\") == '02-01-2026'\nassert change_date_format(\"2020-11-13\") == '13-11-2020'\nassert change_date_format(\"2021-04-26\") == '26-04-2021'",
            "input_reasoning": "change_date_format(\"2026-01-02\")",
            "output_reasoning": "'02-01-2026'"
        },
        "750": {
            "nl": "Write a function to add the given tuple to the given list.",
            "asserts": "assert add_tuple([5, 6, 7], (9, 10)) == [5, 6, 7, 9, 10]\nassert add_tuple([6, 7, 8], (10, 11)) == [6, 7, 8, 10, 11]\nassert add_tuple([7, 8, 9], (11, 12)) == [7, 8, 9, 11, 12]",
            "input_reasoning": "add_tuple([5, 6, 7], (9, 10))",
            "output_reasoning": "[5, 6, 7, 9, 10]"
        },
        "751": {
            "nl": "Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/",
            "asserts": "assert check_min_heap([1, 2, 3, 4, 5, 6]) == True\nassert check_min_heap([2, 3, 4, 5, 10, 15]) == True\nassert check_min_heap([2, 10, 4, 5, 3, 15]) == False",
            "input_reasoning": "check_min_heap([1, 2, 3, 4, 5, 6])",
            "output_reasoning": "True"
        },
        "474": {
            "nl": "Write a function to replace characters in a string.",
            "asserts": "assert replace_char(\"polygon\",'y','l')==(\"pollgon\")\nassert replace_char(\"character\",'c','a')==(\"aharaater\")\nassert replace_char(\"python\",'l','a')==(\"python\")",
            "input_reasoning": "replace_char(\"polygon\",'y','l')",
            "output_reasoning": "(\"pollgon\")"
        },
        "164": {
            "nl": "Write a function to determine if the sum of the divisors of two integers are the same.",
            "asserts": "assert are_equivalent(36, 57) == False\nassert are_equivalent(2, 4) == False\nassert are_equivalent(23, 47) == True",
            "input_reasoning": "are_equivalent(36, 57)",
            "output_reasoning": "False"
        },
        "765": {
            "nl": "Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/",
            "asserts": "assert is_polite(7) == 11\nassert is_polite(4) == 7\nassert is_polite(9) == 13",
            "input_reasoning": "is_polite(7)",
            "output_reasoning": "11"
        },
        "297": {
            "nl": "Write a function to flatten a given nested list structure.",
            "asserts": "assert flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])==[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]\nassert flatten_list([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]])==[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]\nassert flatten_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]])==[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]",
            "input_reasoning": "flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])",
            "output_reasoning": "[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]"
        },
        "284": {
            "nl": "Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.",
            "asserts": "assert check_element([\"green\", \"orange\", \"black\", \"white\"],'blue')==False\nassert check_element([1,2,3,4],7)==False\nassert check_element([\"green\", \"green\", \"green\", \"green\"],'green')==True",
            "input_reasoning": "check_element([\"green\", \"orange\", \"black\", \"white\"],'blue')",
            "output_reasoning": "False"
        },
        "635": {
            "nl": "Write a function to sort the given list.",
            "asserts": "assert heap_sort([1, 3, 5, 7, 9, 2, 4, 6, 8, 0])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert heap_sort([25, 35, 22, 85, 14, 65, 75, 25, 58])==[14, 22, 25, 25, 35, 58, 65, 75, 85]\nassert heap_sort( [7, 1, 9, 5])==[1,5,7,9]",
            "input_reasoning": "heap_sort([1, 3, 5, 7, 9, 2, 4, 6, 8, 0])",
            "output_reasoning": "[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]"
        },
        "398": {
            "nl": "Write a function to compute the sum of digits of each number of a given list.",
            "asserts": "assert sum_of_digits([10,2,56])==14\nassert sum_of_digits([[10,20,4,5,'b',70,'a']])==19\nassert sum_of_digits([10,20,-4,5,-70])==19",
            "input_reasoning": "sum_of_digits([10,2,56])",
            "output_reasoning": "14"
        },
        "560": {
            "nl": "Write a function to find the union of the elements of two given tuples and output them in sorted order.",
            "asserts": "assert union_elements((3, 4, 5, 6),(5, 7, 4, 10) ) == (3, 4, 5, 6, 7, 10)\nassert union_elements((1, 2, 3, 4),(3, 4, 5, 6) ) == (1, 2, 3, 4, 5, 6)\nassert union_elements((11, 12, 13, 14),(13, 15, 16, 17) ) == (11, 12, 13, 14, 15, 16, 17)",
            "input_reasoning": "union_elements((3, 4, 5, 6),(5, 7, 4, 10) )",
            "output_reasoning": "(3, 4, 5, 6, 7, 10)"
        },
        "558": {
            "nl": "Write a python function to find the sum of the per-digit difference between two integers.",
            "asserts": "assert digit_distance_nums(1,2) == 1\nassert digit_distance_nums(23,56) == 6\nassert digit_distance_nums(123,256) == 7",
            "input_reasoning": "digit_distance_nums(1,2)",
            "output_reasoning": "1"
        },
        "106": {
            "nl": "Write a function to append the given list to the given tuples.",
            "asserts": "assert add_lists([5, 6, 7], (9, 10)) == (9, 10, 5, 6, 7)\nassert add_lists([6, 7, 8], (10, 11)) == (10, 11, 6, 7, 8)\nassert add_lists([7, 8, 9], (11, 12)) == (11, 12, 7, 8, 9)",
            "input_reasoning": "add_lists([5, 6, 7], (9, 10))",
            "output_reasoning": "(9, 10, 5, 6, 7)"
        },
        "311": {
            "nl": "Write a python function to set the left most unset bit.",
            "asserts": "assert set_left_most_unset_bit(10) == 14\nassert set_left_most_unset_bit(12) == 14\nassert set_left_most_unset_bit(15) == 15",
            "input_reasoning": "set_left_most_unset_bit(10)",
            "output_reasoning": "14"
        },
        "283": {
            "nl": "Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.",
            "asserts": "assert validate(1234) == True\nassert validate(51241) == False\nassert validate(321) == True",
            "input_reasoning": "validate(1234)",
            "output_reasoning": "True"
        },
        "170": {
            "nl": "Write a function to find the sum of numbers in a list within a range specified by two indices.",
            "asserts": "assert sum_range_list([2,1,5,6,8,3,4,9,10,11,8,12], 8, 10) == 29\nassert sum_range_list([2,1,5,6,8,3,4,9,10,11,8,12], 5, 7) == 16\nassert sum_range_list([2,1,5,6,8,3,4,9,10,11,8,12], 7, 10) == 38",
            "input_reasoning": "sum_range_list([2,1,5,6,8,3,4,9,10,11,8,12], 8, 10)",
            "output_reasoning": "29"
        },
        "71": {
            "nl": "Write a function to sort a list of elements.",
            "asserts": "assert comb_sort([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]\nassert comb_sort([41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41]\nassert comb_sort([99, 15, 13, 47]) == [13, 15, 47, 99]",
            "input_reasoning": "comb_sort([5, 15, 37, 25, 79])",
            "output_reasoning": "[5, 15, 25, 37, 79]"
        },
        "796": {
            "nl": "Write function to find the sum of all items in the given dictionary.",
            "asserts": "assert return_sum({'a': 100, 'b':200, 'c':300}) == 600\nassert return_sum({'a': 25, 'b':18, 'c':45}) == 88\nassert return_sum({'a': 36, 'b':39, 'c':49}) == 124",
            "input_reasoning": "return_sum({'a': 100, 'b':200, 'c':300})",
            "output_reasoning": "600"
        },
        "105": {
            "nl": "Write a python function to count true booleans in the given list.",
            "asserts": "assert count([True,False,True]) == 2\nassert count([False,False]) == 0\nassert count([True,True,True]) == 3",
            "input_reasoning": "count([True,False,True])",
            "output_reasoning": "2"
        },
        "84": {
            "nl": "Write a function to find the nth number in the newman conway sequence.",
            "asserts": "assert sequence(10) == 6\nassert sequence(2) == 1\nassert sequence(3) == 2",
            "input_reasoning": "sequence(10)",
            "output_reasoning": "6"
        },
        "410": {
            "nl": "Write a function to find the minimum value in a given heterogeneous list.",
            "asserts": "assert min_val(['Python', 3, 2, 4, 5, 'version'])==2\nassert min_val(['Python', 15, 20, 25])==15\nassert min_val(['Python', 30, 20, 40, 50, 'version'])==20",
            "input_reasoning": "min_val(['Python', 3, 2, 4, 5, 'version'])",
            "output_reasoning": "2"
        },
        "438": {
            "nl": "Write a function to count bidirectional tuple pairs.",
            "asserts": "assert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)] ) == 3\nassert count_bidirectional([(5, 6), (1, 3), (6, 5), (9, 1), (6, 5), (2, 1)] ) == 2\nassert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 2), (6, 5), (2, 1)] ) == 4",
            "input_reasoning": "count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)] )",
            "output_reasoning": "3"
        },
        "117": {
            "nl": "Write a function to convert all possible convertible elements in a list of lists to floats.",
            "asserts": "assert list_to_float( [(\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")] ) == [(3.0, 4.0), (1.0, 26.45), (7.32, 8.0), (4.0, 8.0)]\nassert list_to_float( [(\"4\", \"4\"), (\"2\", \"27\"), (\"4.12\", \"9\"), (\"7\", \"11\")] ) == [(4.0, 4.0), (2.0, 27.0), (4.12, 9.0), (7.0, 11.0)]\nassert list_to_float( [(\"6\", \"78\"), (\"5\", \"26.45\"), (\"1.33\", \"4\"), (\"82\", \"13\")] ) == [(6.0, 78.0), (5.0, 26.45), (1.33, 4.0), (82.0, 13.0)]",
            "input_reasoning": "list_to_float( [(\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")] )",
            "output_reasoning": "[(3.0, 4.0), (1.0, 26.45), (7.32, 8.0), (4.0, 8.0)]"
        },
        "259": {
            "nl": "Write a function to maximize the given two tuples.",
            "asserts": "assert maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((6, 7), (4, 9), (2, 9), (7, 10))\nassert maximize_elements(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((7, 8), (5, 10), (3, 10), (8, 11))\nassert maximize_elements(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((8, 9), (6, 11), (4, 11), (9, 12))",
            "input_reasoning": "maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3)))",
            "output_reasoning": "((6, 7), (4, 9), (2, 9), (7, 10))"
        },
        "227": {
            "nl": "Write a function to find minimum of three numbers.",
            "asserts": "assert min_of_three(10,20,0)==0\nassert min_of_three(19,15,18)==15\nassert min_of_three(-10,-20,-30)==-30",
            "input_reasoning": "min_of_three(10,20,0)",
            "output_reasoning": "0"
        },
        "794": {
            "nl": "Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.",
            "asserts": "assert text_starta_endb(\"aabbbb\")\nassert not text_starta_endb(\"aabAbbbc\")\nassert not text_starta_endb(\"accddbbjjj\")",
            "input_reasoning": "text_starta_endb(\"aabbbb\")",
            "output_reasoning": "True"
        },
        "479": {
            "nl": "Write a python function to find the first digit of a given number.",
            "asserts": "assert first_Digit(123) == 1\nassert first_Digit(456) == 4\nassert first_Digit(12) == 1",
            "input_reasoning": "first_Digit(123)",
            "output_reasoning": "1"
        },
        "293": {
            "nl": "Write a function to find the third side of a right angled triangle.",
            "asserts": "assert otherside_rightangle(7,8)==10.63014581273465\nassert otherside_rightangle(3,4)==5\nassert otherside_rightangle(7,15)==16.55294535724685",
            "input_reasoning": "otherside_rightangle(7,8)",
            "output_reasoning": "10.63014581273465"
        },
        "615": {
            "nl": "Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.",
            "asserts": "assert average_tuple(((10, 10, 10, 12), (30, 45, 56, 45), (81, 80, 39, 32), (1, 2, 3, 4)))==[30.5, 34.25, 27.0, 23.25]\nassert average_tuple(((1, 1, -5), (30, -15, 56), (81, -60, -39), (-10, 2, 3)))== [25.5, -18.0, 3.75]\nassert average_tuple( ((100, 100, 100, 120), (300, 450, 560, 450), (810, 800, 390, 320), (10, 20, 30, 40)))==[305.0, 342.5, 270.0, 232.5]",
            "input_reasoning": "average_tuple(((10, 10, 10, 12), (30, 45, 56, 45), (81, 80, 39, 32), (1, 2, 3, 4)))",
            "output_reasoning": "[30.5, 34.25, 27.0, 23.25]"
        },
        "757": {
            "nl": "Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/",
            "asserts": "assert count_reverse_pairs([\"julia\", \"best\", \"tseb\", \"for\", \"ailuj\"])== 2\nassert count_reverse_pairs([\"geeks\", \"best\", \"for\", \"skeeg\"]) == 1\nassert count_reverse_pairs([\"makes\", \"best\", \"sekam\", \"for\", \"rof\"]) == 2",
            "input_reasoning": "count_reverse_pairs([\"julia\", \"best\", \"tseb\", \"for\", \"ailuj\"])",
            "output_reasoning": "2"
        },
        "610": {
            "nl": "Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.",
            "asserts": "assert remove_kth_element([1,1,2,3,4,4,5,1],3)==[1, 1, 3, 4, 4, 5, 1]\nassert remove_kth_element([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4],4)==[0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]\nassert remove_kth_element([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10],5)==[10,10,15,19, 18, 17, 26, 26, 17, 18, 10]",
            "input_reasoning": "remove_kth_element([1,1,2,3,4,4,5,1],3)",
            "output_reasoning": "[1, 1, 3, 4, 4, 5, 1]"
        },
        "809": {
            "nl": "Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.",
            "asserts": "assert check_smaller((1, 2, 3), (2, 3, 4)) == False\nassert check_smaller((4, 5, 6), (3, 4, 5)) == True\nassert check_smaller((11, 12, 13), (10, 11, 12)) == True",
            "input_reasoning": "check_smaller((1, 2, 3), (2, 3, 4))",
            "output_reasoning": "False"
        },
        "281": {
            "nl": "Write a python function to check if the elements of a given list are unique or not.",
            "asserts": "assert all_unique([1,2,3]) == True\nassert all_unique([1,2,1,2]) == False\nassert all_unique([1,2,3,4,5]) == True",
            "input_reasoning": "all_unique([1,2,3])",
            "output_reasoning": "True"
        },
        "395": {
            "nl": "Write a python function to find the first non-repeated character in a given string.",
            "asserts": "assert first_non_repeating_character(\"abcabc\") == None\nassert first_non_repeating_character(\"abc\") == \"a\"\nassert first_non_repeating_character(\"ababc\") == \"c\"",
            "input_reasoning": "first_non_repeating_character(\"abcabc\")",
            "output_reasoning": "None"
        },
        "772": {
            "nl": "Write a function to remove all the words with k length in the given string.",
            "asserts": "assert remove_length('The person is most value tet', 3) == 'person is most value'\nassert remove_length('If you told me about this ok', 4) == 'If you me about ok'\nassert remove_length('Forces of darkeness is come into the play', 4) == 'Forces of darkeness is the'",
            "input_reasoning": "remove_length('The person is most value tet', 3)",
            "output_reasoning": "'person is most value'"
        },
        "579": {
            "nl": "Write a function to find the dissimilar elements in the given two tuples.",
            "asserts": "assert find_dissimilar((3, 4, 5, 6), (5, 7, 4, 10)) == (3, 6, 7, 10)\nassert find_dissimilar((1, 2, 3, 4), (7, 2, 3, 9)) == (1, 4, 7, 9)\nassert find_dissimilar((21, 11, 25, 26), (26, 34, 21, 36)) == (34, 36, 11, 25)",
            "input_reasoning": "find_dissimilar((3, 4, 5, 6), (5, 7, 4, 10))",
            "output_reasoning": "(3, 6, 7, 10)"
        },
        "433": {
            "nl": "Write a function to check whether the entered number is greater than the elements of the given array.",
            "asserts": "assert check_greater([1, 2, 3, 4, 5], 4) == False\nassert check_greater([2, 3, 4, 5, 6], 8) == True\nassert check_greater([9, 7, 4, 8, 6, 1], 11) == True",
            "input_reasoning": "check_greater([1, 2, 3, 4, 5], 4)",
            "output_reasoning": "False"
        },
        "742": {
            "nl": "Write a function to caluclate the area of a tetrahedron.",
            "asserts": "assert area_tetrahedron(3)==15.588457268119894\nassert area_tetrahedron(20)==692.8203230275509\nassert area_tetrahedron(10)==173.20508075688772",
            "input_reasoning": "area_tetrahedron(3)",
            "output_reasoning": "15.588457268119894"
        },
        "171": {
            "nl": "Write a function to find the perimeter of a regular pentagon from the length of its sides.",
            "asserts": "assert perimeter_pentagon(5) == 25\nassert perimeter_pentagon(10) == 50\nassert perimeter_pentagon(15) == 75",
            "input_reasoning": "perimeter_pentagon(5)",
            "output_reasoning": "25"
        },
        "603": {
            "nl": "Write a function to get all lucid numbers smaller than or equal to a given integer.",
            "asserts": "assert get_ludic(10) == [1, 2, 3, 5, 7]\nassert get_ludic(25) == [1, 2, 3, 5, 7, 11, 13, 17, 23, 25]\nassert get_ludic(45) == [1, 2, 3, 5, 7, 11, 13, 17, 23, 25, 29, 37, 41, 43]",
            "input_reasoning": "get_ludic(10)",
            "output_reasoning": "[1, 2, 3, 5, 7]"
        },
        "728": {
            "nl": "Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].",
            "asserts": "assert sum_list([10,20,30],[15,25,35])==[25,45,65]\nassert sum_list([1,2,3],[5,6,7])==[6,8,10]\nassert sum_list([15,20,30],[15,45,75])==[30,65,105]",
            "input_reasoning": "sum_list([10,20,30],[15,25,35])",
            "output_reasoning": "[25,45,65]"
        },
        "118": {
            "nl": "Write a function to convert a string to a list of strings split on the space character.",
            "asserts": "assert string_to_list(\"python programming\")==['python','programming']\nassert string_to_list(\"lists tuples strings\")==['lists','tuples','strings']\nassert string_to_list(\"write a program\")==['write','a','program']",
            "input_reasoning": "string_to_list(\"python programming\")",
            "output_reasoning": "['python','programming']"
        },
        "251": {
            "nl": "Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.",
            "asserts": "assert insert_element(['Red', 'Green', 'Black'] ,'c')==['c', 'Red', 'c', 'Green', 'c', 'Black']\nassert insert_element(['python', 'java'] ,'program')==['program', 'python', 'program', 'java']\nassert insert_element(['happy', 'sad'] ,'laugh')==['laugh', 'happy', 'laugh', 'sad']",
            "input_reasoning": "insert_element(['Red', 'Green', 'Black'] ,'c')",
            "output_reasoning": "['c', 'Red', 'c', 'Green', 'c', 'Black']"
        },
        "555": {
            "nl": "Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.",
            "asserts": "assert difference(3) == 30\nassert difference(5) == 210\nassert difference(2) == 6",
            "input_reasoning": "difference(3)",
            "output_reasoning": "30"
        },
        "803": {
            "nl": "Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/",
            "asserts": "assert not is_perfect_square(10)\nassert is_perfect_square(36)\nassert not is_perfect_square(14)\nassert is_perfect_square(14*14)\nassert not is_perfect_square(125)\nassert is_perfect_square(125*125)",
            "input_reasoning": "is_perfect_square(10)",
            "output_reasoning": "False"
        },
        "747": {
            "nl": "Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/",
            "asserts": "assert lcs_of_three('AGGT12', '12TXAYB', '12XBA') == 2\nassert lcs_of_three('Reels', 'Reelsfor', 'ReelsforReels') == 5\nassert lcs_of_three('abcd1e2', 'bc12ea', 'bd1ea') == 3",
            "input_reasoning": "lcs_of_three('AGGT12', '12TXAYB', '12XBA')",
            "output_reasoning": "2"
        },
        "779": {
            "nl": "Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.",
            "asserts": "assert unique_sublists([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]])=={(1, 3): 2, (5, 7): 2, (13, 15, 17): 1, (9, 11): 1}\nassert unique_sublists([['green', 'orange'], ['black'], ['green', 'orange'], ['white']])=={('green', 'orange'): 2, ('black',): 1, ('white',): 1}\nassert unique_sublists([[1, 2], [3, 4], [4, 5], [6, 7]])=={(1, 2): 1, (3, 4): 1, (4, 5): 1, (6, 7): 1}",
            "input_reasoning": "unique_sublists([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]])",
            "output_reasoning": "{(1, 3): 2, (5, 7): 2, (13, 15, 17): 1, (9, 11): 1}"
        },
        "573": {
            "nl": "Write a python function to calculate the product of the unique numbers in a given list.",
            "asserts": "assert unique_product([10, 20, 30, 40, 20, 50, 60, 40]) ==  720000000\nassert unique_product([1, 2, 3, 1,]) == 6\nassert unique_product([7, 8, 9, 0, 1, 1]) == 0",
            "input_reasoning": "unique_product([10, 20, 30, 40, 20, 50, 60, 40])",
            "output_reasoning": "720000000"
        },
        "749": {
            "nl": "Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/",
            "asserts": "assert sort_numeric_strings( ['4','12','45','7','0','100','200','-12','-500'])==[-500, -12, 0, 4, 7, 12, 45, 100, 200]\nassert sort_numeric_strings(['2','3','8','4','7','9','8','2','6','5','1','6','1','2','3','4','6','9','1','2'])==[1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9]\nassert sort_numeric_strings(['1','3','5','7','1', '3','13', '15', '17','5', '7 ','9','1', '11'])==[1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17]",
            "input_reasoning": "sort_numeric_strings( ['4','12','45','7','0','100','200','-12','-500'])",
            "output_reasoning": "[-500, -12, 0, 4, 7, 12, 45, 100, 200]"
        },
        "296": {
            "nl": "Write a python function to count inversions in an array.",
            "asserts": "assert get_Inv_Count([1,20,6,4,5]) == 5\nassert get_Inv_Count([1,2,1]) == 1\nassert get_Inv_Count([1,2,5,6,1]) == 3",
            "input_reasoning": "get_Inv_Count([1,20,6,4,5])",
            "output_reasoning": "5"
        },
        "738": {
            "nl": "Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php",
            "asserts": "assert geometric_sum(7) == 1.9921875\nassert geometric_sum(4) == 1.9375\nassert geometric_sum(8) == 1.99609375",
            "input_reasoning": "geometric_sum(7)",
            "output_reasoning": "1.9921875"
        },
        "745": {
            "nl": "Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php",
            "asserts": "assert divisible_by_digits(1,22)==[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\nassert divisible_by_digits(1,15)==[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]\nassert divisible_by_digits(20,25)==[22, 24]",
            "input_reasoning": "divisible_by_digits(1,22)",
            "output_reasoning": "[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]"
        },
        "261": {
            "nl": "Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.",
            "asserts": "assert division_elements((10, 4, 6, 9),(5, 2, 3, 3)) == (2, 2, 2, 3)\nassert division_elements((12, 6, 8, 16),(6, 3, 4, 4)) == (2, 2, 2, 4)\nassert division_elements((20, 14, 36, 18),(5, 7, 6, 9)) == (4, 2, 6, 2)",
            "input_reasoning": "division_elements((10, 4, 6, 9),(5, 2, 3, 3))",
            "output_reasoning": "(2, 2, 2, 3)"
        },
        "578": {
            "nl": "Write a function to interleave 3 lists of the same length into a single flat list.",
            "asserts": "assert interleave_lists([1,2,3,4,5,6,7],[10,20,30,40,50,60,70],[100,200,300,400,500,600,700])==[1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]\nassert interleave_lists([10,20],[15,2],[5,10])==[10,15,5,20,2,10]\nassert interleave_lists([11,44], [10,15], [20,5])==[11,10,20,44,15,5]",
            "input_reasoning": "interleave_lists([1,2,3,4,5,6,7],[10,20,30,40,50,60,70],[100,200,300,400,500,600,700])",
            "output_reasoning": "[1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]"
        },
        "801": {
            "nl": "Write a python function to count the number of equal numbers from three given integers.",
            "asserts": "assert test_three_equal(1,1,1) == 3\nassert test_three_equal(-1,-2,-3) == 0\nassert test_three_equal(1,2,2) == 2",
            "input_reasoning": "test_three_equal(1,1,1)",
            "output_reasoning": "3"
        },
        "455": {
            "nl": "Write a function to check whether the given month number contains 31 days or not.",
            "asserts": "assert check_monthnumb_number(5)==True\nassert check_monthnumb_number(2)==False\nassert check_monthnumb_number(6)==False",
            "input_reasoning": "check_monthnumb_number(5)",
            "output_reasoning": "True"
        },
        "444": {
            "nl": "Write a function to trim each tuple by k in the given tuple list.",
            "asserts": "assert trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1),(9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 2) == '[(2,), (9,), (2,), (2,)]'\nassert trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1), (9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 1) == '[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]'\nassert trim_tuple([(7, 8, 4, 9), (11, 8, 12, 4),(4, 1, 7, 8), (3, 6, 9, 7)], 1) == '[(8, 4), (8, 12), (1, 7), (6, 9)]'",
            "input_reasoning": "trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1),(9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 2)",
            "output_reasoning": "'[(2,), (9,), (2,), (2,)]'"
        },
        "64": {
            "nl": "Write a function to sort a list of tuples using the second value of each tuple.",
            "asserts": "assert subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])==[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]\nassert subject_marks([('Telugu',49),('Hindhi',54),('Social',33)])==([('Social',33),('Telugu',49),('Hindhi',54)])\nassert subject_marks([('Physics',96),('Chemistry',97),('Biology',45)])==([('Biology',45),('Physics',96),('Chemistry',97)])",
            "input_reasoning": "subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])",
            "output_reasoning": "[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]"
        },
        "773": {
            "nl": "Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.",
            "asserts": "assert occurance_substring('python programming, python language','python')==('python', 0, 6)\nassert occurance_substring('python programming,programming language','programming')==('programming', 7, 18)\nassert occurance_substring('python programming,programming language','language')==('language', 31, 39)\nassert occurance_substring('c++ programming, c++ language','python')==None",
            "input_reasoning": "occurance_substring('python programming, python language','python')",
            "output_reasoning": "('python', 0, 6)"
        },
        "89": {
            "nl": "Write a function to find the closest smaller number than n.",
            "asserts": "assert closest_num(11) == 10\nassert closest_num(7) == 6\nassert closest_num(12) == 11",
            "input_reasoning": "closest_num(11)",
            "output_reasoning": "10"
        },
        "471": {
            "nl": "Write a python function to find the product of the array multiplication modulo n.",
            "asserts": "assert find_remainder([ 100, 10, 5, 25, 35, 14 ],11) ==9\nassert find_remainder([1,1,1],1) == 0\nassert find_remainder([1,2,1],2) == 0",
            "input_reasoning": "find_remainder([ 100, 10, 5, 25, 35, 14 ],11)",
            "output_reasoning": "9"
        },
        "97": {
            "nl": "Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.",
            "asserts": "assert frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])=={1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}\nassert frequency_lists([[1,2,3,4],[5,6,7,8],[9,10,11,12]])=={1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1,10:1,11:1,12:1}\nassert frequency_lists([[20,30,40,17],[18,16,14,13],[10,20,30,40]])=={20:2,30:2,40:2,17: 1,18:1, 16: 1,14: 1,13: 1, 10: 1}",
            "input_reasoning": "frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])",
            "output_reasoning": "{1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}"
        },
        "616": {
            "nl": "Write a function which takes two tuples of the same length and performs the element wise modulo.",
            "asserts": "assert tuple_modulo((10, 4, 5, 6), (5, 6, 7, 5)) == (0, 4, 5, 1)\nassert tuple_modulo((11, 5, 6, 7), (6, 7, 8, 6)) == (5, 5, 6, 1)\nassert tuple_modulo((12, 6, 7, 8), (7, 8, 9, 7)) == (5, 6, 7, 1)",
            "input_reasoning": "tuple_modulo((10, 4, 5, 6), (5, 6, 7, 5))",
            "output_reasoning": "(0, 4, 5, 1)"
        },
        "767": {
            "nl": "Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,",
            "asserts": "assert get_pairs_count([1,1,1,1],2) == 6\nassert get_pairs_count([1,5,7,-1,5],6) == 3\nassert get_pairs_count([1,-2,3],1) == 1\nassert get_pairs_count([-1,-2,3],-3) == 1",
            "input_reasoning": "get_pairs_count([1,1,1,1],2)",
            "output_reasoning": "6"
        },
        "430": {
            "nl": "Write a function to find the directrix of a parabola.",
            "asserts": "assert parabola_directrix(5,3,2)==-198\nassert parabola_directrix(9,8,4)==-2336\nassert parabola_directrix(2,4,6)==-130",
            "input_reasoning": "parabola_directrix(5,3,2)",
            "output_reasoning": "-198"
        },
        "464": {
            "nl": "Write a function to check if all values are same in a dictionary.",
            "asserts": "assert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},10)==False\nassert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},12)==True\nassert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},5)==False",
            "input_reasoning": "check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},10)",
            "output_reasoning": "False"
        },
        "277": {
            "nl": "Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.",
            "asserts": "assert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},170)=={'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}\nassert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},180)=={ 'Alden Cantrell': 180, 'Pierre Cox': 190}\nassert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},190)=={ 'Pierre Cox': 190}",
            "input_reasoning": "dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},170)",
            "output_reasoning": "{'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}"
        },
        "435": {
            "nl": "Write a python function to find the last digit of a given number.",
            "asserts": "assert last_Digit(123) == 3\nassert last_Digit(25) == 5\nassert last_Digit(30) == 0",
            "input_reasoning": "last_Digit(123)",
            "output_reasoning": "3"
        },
        "753": {
            "nl": "Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases",
            "asserts": "assert min_k([('Manjeet', 10), ('Akshat', 4), ('Akash', 2), ('Nikhil', 8)], 2) == [('Akash', 2), ('Akshat', 4)]\nassert min_k([('Sanjeev', 11), ('Angat', 5), ('Akash', 3), ('Nepin', 9)], 3) == [('Akash', 3), ('Angat', 5), ('Nepin', 9)]\nassert min_k([('tanmay', 14), ('Amer', 11), ('Ayesha', 9), ('SKD', 16)], 1) == [('Ayesha', 9)]",
            "input_reasoning": "min_k([('Manjeet', 10), ('Akshat', 4), ('Akash', 2), ('Nikhil', 8)], 2)",
            "output_reasoning": "[('Akash', 2), ('Akshat', 4)]"
        },
        "411": {
            "nl": "Write a function to convert the given snake case string to camel case string.",
            "asserts": "assert snake_to_camel('android_tv') == 'AndroidTv'\nassert snake_to_camel('google_pixel') == 'GooglePixel'\nassert snake_to_camel('apple_watch') == 'AppleWatch'",
            "input_reasoning": "snake_to_camel('android_tv')",
            "output_reasoning": "'AndroidTv'"
        },
        "624": {
            "nl": "Write a python function to convert a given string to uppercase.",
            "asserts": "assert is_upper(\"person\") ==\"PERSON\"\nassert is_upper(\"final\") == \"FINAL\"\nassert is_upper(\"Valid\") == \"VALID\"",
            "input_reasoning": "is_upper(\"person\")",
            "output_reasoning": "\"PERSON\""
        },
        "102": {
            "nl": "Write a function to convert a snake case string to camel case string.",
            "asserts": "assert snake_to_camel('python_program')=='PythonProgram'\nassert snake_to_camel('python_language')==('PythonLanguage')\nassert snake_to_camel('programming_language')==('ProgrammingLanguage')",
            "input_reasoning": "snake_to_camel('python_program')",
            "output_reasoning": "'PythonProgram'"
        },
        "632": {
            "nl": "Write a python function to move all zeroes to the end of the given list.",
            "asserts": "assert move_zero([1,0,2,0,3,4]) == [1,2,3,4,0,0]\nassert move_zero([2,3,2,0,0,4,0,5,0]) == [2,3,2,4,5,0,0,0,0]\nassert move_zero([0,1,0,1,1]) == [1,1,1,0,0]",
            "input_reasoning": "move_zero([1,0,2,0,3,4])",
            "output_reasoning": "[1,2,3,4,0,0]"
        },
        "266": {
            "nl": "Write a function to find the lateral surface area of a cube given its side length.",
            "asserts": "assert lateralsurface_cube(5)==100\nassert lateralsurface_cube(9)==324\nassert lateralsurface_cube(10)==400",
            "input_reasoning": "lateralsurface_cube(5)",
            "output_reasoning": "100"
        },
        "566": {
            "nl": "Write a function to get the sum of the digits of a non-negative integer.",
            "asserts": "assert sum_digits(345)==12\nassert sum_digits(12)==3\nassert sum_digits(97)==16",
            "input_reasoning": "sum_digits(345)",
            "output_reasoning": "12"
        },
        "83": {
            "nl": "Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.",
            "asserts": "assert get_Char(\"abc\") == \"f\"\nassert get_Char(\"gfg\") == \"t\"\nassert get_Char(\"ab\") == \"c\"",
            "input_reasoning": "get_Char(\"abc\")",
            "output_reasoning": "\"f\""
        },
        "249": {
            "nl": "Write a function to find the intersection of two arrays.",
            "asserts": "assert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[1, 2, 4, 8, 9])==[1, 2, 8, 9]\nassert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[3,5,7,9])==[3,5,7,9]\nassert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[10,20,30,40])==[10]",
            "input_reasoning": "intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[1, 2, 4, 8, 9])",
            "output_reasoning": "[1, 2, 8, 9]"
        },
        "99": {
            "nl": "Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.",
            "asserts": "assert decimal_to_binary(8) == '1000'\nassert decimal_to_binary(18) == '10010'\nassert decimal_to_binary(7) == '111'",
            "input_reasoning": "decimal_to_binary(8)",
            "output_reasoning": "'1000'"
        },
        "292": {
            "nl": "Write a python function to find quotient of two numbers (rounded down to the nearest integer).",
            "asserts": "assert find(10,3) == 3\nassert find(4,2) == 2\nassert find(20,5) == 4",
            "input_reasoning": "find(10,3)",
            "output_reasoning": "3"
        },
        "785": {
            "nl": "Write a function to convert tuple string to integer tuple.",
            "asserts": "assert tuple_str_int(\"(7, 8, 9)\") == (7, 8, 9)\nassert tuple_str_int(\"(1, 2, 3)\") == (1, 2, 3)\nassert tuple_str_int(\"(4, 5, 6)\") == (4, 5, 6)\nassert tuple_str_int(\"(7, 81, 19)\") == (7, 81, 19)",
            "input_reasoning": "tuple_str_int(\"(7, 8, 9)\")",
            "output_reasoning": "(7, 8, 9)"
        },
        "577": {
            "nl": "Write a python function to find the last digit in factorial of a given number.",
            "asserts": "assert last_Digit_Factorial(4) == 4\nassert last_Digit_Factorial(21) == 0\nassert last_Digit_Factorial(30) == 0",
            "input_reasoning": "last_Digit_Factorial(4)",
            "output_reasoning": "4"
        },
        "95": {
            "nl": "Write a python function to find the length of the smallest list in a list of lists.",
            "asserts": "assert Find_Min_Length([[1],[1,2]]) == 1\nassert Find_Min_Length([[1,2],[1,2,3],[1,2,3,4]]) == 2\nassert Find_Min_Length([[3,3,3],[4,4,4,4]]) == 3",
            "input_reasoning": "Find_Min_Length([[1],[1,2]])",
            "output_reasoning": "1"
        },
        "90": {
            "nl": "Write a python function to find the length of the longest word.",
            "asserts": "assert len_log([\"python\",\"PHP\",\"bigdata\"]) == 7\nassert len_log([\"a\",\"ab\",\"abc\"]) == 3\nassert len_log([\"small\",\"big\",\"tall\"]) == 5",
            "input_reasoning": "len_log([\"python\",\"PHP\",\"bigdata\"])",
            "output_reasoning": "7"
        },
        "581": {
            "nl": "Write a python function to find the surface area of a square pyramid with a given base edge and height.",
            "asserts": "assert surface_Area(3,4) == 33\nassert surface_Area(4,5) == 56\nassert surface_Area(1,2) == 5",
            "input_reasoning": "surface_Area(3,4)",
            "output_reasoning": "33"
        },
        "294": {
            "nl": "Write a function to find the maximum value in a given heterogeneous list.",
            "asserts": "assert max_val(['Python', 3, 2, 4, 5, 'version'])==5\nassert max_val(['Python', 15, 20, 25])==25\nassert max_val(['Python', 30, 20, 40, 50, 'version'])==50",
            "input_reasoning": "max_val(['Python', 3, 2, 4, 5, 'version'])",
            "output_reasoning": "5"
        },
        "614": {
            "nl": "Write a function to find the cumulative sum of all the values that are present in the given tuple list.",
            "asserts": "assert cummulative_sum([(1, 3), (5, 6, 7), (2, 6)]) == 30\nassert cummulative_sum([(2, 4), (6, 7, 8), (3, 7)]) == 37\nassert cummulative_sum([(3, 5), (7, 8, 9), (4, 8)]) == 44",
            "input_reasoning": "cummulative_sum([(1, 3), (5, 6, 7), (2, 6)])",
            "output_reasoning": "30"
        },
        "16": {
            "nl": "Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.",
            "asserts": "assert text_lowercase_underscore(\"aab_cbbbc\")==(True)\nassert text_lowercase_underscore(\"aab_Abbbc\")==(False)\nassert text_lowercase_underscore(\"Aaab_abbbc\")==(False)",
            "input_reasoning": "text_lowercase_underscore(\"aab_cbbbc\")",
            "output_reasoning": "(True)"
        },
        "101": {
            "nl": "Write a function to find the kth element in the given array using 1-based indexing.",
            "asserts": "assert kth_element([12,3,5,7,19], 2) == 3\nassert kth_element([17,24,8,23], 3) == 8\nassert kth_element([16,21,25,36,4], 4) == 36",
            "input_reasoning": "kth_element([12,3,5,7,19], 2)",
            "output_reasoning": "3"
        },
        "589": {
            "nl": "Write a function to find perfect squares between two given numbers.",
            "asserts": "assert perfect_squares(1,30)==[1, 4, 9, 16, 25]\nassert perfect_squares(50,100)==[64, 81, 100]\nassert perfect_squares(100,200)==[100, 121, 144, 169, 196]",
            "input_reasoning": "perfect_squares(1,30)",
            "output_reasoning": "[1, 4, 9, 16, 25]"
        },
        "626": {
            "nl": "Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.",
            "asserts": "assert triangle_area(-1) == None\nassert triangle_area(0) == 0\nassert triangle_area(2) == 4",
            "input_reasoning": "triangle_area(-1)",
            "output_reasoning": "None"
        },
        "130": {
            "nl": "Write a function to find the item with maximum frequency in a given list.",
            "asserts": "assert max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])==2\nassert max_occurrences([2,3,8,4,7,9,8,7,9,15,14,10,12,13,16,18])==8\nassert max_occurrences([10,20,20,30,40,90,80,50,30,20,50,10])==20",
            "input_reasoning": "max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])",
            "output_reasoning": "2"
        },
        "406": {
            "nl": "Write a python function to find whether the parity of a given number is odd.",
            "asserts": "assert find_Parity(12) == False\nassert find_Parity(7) == True\nassert find_Parity(10) == False",
            "input_reasoning": "find_Parity(12)",
            "output_reasoning": "False"
        },
        "630": {
            "nl": "Write a function to extract all the adjacent coordinates of the given coordinate tuple.",
            "asserts": "assert get_coordinates((3, 4)) == [[2, 3], [2, 4], [2, 5], [3, 3], [3, 4], [3, 5], [4, 3], [4, 4], [4, 5]]\nassert get_coordinates((4, 5)) ==[[3, 4], [3, 5], [3, 6], [4, 4], [4, 5], [4, 6], [5, 4], [5, 5], [5, 6]]\nassert get_coordinates((5, 6)) == [[4, 5], [4, 6], [4, 7], [5, 5], [5, 6], [5, 7], [6, 5], [6, 6], [6, 7]]",
            "input_reasoning": "get_coordinates((3, 4))",
            "output_reasoning": "[[2, 3], [2, 4], [2, 5], [3, 3], [3, 4], [3, 5], [4, 3], [4, 4], [4, 5]]"
        },
        "274": {
            "nl": "Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.",
            "asserts": "assert even_binomial_Coeff_Sum(4) == 8\nassert even_binomial_Coeff_Sum(6) == 32\nassert even_binomial_Coeff_Sum(2) == 2",
            "input_reasoning": "even_binomial_Coeff_Sum(4)",
            "output_reasoning": "8"
        },
        "736": {
            "nl": "Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php",
            "asserts": "assert left_insertion([1,2,4,5],6)==4\nassert left_insertion([1,2,4,5],3)==2\nassert left_insertion([1,2,4,5],7)==4",
            "input_reasoning": "left_insertion([1,2,4,5],6)",
            "output_reasoning": "4"
        },
        "799": {
            "nl": "Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.",
            "asserts": "assert left_rotate(16,2) == 64\nassert left_rotate(10,2) == 40\nassert left_rotate(99,3) == 792\nassert left_rotate(99,3) == 792\nassert left_rotate(0b0001,3) == 0b1000\nassert left_rotate(0b0101,3) == 0b101000\nassert left_rotate(0b11101,3) == 0b11101000",
            "input_reasoning": "left_rotate(16,2)",
            "output_reasoning": "64"
        },
        "451": {
            "nl": "Write a function to remove all whitespaces from the given string.",
            "asserts": "assert remove_whitespaces(' Google    Flutter ') == 'GoogleFlutter'\nassert remove_whitespaces(' Google    Dart ') == 'GoogleDart'\nassert remove_whitespaces(' iOS    Swift ') == 'iOSSwift'",
            "input_reasoning": "remove_whitespaces(' Google    Flutter ')",
            "output_reasoning": "'GoogleFlutter'"
        },
        "304": {
            "nl": "Write a python function to find element at a given index after number of rotations.",
            "asserts": "assert find_Element([1,2,3,4,5],[[0,2],[0,3]],2,1) == 3\nassert find_Element([1,2,3,4],[[0,1],[0,2]],1,2) == 3\nassert find_Element([1,2,3,4,5,6],[[0,1],[0,2]],1,1) == 1",
            "input_reasoning": "find_Element([1,2,3,4,5],[[0,2],[0,3]],2,1)",
            "output_reasoning": "3"
        },
        "80": {
            "nl": "Write a function to find the nth tetrahedral number.",
            "asserts": "assert tetrahedral_number(5) == 35\nassert tetrahedral_number(6) == 56\nassert tetrahedral_number(7) == 84",
            "input_reasoning": "tetrahedral_number(5)",
            "output_reasoning": "35"
        },
        "586": {
            "nl": "Write a python function to split a list at the nth eelment and add the first part to the end.",
            "asserts": "assert split_Arr([12,10,5,6,52,36],2) == [5,6,52,36,12,10]\nassert split_Arr([1,2,3,4],1) == [2,3,4,1]\nassert split_Arr([0,1,2,3,4,5,6,7],3) == [3,4,5,6,7,0,1,2]",
            "input_reasoning": "split_Arr([12,10,5,6,52,36],2)",
            "output_reasoning": "[5,6,52,36,12,10]"
        },
        "308": {
            "nl": "Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.",
            "asserts": "assert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3)==[60, 54, 50]\nassert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],4)==[60, 54, 50, 48]\nassert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],5)==[60, 54, 50, 48, 45]",
            "input_reasoning": "large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3)",
            "output_reasoning": "[60, 54, 50]"
        },
        "447": {
            "nl": "Write a function to find cubes of individual elements in a list.",
            "asserts": "assert cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]\nassert cube_nums([10,20,30])==([1000, 8000, 27000])\nassert cube_nums([12,15])==([1728, 3375])",
            "input_reasoning": "cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
            "output_reasoning": "[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]"
        },
        "392": {
            "nl": "Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).",
            "asserts": "assert get_max_sum(60) == 106\nassert get_max_sum(10) == 12\nassert get_max_sum(2) == 2",
            "input_reasoning": "get_max_sum(60)",
            "output_reasoning": "106"
        },
        "309": {
            "nl": "Write a python function to find the maximum of two numbers.",
            "asserts": "assert maximum(5,10) == 10\nassert maximum(-1,-2) == -1\nassert maximum(9,7) == 9",
            "input_reasoning": "maximum(5,10)",
            "output_reasoning": "10"
        },
        "595": {
            "nl": "Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.",
            "asserts": "assert min_Swaps(\"1101\",\"1110\") == 1\nassert min_Swaps(\"111\",\"000\") == \"Not Possible\"\nassert min_Swaps(\"111\",\"110\") == \"Not Possible\"",
            "input_reasoning": "min_Swaps(\"1101\",\"1110\")",
            "output_reasoning": "1"
        },
        "628": {
            "nl": "Write a function to replace all spaces in the given string with '%20'.",
            "asserts": "assert replace_spaces(\"My Name is Dawood\") == 'My%20Name%20is%20Dawood'\nassert replace_spaces(\"I am a Programmer\") == 'I%20am%20a%20Programmer'\nassert replace_spaces(\"I love Coding\") == 'I%20love%20Coding'",
            "input_reasoning": "replace_spaces(\"My Name is Dawood\")",
            "output_reasoning": "'My%20Name%20is%20Dawood'"
        },
        "238": {
            "nl": "Write a python function to count the number of non-empty substrings of a given string.",
            "asserts": "assert number_of_substrings(\"abc\") == 6\nassert number_of_substrings(\"abcd\") == 10\nassert number_of_substrings(\"abcde\") == 15",
            "input_reasoning": "number_of_substrings(\"abc\")",
            "output_reasoning": "6"
        },
        "142": {
            "nl": "Write a function to count number items that are identical in the same position of three given lists.",
            "asserts": "assert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9])==3\nassert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,8],[2,1,3,1,2,6,7,8])==4\nassert count_samepair([1,2,3,4,2,6,7,8],[2,2,3,1,2,6,7,8],[2,1,3,1,2,6,7,8])==5",
            "input_reasoning": "count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9])",
            "output_reasoning": "3"
        },
        "807": {
            "nl": "Write a python function to find the first odd number in a given list of numbers.",
            "asserts": "assert first_odd([1,3,5]) == 1\nassert first_odd([2,4,1,3]) == 1\nassert first_odd ([8,9,1]) == 9",
            "input_reasoning": "first_odd([1,3,5])",
            "output_reasoning": "1"
        },
        "14": {
            "nl": "Write a python function to find the volume of a triangular prism.",
            "asserts": "assert find_Volume(10,8,6) == 240\nassert find_Volume(3,2,2) == 6\nassert find_Volume(1,2,1) == 1",
            "input_reasoning": "find_Volume(10,8,6)",
            "output_reasoning": "240"
        },
        "224": {
            "nl": "Write a python function to count the number of set bits (binary digits with value 1) in a given number.",
            "asserts": "assert count_Set_Bits(2) == 1\nassert count_Set_Bits(4) == 1\nassert count_Set_Bits(6) == 2",
            "input_reasoning": "count_Set_Bits(2)",
            "output_reasoning": "1"
        },
        "290": {
            "nl": "Write a function to find the list of maximum length in a list of lists.",
            "asserts": "assert max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\nassert max_length([[1], [5, 7], [10, 12, 14,15]])==(4, [10, 12, 14,15])\nassert max_length([[5], [15,20,25]])==(3, [15,20,25])",
            "input_reasoning": "max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])",
            "output_reasoning": "(3, [13, 15, 17])"
        },
        "12": {
            "nl": "Write a function to sort a given matrix in ascending order according to the sum of its rows.",
            "asserts": "assert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]\nassert sort_matrix([[1, 2, 3], [-2, 4, -5], [1, -1, 1]])==[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]\nassert sort_matrix([[5,8,9],[6,4,3],[2,1,4]])==[[2, 1, 4], [6, 4, 3], [5, 8, 9]]",
            "input_reasoning": "sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])",
            "output_reasoning": "[[1, 1, 1], [1, 2, 3], [2, 4, 5]]"
        },
        "446": {
            "nl": "Write a python function to count the occurence of all elements of list in a tuple.",
            "asserts": "assert count_Occurrence(('a', 'a', 'c', 'b', 'd'),['a', 'b'] ) == 3\nassert count_Occurrence((1, 2, 3, 1, 4, 6, 7, 1, 4),[1, 4, 7]) == 6\nassert count_Occurrence((1,2,3,4,5,6),[1,2]) == 2",
            "input_reasoning": "count_Occurrence(('a', 'a', 'c', 'b', 'd'),['a', 'b'] )",
            "output_reasoning": "3"
        },
        "96": {
            "nl": "Write a python function to find the number of divisors of a given integer.",
            "asserts": "assert divisor(15) == 4\nassert divisor(12) == 6\nassert divisor(9) == 3",
            "input_reasoning": "divisor(15)",
            "output_reasoning": "4"
        },
        "109": {
            "nl": "Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.",
            "asserts": "assert odd_Equivalent(\"011001\",6) == 3\nassert odd_Equivalent(\"11011\",5) == 4\nassert odd_Equivalent(\"1010\",4) == 2",
            "input_reasoning": "odd_Equivalent(\"011001\",6)",
            "output_reasoning": "3"
        },
        "587": {
            "nl": "Write a function to convert a list to a tuple.",
            "asserts": "assert list_tuple([5, 10, 7, 4, 15, 3])==(5, 10, 7, 4, 15, 3)\nassert list_tuple([2, 4, 5, 6, 2, 3, 4, 4, 7])==(2, 4, 5, 6, 2, 3, 4, 4, 7)\nassert list_tuple([58,44,56])==(58,44,56)",
            "input_reasoning": "list_tuple([5, 10, 7, 4, 15, 3])",
            "output_reasoning": "(5, 10, 7, 4, 15, 3)"
        },
        "94": {
            "nl": "Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.",
            "asserts": "assert index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]) == 'Varsha'\nassert index_minimum([('Yash', 185), ('Dawood', 125), ('Sanya', 175)]) == 'Dawood'\nassert index_minimum([('Sai', 345), ('Salman', 145), ('Ayesha', 96)]) == 'Ayesha'",
            "input_reasoning": "index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)])",
            "output_reasoning": "'Varsha'"
        },
        "459": {
            "nl": "Write a function to remove uppercase substrings from a given string.",
            "asserts": "assert remove_uppercase('cAstyoUrFavoRitETVshoWs') == 'cstyoravoitshos'\nassert remove_uppercase('wAtchTheinTernEtrAdIo') == 'wtchheinerntrdo'\nassert remove_uppercase('VoicESeaRchAndreComMendaTionS') == 'oiceachndreomendaion'",
            "input_reasoning": "remove_uppercase('cAstyoUrFavoRitETVshoWs')",
            "output_reasoning": "'cstyoravoitshos'"
        },
        "722": {
            "nl": "The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.",
            "asserts": "assert filter_data({'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)},6.0,70)=={'Cierra Vega': (6.2, 70)}\nassert filter_data({'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)},5.9,67)=={'Cierra Vega': (6.2, 70),'Kierra Gentry': (6.0, 68)}\nassert filter_data({'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)},5.7,64)=={'Cierra Vega': (6.2, 70),'Alden Cantrell': (5.9, 65),'Kierra Gentry': (6.0, 68),'Pierre Cox': (5.8, 66)}",
            "input_reasoning": "filter_data({'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)},6.0,70)",
            "output_reasoning": "{'Cierra Vega': (6.2, 70)}"
        },
        "732": {
            "nl": "Write a function to replace all occurrences of spaces, commas, or dots with a colon.",
            "asserts": "assert replace_specialchar('Python language, Programming language.')==('Python:language::Programming:language:')\nassert replace_specialchar('a b c,d e f')==('a:b:c:d:e:f')\nassert replace_specialchar('ram reshma,ram rahim')==('ram:reshma:ram:rahim')",
            "input_reasoning": "replace_specialchar('Python language, Programming language.')",
            "output_reasoning": "('Python:language::Programming:language:')"
        },
        "67": {
            "nl": "Write a function to find the number of ways to partition a set of Bell numbers.",
            "asserts": "assert bell_number(2)==2\nassert bell_number(10)==115975\nassert bell_number(56)==6775685320645824322581483068371419745979053216268760300",
            "input_reasoning": "bell_number(2)",
            "output_reasoning": "2"
        },
        "59": {
            "nl": "Write a function to find the nth octagonal number.",
            "asserts": "assert is_octagonal(5) == 65\nassert is_octagonal(10) == 280\nassert is_octagonal(15) == 645",
            "input_reasoning": "is_octagonal(5)",
            "output_reasoning": "65"
        },
        "61": {
            "nl": "Write a python function to count the number of substrings with the sum of digits equal to their length.",
            "asserts": "assert count_Substrings('112112') == 6\nassert count_Substrings('111') == 6\nassert count_Substrings('1101112') == 12",
            "input_reasoning": "count_Substrings('112112')",
            "output_reasoning": "6"
        },
        "783": {
            "nl": "Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/",
            "asserts": "assert rgb_to_hsv(255, 255, 255)==(0, 0.0, 100.0)\nassert rgb_to_hsv(0, 215, 0)==(120.0, 100.0, 84.31372549019608)\nassert rgb_to_hsv(10, 215, 110)==(149.26829268292684, 95.34883720930233, 84.31372549019608)",
            "input_reasoning": "rgb_to_hsv(255, 255, 255)",
            "output_reasoning": "(0, 0.0, 100.0)"
        },
        "617": {
            "nl": "Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.",
            "asserts": "assert min_Jumps((3,4),11)==3.5\nassert min_Jumps((3,4),0)==0\nassert min_Jumps((11,14),11)==1",
            "input_reasoning": "min_Jumps((3,4),11)",
            "output_reasoning": "3.5"
        },
        "762": {
            "nl": "Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.",
            "asserts": "assert check_monthnumber_number(6)==True\nassert check_monthnumber_number(2)==False\nassert check_monthnumber_number(12)==False",
            "input_reasoning": "check_monthnumber_number(6)",
            "output_reasoning": "True"
        },
        "739": {
            "nl": "Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/",
            "asserts": "assert find_Index(2) == 4\nassert find_Index(3) == 14\nassert find_Index(4) == 45",
            "input_reasoning": "find_Index(2)",
            "output_reasoning": "4"
        },
        "4": {
            "nl": "Write a function to find the n largest integers from a given list of numbers, returned in descending order.",
            "asserts": "assert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],3)==[85, 75, 65]\nassert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],2)==[85, 75]\nassert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],5)==[85, 75, 65, 58, 35]",
            "input_reasoning": "heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],3)",
            "output_reasoning": "[85, 75, 65]"
        },
        "250": {
            "nl": "Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.",
            "asserts": "assert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),4) == 0\nassert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),10) == 3\nassert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),8) == 4",
            "input_reasoning": "count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),4)",
            "output_reasoning": "0"
        },
        "228": {
            "nl": "Write a python function to check whether all the bits are unset in the given range or not.",
            "asserts": "assert all_Bits_Set_In_The_Given_Range(4,1,2) == True\nassert all_Bits_Set_In_The_Given_Range(17,2,4) == True\nassert all_Bits_Set_In_The_Given_Range(39,4,6) == False",
            "input_reasoning": "all_Bits_Set_In_The_Given_Range(4,1,2)",
            "output_reasoning": "True"
        },
        "602": {
            "nl": "Write a python function to find the first repeated character in a given string.",
            "asserts": "assert first_repeated_char(\"abcabc\") == \"a\"\nassert first_repeated_char(\"abc\") == None\nassert first_repeated_char(\"123123\") == \"1\"",
            "input_reasoning": "first_repeated_char(\"abcabc\")",
            "output_reasoning": "\"a\""
        },
        "301": {
            "nl": "Write a function to find the depth of a dictionary.",
            "asserts": "assert dict_depth({'a':1, 'b': {'c': {'d': {}}}})==4\nassert dict_depth({'a':1, 'b': {'c':'python'}})==2\nassert dict_depth({1: 'Sun', 2: {3: {4:'Mon'}}})==3",
            "input_reasoning": "dict_depth({'a':1, 'b': {'c': {'d': {}}}})",
            "output_reasoning": "4"
        },
        "431": {
            "nl": "Write a function that takes two lists and returns true if they have at least one common element.",
            "asserts": "assert common_element([1,2,3,4,5], [5,6,7,8,9])==True\nassert common_element([1,2,3,4,5], [6,7,8,9])==None\nassert common_element(['a','b','c'], ['d','b','e'])==True",
            "input_reasoning": "common_element([1,2,3,4,5], [5,6,7,8,9])",
            "output_reasoning": "True"
        },
        "790": {
            "nl": "Write a python function to check whether every even index contains even numbers of a given list.",
            "asserts": "assert even_position([3,2,1]) == False\nassert even_position([1,2,3]) == False\nassert even_position([2,1,4]) == True",
            "input_reasoning": "even_position([3,2,1])",
            "output_reasoning": "False"
        },
        "726": {
            "nl": "Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.",
            "asserts": "assert multiply_elements((1, 5, 7, 8, 10)) == (5, 35, 56, 80)\nassert multiply_elements((2, 4, 5, 6, 7)) == (8, 20, 30, 42)\nassert multiply_elements((12, 13, 14, 9, 15)) == (156, 182, 126, 135)\nassert multiply_elements((12,)) == ()",
            "input_reasoning": "multiply_elements((1, 5, 7, 8, 10))",
            "output_reasoning": "(5, 35, 56, 80)"
        },
        "461": {
            "nl": "Write a python function to count the upper case characters in a given string.",
            "asserts": "assert upper_ctr('PYthon') == 1\nassert upper_ctr('BigData') == 1\nassert upper_ctr('program') == 0",
            "input_reasoning": "upper_ctr('PYthon')",
            "output_reasoning": "1"
        },
        "470": {
            "nl": "Write a function to find the pairwise addition of the neighboring elements of the given tuple.",
            "asserts": "assert add_pairwise((1, 5, 7, 8, 10)) == (6, 12, 15, 18)\nassert add_pairwise((2, 6, 8, 9, 11)) == (8, 14, 17, 20)\nassert add_pairwise((3, 7, 9, 10, 12)) == (10, 16, 19, 22)",
            "input_reasoning": "add_pairwise((1, 5, 7, 8, 10))",
            "output_reasoning": "(6, 12, 15, 18)"
        },
        "72": {
            "nl": "Write a python function to check whether the given number can be represented as the difference of two squares or not.",
            "asserts": "assert dif_Square(5) == True\nassert dif_Square(10) == False\nassert dif_Square(15) == True",
            "input_reasoning": "dif_Square(5)",
            "output_reasoning": "True"
        },
        "473": {
            "nl": "Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.",
            "asserts": "assert tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)] , [(5, 4), (3, 4), (6, 5), (9, 11)]) == {(4, 5), (3, 4), (5, 6)}\nassert tuple_intersection([(4, 1), (7, 4), (11, 13), (17, 14)] , [(1, 4), (7, 4), (16, 12), (10, 13)]) == {(4, 7), (1, 4)}\nassert tuple_intersection([(2, 1), (3, 2), (1, 3), (1, 4)] , [(11, 2), (2, 3), (6, 2), (1, 3)]) == {(1, 3), (2, 3)}",
            "input_reasoning": "tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)] , [(5, 4), (3, 4), (6, 5), (9, 11)])",
            "output_reasoning": "{(4, 5), (3, 4), (5, 6)}"
        },
        "806": {
            "nl": "Write a function to find maximum run of uppercase characters in the given string.",
            "asserts": "assert max_run_uppercase('GeMKSForGERksISBESt') == 5\nassert max_run_uppercase('PrECIOusMOVemENTSYT') == 6\nassert max_run_uppercase('GooGLEFluTTER') == 4",
            "input_reasoning": "max_run_uppercase('GeMKSForGERksISBESt')",
            "output_reasoning": "5"
        },
        "791": {
            "nl": "Write a function to remove tuples from the given tuple.",
            "asserts": "assert remove_nested((1, 5, 7, (4, 6), 10)) == (1, 5, 7, 10)\nassert remove_nested((2, 6, 8, (5, 7), 11)) == (2, 6, 8, 11)\nassert remove_nested((3, 7, 9, (6, 8), 12)) == (3, 7, 9, 12)\nassert remove_nested((3, 7, 9, (6, 8), (5,12), 12)) == (3, 7, 9, 12)",
            "input_reasoning": "remove_nested((1, 5, 7, (4, 6), 10))",
            "output_reasoning": "(1, 5, 7, 10)"
        },
        "226": {
            "nl": "Write a python function to remove the characters which have odd index values of a given string.",
            "asserts": "assert odd_values_string('abcdef') == 'ace'\nassert odd_values_string('python') == 'pto'\nassert odd_values_string('data') == 'dt'\nassert odd_values_string('lambs') == 'lms'",
            "input_reasoning": "odd_values_string('abcdef')",
            "output_reasoning": "'ace'"
        },
        "272": {
            "nl": "Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.",
            "asserts": "assert rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]) == [21, 20, 19]\nassert rear_extract([(1, 'Sai', 36), (2, 'Ayesha', 25), (3, 'Salman', 45)]) == [36, 25, 45]\nassert rear_extract([(1, 'Sudeep', 14), (2, 'Vandana', 36), (3, 'Dawood', 56)]) == [14, 36, 56]",
            "input_reasoning": "rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)])",
            "output_reasoning": "[21, 20, 19]"
        },
        "756": {
            "nl": "Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php",
            "asserts": "assert text_match_zero_one(\"ac\")==False\nassert text_match_zero_one(\"dc\")==False\nassert text_match_zero_one(\"abbbba\")==True\nassert text_match_zero_one(\"dsabbbba\")==True\nassert text_match_zero_one(\"asbbbba\")==False\nassert text_match_zero_one(\"abaaa\")==True",
            "input_reasoning": "text_match_zero_one(\"ac\")",
            "output_reasoning": "False"
        },
        "443": {
            "nl": "Write a python function to find the largest negative number from the given list.",
            "asserts": "assert largest_neg([1,2,3,-4,-6]) == -6\nassert largest_neg([1,2,3,-8,-9]) == -9\nassert largest_neg([1,2,3,4,-1]) == -1",
            "input_reasoning": "largest_neg([1,2,3,-4,-6])",
            "output_reasoning": "-6"
        },
        "424": {
            "nl": "Write a function to extract only the rear index element of each string in the given tuple.",
            "asserts": "assert extract_rear(('Mers', 'for', 'Vers') ) == ['s', 'r', 's']\nassert extract_rear(('Avenge', 'for', 'People') ) == ['e', 'r', 'e']\nassert extract_rear(('Gotta', 'get', 'go') ) == ['a', 't', 'o']",
            "input_reasoning": "extract_rear(('Mers', 'for', 'Vers') )",
            "output_reasoning": "['s', 'r', 's']"
        },
        "724": {
            "nl": "Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.",
            "asserts": "assert power_base_sum(2,100)==115\nassert power_base_sum(8,10)==37\nassert power_base_sum(8,15)==62\nassert power_base_sum(3,3)==9",
            "input_reasoning": "power_base_sum(2,100)",
            "output_reasoning": "115"
        },
        "143": {
            "nl": "Write a function to find number of lists present in the given tuple.",
            "asserts": "assert find_lists(([1, 2, 3, 4], [5, 6, 7, 8])) == 2\nassert find_lists(([1, 2], [3, 4], [5, 6]))  == 3\nassert find_lists(([9, 8, 7, 6, 5, 4, 3, 2, 1])) == 1",
            "input_reasoning": "find_lists(([1, 2, 3, 4], [5, 6, 7, 8]))",
            "output_reasoning": "2"
        },
        "448": {
            "nl": "Write a function to calculate the sum of perrin numbers.",
            "asserts": "assert cal_sum(9) == 49\nassert cal_sum(10) == 66\nassert cal_sum(11) == 88",
            "input_reasoning": "cal_sum(9)",
            "output_reasoning": "49"
        },
        "457": {
            "nl": "Write a python function to find the sublist having minimum length.",
            "asserts": "assert Find_Min([[1],[1,2],[1,2,3]]) == [1]\nassert Find_Min([[1,1],[1,1,1],[1,2,7,8]]) == [1,1]\nassert Find_Min([['x'],['x','y'],['x','y','z']]) == ['x']",
            "input_reasoning": "Find_Min([[1],[1,2],[1,2,3]])",
            "output_reasoning": "[1]"
        },
        "426": {
            "nl": "Write a function to filter odd numbers.",
            "asserts": "assert filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1,3,5,7,9]\nassert filter_oddnumbers([10,20,45,67,84,93])==[45,67,93]\nassert filter_oddnumbers([5,7,9,8,6,4,3])==[5,7,9,3]",
            "input_reasoning": "filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
            "output_reasoning": "[1,3,5,7,9]"
        },
        "755": {
            "nl": "Write a function to find the second smallest number in a list.",
            "asserts": "assert second_smallest([1, 2, -8, -2, 0, -2])==-2\nassert second_smallest([1, 1, -0.5, 0, 2, -2, -2])==-0.5\nassert second_smallest([2,2])==None\nassert second_smallest([2,2,2])==None",
            "input_reasoning": "second_smallest([1, 2, -8, -2, 0, -2])",
            "output_reasoning": "-2"
        },
        "6": {
            "nl": "Write a python function to check whether the two numbers differ at one bit position only or not.",
            "asserts": "assert differ_At_One_Bit_Pos(13,9) == True\nassert differ_At_One_Bit_Pos(15,8) == False\nassert differ_At_One_Bit_Pos(2,4) == False\nassert differ_At_One_Bit_Pos(2, 3) == True\nassert differ_At_One_Bit_Pos(5, 1) == True\nassert differ_At_One_Bit_Pos(1, 5) == True",
            "input_reasoning": "differ_At_One_Bit_Pos(13,9)",
            "output_reasoning": "True"
        },
        "70": {
            "nl": "Write a function to find whether all the given tuples have equal length or not.",
            "asserts": "assert get_equal([(11, 22, 33), (44, 55, 66)]) == True\nassert get_equal([(1, 2, 3), (4, 5, 6, 7)]) == False\nassert get_equal([(1, 2), (3, 4)]) == True",
            "input_reasoning": "get_equal([(11, 22, 33), (44, 55, 66)])",
            "output_reasoning": "True"
        },
        "763": {
            "nl": "Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/",
            "asserts": "assert find_min_diff((1,5,3,19,18,25),6) == 1\nassert find_min_diff((4,3,2,6),4) == 1\nassert find_min_diff((30,5,20,9),4) == 4",
            "input_reasoning": "find_min_diff((1,5,3,19,18,25),6)",
            "output_reasoning": "1"
        },
        "600": {
            "nl": "Write a python function to check whether the given number is even or not.",
            "asserts": "assert is_Even(1) == False\nassert is_Even(2) == True\nassert is_Even(3) == False",
            "input_reasoning": "is_Even(1)",
            "output_reasoning": "False"
        },
        "56": {
            "nl": "Write a python function to check if a given number is one less than twice its reverse.",
            "asserts": "assert check(70) == False\nassert check(23) == False\nassert check(73) == True",
            "input_reasoning": "check(70)",
            "output_reasoning": "False"
        },
        "394": {
            "nl": "Write a function to check if given tuple contains no duplicates.",
            "asserts": "assert check_distinct((1, 4, 5, 6, 1, 4)) == False\nassert check_distinct((1, 4, 5, 6)) == True\nassert check_distinct((2, 3, 4, 5, 6)) == True",
            "input_reasoning": "check_distinct((1, 4, 5, 6, 1, 4))",
            "output_reasoning": "False"
        },
        "778": {
            "nl": "Write a function to pack consecutive duplicates of a given list elements into sublists.",
            "asserts": "assert pack_consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4])==[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\nassert pack_consecutive_duplicates([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10])==[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]\nassert pack_consecutive_duplicates(['a', 'a', 'b', 'c', 'd', 'd'])==[['a', 'a'], ['b'], ['c'], ['d', 'd']]",
            "input_reasoning": "pack_consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4])",
            "output_reasoning": "[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]"
        },
        "389": {
            "nl": "Write a function to find the n'th lucas number.",
            "asserts": "assert find_lucas(9) == 76\nassert find_lucas(4) == 7\nassert find_lucas(3) == 4",
            "input_reasoning": "find_lucas(9)",
            "output_reasoning": "76"
        },
        "760": {
            "nl": "Write a python function to check whether a list of numbers contains only one distinct element or not.",
            "asserts": "assert unique_Element([1,1,1]) == True\nassert unique_Element([1,2,1,2]) == False\nassert unique_Element([1,2,3,4,5]) == False",
            "input_reasoning": "unique_Element([1,1,1])",
            "output_reasoning": "True"
        },
        "556": {
            "nl": "Write a python function to count the number of pairs whose xor value is odd.",
            "asserts": "assert find_Odd_Pair([5,4,7,2,1],5) == 6\nassert find_Odd_Pair([7,2,8,1,0,5,11],7) == 12\nassert find_Odd_Pair([1,2,3],3) == 2",
            "input_reasoning": "find_Odd_Pair([5,4,7,2,1],5)",
            "output_reasoning": "6"
        },
        "454": {
            "nl": "Write a function that matches a word containing 'z'.",
            "asserts": "assert text_match_wordz(\"pythonz.\")==True\nassert text_match_wordz(\"xyz.\")==True\nassert text_match_wordz(\"  lang  .\")==False",
            "input_reasoning": "text_match_wordz(\"pythonz.\")",
            "output_reasoning": "True"
        },
        "422": {
            "nl": "Write a python function to find the average of cubes of first n natural numbers.",
            "asserts": "assert find_Average_Of_Cube(2) == 4.5\nassert find_Average_Of_Cube(3) == 12\nassert find_Average_Of_Cube(1) == 1",
            "input_reasoning": "find_Average_Of_Cube(2)",
            "output_reasoning": "4.5"
        },
        "256": {
            "nl": "Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.",
            "asserts": "assert count_Primes_nums(5) == 2\nassert count_Primes_nums(10) == 4\nassert count_Primes_nums(100) == 25",
            "input_reasoning": "count_Primes_nums(5)",
            "output_reasoning": "2"
        },
        "237": {
            "nl": "Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.",
            "asserts": "assert check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)] ) == {(1, 3): 2, (2, 5): 2, (3, 6): 1}\nassert check_occurences([(4, 2), (2, 4), (3, 6), (6, 3), (7, 4)] ) == {(2, 4): 2, (3, 6): 2, (4, 7): 1}\nassert check_occurences([(13, 2), (11, 23), (12, 25), (25, 12), (16, 23)] ) == {(2, 13): 1, (11, 23): 1, (12, 25): 2, (16, 23): 1}",
            "input_reasoning": "check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)] )",
            "output_reasoning": "{(1, 3): 2, (2, 5): 2, (3, 6): 1}"
        },
        "639": {
            "nl": "Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.",
            "asserts": "assert sample_nam(['sally', 'Dylan', 'rebecca', 'Diana', 'Joanne', 'keith'])==16\nassert sample_nam([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"])==10\nassert sample_nam([\"abcd\", \"Python\", \"abba\", \"aba\"])==6",
            "input_reasoning": "sample_nam(['sally', 'Dylan', 'rebecca', 'Diana', 'Joanne', 'keith'])",
            "output_reasoning": "16"
        },
        "145": {
            "nl": "Write a python function to find the maximum difference between any two elements in a given array.",
            "asserts": "assert max_Abs_Diff((2,1,5,3)) == 4\nassert max_Abs_Diff((9,3,2,5,1)) == 8\nassert max_Abs_Diff((3,2,1)) == 2",
            "input_reasoning": "max_Abs_Diff((2,1,5,3))",
            "output_reasoning": "4"
        },
        "230": {
            "nl": "Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.",
            "asserts": "assert replace_blank(\"hello people\",'@')==(\"hello@people\")\nassert replace_blank(\"python program language\",'$')==(\"python$program$language\")\nassert replace_blank(\"blank space\",\"-\")==(\"blank-space\")",
            "input_reasoning": "replace_blank(\"hello people\",'@')",
            "output_reasoning": "(\"hello@people\")"
        },
        "612": {
            "nl": "Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.",
            "asserts": "assert merge([['x', 'y'], ['a', 'b'], ['m', 'n']]) == [['x', 'a', 'm'], ['y', 'b', 'n']]\nassert merge([[1, 2], [3, 4], [5, 6], [7, 8]]) == [[1, 3, 5, 7], [2, 4, 6, 8]]\nassert merge([['x', 'y','z' ], ['a', 'b','c'], ['m', 'n','o']]) == [['x', 'a', 'm'], ['y', 'b', 'n'],['z', 'c','o']]",
            "input_reasoning": "merge([['x', 'y'], ['a', 'b'], ['m', 'n']])",
            "output_reasoning": "[['x', 'a', 'm'], ['y', 'b', 'n']]"
        },
        "740": {
            "nl": "Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/",
            "asserts": "assert tuple_to_dict((1, 5, 7, 10, 13, 5)) == {1: 5, 7: 10, 13: 5}\nassert tuple_to_dict((1, 2, 3, 4, 5, 6)) == {1: 2, 3: 4, 5: 6}\nassert tuple_to_dict((7, 8, 9, 10, 11, 12)) == {7: 8, 9: 10, 11: 12}",
            "input_reasoning": "tuple_to_dict((1, 5, 7, 10, 13, 5))",
            "output_reasoning": "{1: 5, 7: 10, 13: 5}"
        },
        "465": {
            "nl": "Write a function to drop empty items from a given dictionary.",
            "asserts": "assert drop_empty({'c1': 'Red', 'c2': 'Green', 'c3':None})=={'c1': 'Red', 'c2': 'Green'}\nassert drop_empty({'c1': 'Red', 'c2': None, 'c3':None})=={'c1': 'Red'}\nassert drop_empty({'c1': None, 'c2': 'Green', 'c3':None})=={ 'c2': 'Green'}",
            "input_reasoning": "drop_empty({'c1': 'Red', 'c2': 'Green', 'c3':None})",
            "output_reasoning": "{'c1': 'Red', 'c2': 'Green'}"
        },
        "802": {
            "nl": "Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/",
            "asserts": "assert count_rotation([3,2,1]) == 1\nassert count_rotation([4,5,1,2,3]) == 2\nassert count_rotation([7,8,9,1,2,3]) == 3\nassert count_rotation([1,2,3]) == 0\nassert count_rotation([1,3,2]) == 2",
            "input_reasoning": "count_rotation([3,2,1])",
            "output_reasoning": "1"
        },
        "9": {
            "nl": "Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.",
            "asserts": "assert find_Rotations(\"aaaa\") == 1\nassert find_Rotations(\"ab\") == 2\nassert find_Rotations(\"abc\") == 3",
            "input_reasoning": "find_Rotations(\"aaaa\")",
            "output_reasoning": "1"
        },
        "737": {
            "nl": "Write a function to check whether the given string is starting with a vowel or not using regex.",
            "asserts": "assert check_str(\"annie\")\nassert not check_str(\"dawood\")\nassert check_str(\"Else\")",
            "input_reasoning": "check_str(\"annie\")",
            "output_reasoning": "True"
        },
        "20": {
            "nl": "Write a function to check if the given number is woodball or not.",
            "asserts": "assert is_woodall(383) == True\nassert is_woodall(254) == False\nassert is_woodall(200) == False",
            "input_reasoning": "is_woodall(383)",
            "output_reasoning": "True"
        },
        "419": {
            "nl": "Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.",
            "asserts": "assert round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50])==243\nassert round_and_sum([5,2,9,24.3,29])==345\nassert round_and_sum([25.0,56.7,89.2])==513",
            "input_reasoning": "round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50])",
            "output_reasoning": "243"
        },
        "584": {
            "nl": "Write a function to find the first adverb ending with ly and its positions in a given string.",
            "asserts": "assert find_adverbs(\"Clearly, he has no excuse for such behavior.\") == '0-7: Clearly'\nassert find_adverbs(\"Please handle the situation carefuly\") == '28-36: carefuly'\nassert find_adverbs(\"Complete the task quickly\") == '18-25: quickly'",
            "input_reasoning": "find_adverbs(\"Clearly, he has no excuse for such behavior.\")",
            "output_reasoning": "'0-7: Clearly'"
        },
        "306": {
            "nl": "Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .",
            "asserts": "assert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 6) == 11\nassert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 2, 5) == 7\nassert max_sum_increasing_subseq([11, 15, 19, 21, 26, 28, 31], 7, 2, 4) == 71",
            "input_reasoning": "max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 6)",
            "output_reasoning": "11"
        },
        "748": {
            "nl": "Write a function to put spaces between words starting with capital letters in a given string.",
            "asserts": "assert capital_words_spaces(\"Python\") == 'Python'\nassert capital_words_spaces(\"PythonProgrammingExamples\") == 'Python Programming Examples'\nassert capital_words_spaces(\"GetReadyToBeCodingFreak\") == 'Get Ready To Be Coding Freak'",
            "input_reasoning": "capital_words_spaces(\"Python\")",
            "output_reasoning": "'Python'"
        },
        "743": {
            "nl": "Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/",
            "asserts": "assert rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3)==[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]\nassert rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],2)==[9, 10, 1, 2, 3, 4, 5, 6, 7, 8]\nassert rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],5)==[6, 7, 8, 9, 10, 1, 2, 3, 4, 5]",
            "input_reasoning": "rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3)",
            "output_reasoning": "[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]"
        },
        "643": {
            "nl": "Write a function that checks if a strings contains 'z', except at the start and end of the word.",
            "asserts": "assert text_match_wordz_middle(\"pythonzabc.\")==True\nassert text_match_wordz_middle(\"zxyabc.\")==False\nassert text_match_wordz_middle(\"  lang  .\")==False",
            "input_reasoning": "text_match_wordz_middle(\"pythonzabc.\")",
            "output_reasoning": "True"
        },
        "606": {
            "nl": "Write a function to convert degrees to radians.",
            "asserts": "assert radian_degree(90)==1.5707963267948966\nassert radian_degree(60)==1.0471975511965976\nassert radian_degree(120)==2.0943951023931953",
            "input_reasoning": "radian_degree(90)",
            "output_reasoning": "1.5707963267948966"
        },
        "596": {
            "nl": "Write a function to find the size in bytes of the given tuple.",
            "asserts": "assert tuple_size((\"A\", 1, \"B\", 2, \"C\", 3) ) == sys.getsizeof((\"A\", 1, \"B\", 2, \"C\", 3))\nassert tuple_size((1, \"Raju\", 2, \"Nikhil\", 3, \"Deepanshu\") ) == sys.getsizeof((1, \"Raju\", 2, \"Nikhil\", 3, \"Deepanshu\"))\nassert tuple_size(((1, \"Lion\"), ( 2, \"Tiger\"), (3, \"Fox\"), (4, \"Wolf\"))  ) == sys.getsizeof(((1, \"Lion\"), ( 2, \"Tiger\"), (3, \"Fox\"), (4, \"Wolf\")))",
            "input_reasoning": "tuple_size((\"A\", 1, \"B\", 2, \"C\", 3) )",
            "output_reasoning": "sys.getsizeof((\"A\", 1, \"B\", 2, \"C\", 3))"
        },
        "593": {
            "nl": "Write a function to remove leading zeroes from an ip address.",
            "asserts": "assert removezero_ip(\"216.08.094.196\")==('216.8.94.196')\nassert removezero_ip(\"12.01.024\")==('12.1.24')\nassert removezero_ip(\"216.08.094.0196\")==('216.8.94.196')",
            "input_reasoning": "removezero_ip(\"216.08.094.196\")",
            "output_reasoning": "('216.8.94.196')"
        },
        "305": {
            "nl": "Write a function to return two words from a list of words starting with letter 'p'.",
            "asserts": "assert start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\"])==('Python', 'PHP')\nassert start_withp([\"Python Programming\",\"Java Programming\"])==('Python','Programming')\nassert start_withp([\"Pqrst Pqr\",\"qrstuv\"])==('Pqrst','Pqr')",
            "input_reasoning": "start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\"])",
            "output_reasoning": "('Python', 'PHP')"
        },
        "629": {
            "nl": "Write a python function to find even numbers from a list of numbers.",
            "asserts": "assert Split([1,2,3,4,5]) == [2,4]\nassert Split([4,5,6,7,8,0,1]) == [4,6,8,0]\nassert Split ([8,12,15,19]) == [8,12]",
            "input_reasoning": "Split([1,2,3,4,5])",
            "output_reasoning": "[2,4]"
        },
        "119": {
            "nl": "Write a python function to find the element that appears only once in a sorted array.",
            "asserts": "assert search([1,1,2,2,3]) == 3\nassert search([1,1,3,3,4,4,5,5,7,7,8]) == 8\nassert search([1,2,2,3,3,4,4]) == 1",
            "input_reasoning": "search([1,1,2,2,3])",
            "output_reasoning": "3"
        },
        "172": {
            "nl": "Write a function to count the number of occurence of the string 'std' in a given string.",
            "asserts": "assert count_occurance(\"letstdlenstdporstd\") == 3\nassert count_occurance(\"truststdsolensporsd\") == 1\nassert count_occurance(\"makestdsostdworthit\") == 2\nassert count_occurance(\"stds\") == 1\nassert count_occurance(\"\") == 0",
            "input_reasoning": "count_occurance(\"letstdlenstdporstd\")",
            "output_reasoning": "3"
        },
        "252": {
            "nl": "Write a python function to convert complex numbers to polar coordinates.",
            "asserts": "assert convert(1) == (1.0, 0.0)\nassert convert(4) == (4.0,0.0)\nassert convert(5) == (5.0,0.0)",
            "input_reasoning": "convert(1)",
            "output_reasoning": "(1.0, 0.0)"
        },
        "168": {
            "nl": "Write a function to count the number of occurrences of a number in a given list.",
            "asserts": "assert frequency([1,2,3], 4) == 0\nassert frequency([1,2,2,3,3,3,4], 3) == 3\nassert frequency([0,1,2,3,1,2], 1) == 2",
            "input_reasoning": "frequency([1,2,3], 4)",
            "output_reasoning": "0"
        }
    }
}